3989,"`hideFromUser` is an undocumented key from TextMate used to hide
some grammars from the user.

/cc @vmg ",Externals,0,False,en
3984,Reverts github/linguist#3874 as per my comment at https://github.com/github/linguist/pull/3874#issuecomment-357209922,Internals,17,False,en
3977,"As reported in #3976, many repository rely on `perl6` as a Markdown
key for code snippet highlighting. The new Perl 6 name breaks this
behavior as it requires `perl-6` as the Markdown key.",Externals,7,False,en
3973,"The main reason there's still no Solidity syntax highlighting on GitHub is that the `.sol` extension is too generic.

Then, following [this thread](https://github.com/ethereum/solidity/issues/2681#issuecomment-355277311), having the extension `.solidity` for now and use the `.gitattributes` file to set manually the `.sol` extension on our side is the easiest way for now
  
Current public usage is over 400k hits, see [here](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asol+NOT+nothack&type=Code) and [here](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asolidity+NOT+nothack&type=Code)

Solidity is actively developed, used to manage the ethereum smart contract and it has been published by [Ethereum](https://github.com/ethereum).
  
Closes #3755 as superceded. PR #3755 fails CI due to a color proximity warning.
The [sample file](https://github.com/OpenZeppelin/zeppelin-solidity/blob/b50391862c42857e3ff2388598e52ebab92fc9fa/contracts/crowdsale/RefundVault.sol) comes from OpenZeppelin and is licensed under the [MIT license](https://github.com/OpenZeppelin/zeppelin-solidity/blob/b50391862c42857e3ff2388598e52ebab92fc9fa/LICENSE). The file has been edited to reflect the fact.
",Externals,88,True,en
3972,"This PR adds an issue and pull request template to help peeps help themselves, and us.

Issue and PR templates have been a feature of GitHub.com for quite some time and I think it's about time we started using them too, so tadaaa 🎉

My aim with these initial templates is to guide peeps logging issues to try and help themselves and work out the cause before logging an issue.

For pull requests, I'm trying to ensure all the pre-reqs are met without us having to ask each time.

What do you think peeps?",Internals,0,True,en
3966,"The HTTP grammar has been moved to a new location, from https://github.com/httpspec/sublime-highlighting to https://github.com/samsalisbury/Sublime-HTTP.",Externals,0,False,en
3960,This is the convention within the [Kojo Learning environment](http://www.kogics.net/kojo).,Externals,0,False,en
3955,"I've been slowly working on improving the documentation for Linguist and I think things are now in a good place to get peeps' thoughts.

I've restructured things a little bit and extended the documentation quite a bit, hopefully to address a lot of problems peeps have encountered in the past, but also to make it easier for peeps in future.

@Alhadis, @pchaigno and @larsbrinkhoff: one notable change I want to point out is the request for contributors to clearly state the license of their samples and the source of those samples in their pull requests.

As I mentioned in https://github.com/github/linguist/issues/3156#issuecomment-348805833, we _can_ accept copy-left licensed samples (_not_ grammars) as we're not using or shipping them as code, however GitHub would like to start keeping better tabs on the licenses and sources of these samples.

Tests will fail as httpspec has gone AWOL as pointed out by @kivikakk at https://github.com/github/linguist/pull/3948#issuecomment-352287338

Fixes https://github.com/github/linguist/issues/2331, https://github.com/github/linguist/issues/3261, https://github.com/github/linguist/issues/3649, https://github.com/github/linguist/issues/3666, https://github.com/github/linguist/issues/3825
",Internals,46,True,en
3948,"When deciding between ""GCC Machine Description"" and ""Markdown"" for `.md`, and a symlink is involved, we always choose ""GCC Machine Description"".

In general, if we've gotten to the end of all strategies and we're choosing between these two — i.e. we've deemed it to be ""equal probability"" that it's either one or the other — _however_ we've determined this, we should choose Markdown as the more likely of the two.

/cc @lildude Definitely open to other ways of doing this.",Internals,0,True,en
3946,This is part of what should be a correct fix for https://github.com/github/markup/pull/1133. Changes are required in `markup` itself and dotcom to pass the symlink info through from the repository.,Internals,4,False,en
3945,"Fix our `build_gem` call. Add `|| true` because right now there are broken grammars which would block a new gem deploy.

/cc @vmg @lildude ",Internals,0,True,en
3943,This adds [Materialize](http://materializecss.com) framework to the vendor list,Externals,0,False,en
3935,"The `add-grammars` script is not particularly robust. It uses backticks to spawn a lot of different commands, which means that if any of the commands fails, or returns an error message, this is disregarded.

This commit fixes the issue by refactoring the script a little bit. In my machine:

```
~/src/gopath/src/github.com/github/linguist vmg/compiler-err .$ script/add-grammar --replace language-babel https://github.com/gandm/language-babel
Deregistering: vendor/grammars/language-babel
$ git submodule deinit vendor/grammars/language-babel
$ git rm -rf vendor/grammars/language-babel
$ script/grammar-compiler update -f
Registering new submodule: vendor/grammars/language-babel
$ git submodule add -f https://github.com/gandm/language-babel vendor/grammars/language-babel
$ script/grammar-compiler add vendor/grammars/language-babel
  > The new grammar repository `vendor/grammars/language-babel` (from https://github.com/gandm/language-babel) contains 14 errors:
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(^|:|;|=|(?<=:|;|=))\s*+(\((?=((`..."": subpattern name expected (at offset 52))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(?<=^|{|,)\s*+(('|\"")([^""']*)(\k`..."": subpattern name expected (at offset 33))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(^\s*+(?=([$\w]*\s*+\??\s*+(:|=(`..."": nothing to repeat (at offset 73))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(?<!:)\s*+(\bstatic\b)?\s*+(\bas`..."": subpattern name expected (at offset 78))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(?:^|;)\s*+(\bstatic\b)?\s*+(\ba`..."": subpattern name expected (at offset 422))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(?<=^|{|,)\s*+(\b[_$a-zA-Z][$\w]`..."": subpattern name expected (at offset 281))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(?<=^|{|,)\s*+(\b[_$a-zA-Z][$\w]`..."": subpattern name expected (at offset 271))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(?<=^|{|,)\s*+(('|\"")([^""']*)(\k`..."": subpattern name expected (at offset 33))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`(?<=^|{|,)\s*+(('|\"")([^""']*)(\k`..."": subpattern name expected (at offset 33))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`\s*+(((""|').*?(?<=[^\\])\k<-1>)|`..."": subpattern name expected (at offset 27))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`\s*+(\basync\b)?\s*+(?=(<(?:(?>[`..."": subpattern name expected (at offset 240))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`\s*+(\b[_$a-zA-Z][$\w]*)\s*+(=)\`..."": subpattern name expected (at offset 271))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`\s*+(\b[A-Z][$\w]*)?(\.)(prototy`..."": subpattern name expected (at offset 304))
  >     - Invalid regex in grammar: `source.js.jsx` (in `grammars/Babel Language.json`) contains a malformed regex (regex ""`\s*+(\b_?[A-Z][$\w]*)?(\.)([_$a-`..."": subpattern name expected (at offset 291))
  > 
  > failed to compile the given grammar
Command failed. Aborting.
```

I've also added a proper CLI interface to the compiler:

```
~/src/gopath/src/github.com/github/linguist vmg/compiler-err 1:$ ./script/grammar-compiler 
NAME:
   Linguist Grammars Compiler - Compile user-submitted grammars and check them for errors

USAGE:
   grammar-compiler [global options] command [command options] [arguments...]

VERSION:
   0.0.0

COMMANDS:
     add      add a new grammar source
     update   update grammars.yml with the contents of the grammars library
     compile  convert the grammars from the library
     help, h  Shows a list of commands or help for one command

GLOBAL OPTIONS:
   --linguist-path value  path to Linguist root (default: ""/src/linguist"")
   --help, -h             show help
   --version, -v          print the version
```

You can now do fancier stuff like skipping errors and things.

cc @lildude ",Internals,42,True,en
3933,See #3929 for the original issue.,Externals,4,False,en
3932,Fixes #3726.,Externals,4,False,en
3931,"The `[a:-b]` syntax for index selection in arrays is valid in IDL and
matches the heuristic for Prolog. Update the Prolog heuristic to
exclude `[`.

See [EllenWasbo/getSiemensQC](https://github.com/EllenWasbo/getSiemensQC/blob/23228fb690fab1860a68f8e3cfd2d85e34ab5f8e/readctcons.pro#L96) for an example of such syntax.",Externals,25,False,en
3930,"Due to recent changes in the way repositories are cleaned up after deletion on GitHub.com, we can find ourselves in a race where the queued linguist job runs moments after the repository cleanup job has removed the repo from disk resulting in Linguist attempting to run on a non-existent directory.

This leads to the following exception:

```
git-linguist failed: fatal: Unable to read current working directory: No such file or directory
/data/github/releases/deploy-b/vendor/gems/2.4.3/ruby/2.4.0/gems/github-linguist-5.3.3/bin/git-linguist:122:in `pwd': No such file or directory - getcwd (Errno::ENOENT)
	from /data/github/releases/deploy-b/vendor/gems/2.4.3/ruby/2.4.0/gems/github-linguist-5.3.3/bin/git-linguist:122:in `git_linguist'
	from /data/github/releases/deploy-b/vendor/gems/2.4.3/ruby/2.4.0/gems/github-linguist-5.3.3/bin/git-linguist:146:in `<top (required)>'
	from /data/github/releases/deploy-b/bin/git-linguist:8:in `load'
	from /data/github/releases/deploy-b/bin/git-linguist:8:in `<main>'
```

Yes, ideally the job should be removed before it's run, but until then, this PR goes towards addressing this by a) not attempting to print the current directory in the event it goes missing, and b) printing the error to STDERR instead of raising another exception.

The lack of the directory in the error message reduces user-friendliness ever-so-slightly, but the removal of the exception improves it vastly.

Previously when run on a non-repo directory:

```
$ ~/github/linguist/bin/git-linguist stats
fatal: Not a git repository (or any of the parent directories): .git
/Users/lildude/github/linguist/bin/git-linguist:123:in `git_linguist': git-linguist must be run in a Git repository (/Users/lildude/Downloads/trash/foo.XX) (RuntimeError)
	from /Users/lildude/github/linguist/bin/git-linguist:150:in `<main>'
$
```

Now...

```
$ ~/github/linguist/bin/git-linguist
fatal: Not a git repository (or any of the parent directories): .git
git-linguist must be run in a Git repository
$
```

I did think of keeping the directory in the message and catching `Errno::ENOENT` but that would still have left a pretty 🤢  user-experience for peeps running on the CLI and would then have led to a RuntimeError we'd need to catch to keep our internal monitoring happy.  I like to think this approach is a happy compromise.

/cc @carlosmn & https://github.com/github/github/issues/81249",Internals,49,True,en
3925,"See #3922.

/cc @lildude @pchaigno ",Internals,4,True,et
3922,These don't add much to our tokenizer's accuracy and waste space duplicating large amounts of the samples in the sample JSON.,Internals,0,False,en
3921,"In monorepro projects, it's not uncommon for `Carthage` to not be in the root directory.",Externals,0,False,en
3920,"This is equivalent to #3865, but for [`Carthage`](https://github.com/Carthage/Carthage).

## What ?

This PR adds the `Carthage/Build` folder to `generated.rb` to blacklist it and its contents from PR diffs, etc.

## Why ?

While many developers [don't commit their `Carthage/Build` folder](https://github.com/Carthage/Carthage#using-submodules-for-dependencies), there are many developers and companies who do, due to the following reasons:

- Quicker build times in CI/CD (this is the top reason, usually)
- Ability for new developers to build immediately after cloning
- Many companies prefer keeping dependencies cloned to protect themselves from the day a project is ""gone""

The problem for pushing PRs that contain changes to dependencies is that they create an impossible-to-follow PR, as well as the fact the actual files changed by the developer don't get diffs as there are too many files.

This is an example from my own repo:
<img width=""992"" alt=""screen shot 2017-11-28 at 8 58 31 am"" src=""https://user-images.githubusercontent.com/685609/33332907-565bec02-d41a-11e7-8211-5189e7661ae2.png"">

The actual code changes there were less than 20 lines, while the diff was very hard to read due to the binary changes in `Carthage/Build`.

_Note, I chose to not add `Carthage/Checkout` because the only time people will chose to commit that is if they're using submodules, in which case I believe it's useful to see hash changes in the diffs._ ",Externals,59,True,en
3919,"As pointed out in the discussion in https://github.com/github/linguist/issues/3911, `tools/` is more commonly used for non-vendored code than vendored code.  Those that use this for vendored code, as the minority, should be using an override to mark this directory as vendored rather than the other way round.

This PR removed `tools/` from consideration for vendoring.

Fixes https://github.com/github/linguist/issues/3911",Internals,8,True,en
3916,"Hi. PostCSS is a very popular tool and many developers use it for preprocessing as well. For example, WebStorm already supports PostCSS.

I added two popular file ext for PostCSS preprocessors: `.pcss` (just CSS syntax with nesting/mixins) and `.sss` (Sass-like indent-based syntax).",Externals,0,True,en
3915,"Alright! Here's the new grammars compiler I've been working on. The old Ruby `script/convert-grammars` has been replaced by an actual compiler written in Go. The source code can be found in `tools/grammars/`.

To note:

- The compiler is being distributed as a Docker image, `linguist/grammars-compiler:latest` on Docker.io. The image is self-contained (duh) and includes all the dependencies, most notably NPM and the CSON parser it needs to run. `package.json` has been removed from this repository because eek.

- The new `script/grammars-compiler` is a thin wrapper over running the Docker image with the arguments you pass in.

- The main goal of the compiler is ensuring that all the grammars we add to Linguist are sensible and not malformed. This was _not_ the case previously. I've had to manually send PRs to many upstream repositories with different fixes for issues that the compiler has detected. Their corresponding submodules have been upgraded in https://github.com/github/linguist/commit/d08375d11bff726762b087bf0a1947f8903d74fd

- The compiler also normalizes the grammars into a fixed schema, removing superfluous keys and unifying content structures. This schema is serializable to JSON (like the old compiler) or to a Protobuf library, which we're going to start using internally.

- As it stands, this build is now green, although the compilation step is not fully ""clean"" yet. I'm going to open another issue with a list of outstanding issues in the existing grammars.

cc @github/linguist 

- The new compiler can output",Internals,27,True,en
3907,"BUILD.bazel and BUILD are used by Bazel, and both are valid filenames. BUILD.bazel is used in favor of BUILD if it exists.

https://stackoverflow.com/a/43205770/521209",Externals,14,True,en
3905,"A leading comma in the argument to `find_by_name` or `find_by_alias` will raise an exception currently, because `"","".split("","")` returns `[]`. Use the `limit` param to get only what we care about and ensure we don't hit this bug.

/cc @lildude (lemme know if these cc's are unwelcome!)",Internals,0,True,en
3903,"* Improve heuristic for XML/TypeScript (#3883)
* Update Julia definitions to use Atom instead of TextMate (#3871)
* Lexer crash fix (#3900)

/cc @lildude ",Internals,12,False,en
3902,"Hello!

This PR adds support for the CWL open standards for portable data analysis tool and workflow descriptions

http://www.commonwl.org/

There are [over 4,800 CWL files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Acwl+cwlVersion&type=Code).

Thanks :-)",Externals,10,True,en
3900,"Even better than #3899, a straight-up fix.

* Ensure we handle `input` returning `0` as EOF so as to not trigger an extra `YY_INPUT` call into nothing.
* Stop using all trailing context; it's equivalent to `REJECT` and results in an unresizeable buffer.
* Remove the superstitious version number restraint.

/cc @philipturnbull who fuzzed this for me to help point the way.",Internals,5,True,en
3895,"LFE language had no color to display in the status bar! 
LFE, I guess shouldn't be grouped. `group: Erlang` should be removed. The language is different in its own aspect as Elixir is different to Erlang. LFE contains many language designs as of CL, Scheme, Erlang. So, it wouldn't be justified to group it as LFE. ",Externals,0,False,en
3885,"Per [Terraform docs](https://www.terraform.io/intro/getting-started/variables.html), files ending in the `.tfvars` extension are commonly used in Terraform and written using HCL.",Externals,0,False,en
3883,"The heuristic for XML .ts files might match TypeScript generics
starting with TS.",Externals,0,False,en
3882,"* Update some grammar modules.
* Perl 5/6 disambig bug #3860.
* C-based tokenizer #3846.",Internals,10,False,en
3880,"I'm rewriting the Perl 5 grammar from scratch, and I noticed [one of the test-files](https://github.com/Alhadis/language-perl5/blob/2315b8c5727cb4a64b5bf9f562eecd1c6d9f7191/t/6.2.pod.embeds.t) was being misclassified as Turing. The file in question contains numerous blocks of code from other languages in order to stress-test embedded highlighting. So the Turing heuristic probably matched a line of foreign code by mistake.

Perl supports here-docs, embedded documentation, and virtually every text-processing trick known to man. The odds of Turing's heuristic testing positive against embedded content is pretty high, so we simply test Turing last. Turing is pretty vanilla in terms of syntax, so there's nothing lto worry about. =)

__Before:__  

~~~console
λ language-perl5 (master): $LING/bin/linguist t/6.2.pod.embeds.t 
6.2.pod.embeds.t: 128 lines (84 sloc)
  type:      Text
  mime type: application/x-troff
  language:  Turing
~~~

__After:__

~~~console
λ language-perl5 (master): $LING/bin/linguist t/6.2.pod.embeds.t 
6.2.pod.embeds.t: 128 lines (84 sloc)
  type:      Text
  mime type: application/x-troff
  language:  Perl
~~~",Externals,48,True,en
3879,"Fixes #3876 
https://github.com/search?utf8=%E2%9C%93&q=extension%3Aedc+NOT+nothack&type=Code&ref=searchresults",Externals,10,False,en
3877,https://github.com/search?utf8=%E2%9C%93&q=extension%3Ayara+rule&type=Code,Externals,6,False,en
3874,"This is to mark snapshot files generated by Jest (a testing framework by Facebook) as generated.
I want such files to be collapsed in GitHub diff.

ref: https://daveceddia.com/snapshot-testing-react-with-jest/

btw, does this project have a guideline for adding generated file rules?",Externals,0,False,en
3871,"Currently linguist uses our TextMate plugin for its Julia definitions, which isn't well maintained and has more than its fair share of issues. The Atom plugin for Julia, [atom-language-julia](https://github.com/JuliaEditorSupport/atom-language-julia), is actively maintained and used. Thus we'd like to switch our linguist definitions to use atom-language-julia instead of Julia.tmbundle to ensure that things keeping looking good in the GitHub web UI.

Please let me know whether I've set this up correctly; I wasn't able to find explicit documentation in this repository regarding how to change the grammar that's used for an existing language.",Externals,0,True,en
3870,"This PR adds the support for [Nextflow](https://www.nextflow.io/) programming language that is a DSL for computational workflows.

Current public usage is over 1k hits, see [here](https://github.com/search?utf8=%E2%9C%93&q=extension%3Anf+NOT+nothack&type=Code), [here](https://github.com/search?utf8=%E2%9C%93&q=extension%3Anf+input&type=Code) and [here](https://github.com/search?utf8=%E2%9C%93&q=extension%3Anf+output&type=Code).

Nextflow is actively developed and it has been published in [Nature Biotechnology](https://rdcu.be/qZVo).

",Externals,19,True,en
3866,"Idris is probably [big enough](https://github.com/search?l=Idris&q=idris&type=Repositories&utf8=%E2%9C%93) now to earn is its own color.

Medium red color (`#b30000`) taken from language logo:

![](https://www.idris-lang.org/logo/logo-small.png)",Externals,10,True,en
3865,"## What ?

This PR adds the `Pods` folder to `generated.rb` to blacklist it and its contents from PR diffs, etc.

## Why ?

While many developers don't commit their `Pods` folder, there are many developers and companies who do, due to the following reasons:

1. Quicker build times in CI/CD _(this is the top reason, usually)_
2. Ability for new developers to build immediately after cloning
3. Many companies prefer keeping dependencies cloned to protect themselves from the day a project is ""gone""

The problem for pushing PRs that contain changes to dependencies is that they create an impossible-to-follow PR, as well as the fact the _actual files_ changed by the developer don't get diffs as there are too many files. 

Here's just a single example but we, as well as many other companies and devs I know, have this issue:
![e1d96f3f-c3ac-40a3-a1ee-35603375e735](https://user-images.githubusercontent.com/605076/31669130-e22facfc-b35c-11e7-81f6-b99a47799b65.png)

I would appreciate your consideration of merging this change, for the sanity of iOS developers :neckbeard: ",Externals,56,True,en
3864,"* Fix Perl/Pod disambiguation

/cc @Alhadis @lildude @dbussink ",Internals,0,True,et
3863,"We uncomplicate matters by removing "".pod"" from the Perl definition entirely.

Fixes #3832.

/cc @lildude ",Internals,4,True,en
3862,"I couldn't track down why these were disabled in the first place, but tests for Ruby 2.4.0 now work!",Externals,3,False,en
3861,"Vendors a few big JavaScript libraries:
- [`pdf.worker.js`](https://github.com/search?p=99&q=filename%3Apdf.worker.js&type=Code&utf8=%E2%9C%93)
- [`bootbox.js`](https://github.com/search?utf8=%E2%9C%93&q=filename%3Abootbox.js&type=)
- [`jquery.dataTables.js`](https://github.com/search?utf8=%E2%9C%93&q=filename%3Ajquery.dataTables.js&type=)
- [`select2/*.(css|scss|js)`](https://github.com/search?utf8=%E2%9C%93&q=path%3Aselect2+extension%3Ajs+function&type=)",Externals,29,False,en
3860,"Perl 5 code containing `class` or `module` was incorrectly interpret as Perl 6, as described in #3637.

This fixes the issue and adds a test which would cause a failure without the change to `heuristics.rb`.",Externals,6,True,en
3859,"Changes since last release (https://github.com/github/linguist/compare/v5.2.0...master)

- Update to charlock_holmes 0.7.5 (#3778)
- Fix classification of bogus ""markup"" languages (#3751)
- Add nearley language definition. (#3781)
- Byebug requires Ruby 2.2 (#3790)
- Add test to keep grammar-list synced with submodules (#3793)
- Add "".gql"" as a GraphQL file extension (#3813)
- Added "".monkey2"" extension to Monkey Programming Language (#3809)
- Change KiCad Board language to KiCad Legacy Layout (#3799)
- Added syntax highlighting for Squirrel (#3791)
- Create VBAllInOne.vb (#3785)
- Added .mjs extension to JavaScript (#3783)
- Updated color for Ceylon language (#3780)
- Make Matlab's Color More Appropriate (#3771)
- Add .clang-tidy filename for YAML (#3767)
- Classify some project files as XML (#3696)
- Add DataWeave language (#3804)
- Update Ace modes for Csound languages (#3822)
- Add Ballerina language (#3818)
- Register ""buildozer.spec"" as an INI filename (#3817)
- Added natvis extension to XML (#3789)
- Change Ruby grammar source (#3782)
- New repository for TypeScript grammar (#3730)
- Added VS Code workspace files to vendored path (#3723)
- Fix typo in script/add-grammar (#3853)
- Don't count VCL as Perl for statistics. (#3857)
- Add WDL language support (#3858)
- Add Angelscript language (#3844)
- Create association with OpenEdge .w files (#3648)

... and an update to the latest version of all grammars.

/cc @github/data-engineering @dbussink",Internals,121,True,en
3858,"This is adding language support for the [Workflow Description Language](https://github.com/openwdl/wdl).

Current public usages, as requested: [WDL Usages](https://github.com/search?utf8=%E2%9C%93&q=extension%3Awdl+NOT+nothack&type=Code) 

If I managed to do everything correctly, this should be based on our [sublime highlighter](https://github.com/broadinstitute/wdl-sublime-syntax-highlighter). 

WDL has full development support in [JetBrains IDEs](https://github.com/broadinstitute/winstanley) and multiple [high-scale](https://github.com/broadinstitute/cromwell) [execution](https://dnastack.com/#/) [engines](https://github.com/dnanexus-rnd/dxWDL).

Thanks!",Externals,6,True,en
3857,"While the Varnish-specific language was apparently inspired by C and Perl, there's no reason to group it as Perl for repo statistics.  Also re-adding the VCL `color` definition.",Externals,0,False,en
3856,"@bkeepers is no longer actively involved with Linguist so it doesn't makes sense to ping him anymore. Updating the docs to get peeps to ping me.

As an aside, the corpus gathering on the GitHub side doesn't work at the mo so the ping is a bit moot at the moment, but it is on my list to fix it :soon:",Internals,0,True,en
3853,Just noticed this typo and thought best to fix it now whilst I remember as I _will_ forget otherwise.,Internals,0,False,en
3846,"Preliminary benchmarks put this in at a 12x speedup.

```
[1] ~/github/linguist  $ bundle exec bin/bench
Rehearsal -----------------------------------------
c:      0.460000   0.000000   0.460000 (  0.464052)
rb:     5.120000   0.020000   5.140000 (  5.142903)
-------------------------------- total: 5.600000sec
            user     system      total        real
c:      0.420000   0.000000   0.420000 (  0.426902)
rb:     5.170000   0.020000   5.190000 (  5.188762)
Tokens extracted by each method:
 * extract_tokens_c: 3041830
 * extract_tokens_rb: 2836080
```

It doesn't produce identical results, but very near enough to. (Enough that all the tests should pass.)

/cc @vmg because he luuuuurves C",Internals,136,True,en
3844,"**Note:** This is a continuation of #3422 by @ifarbod, please see that PR for a bit more details, including [link to search results](https://github.com/search?utf8=✓&q=extension%3Aangelscript+NOT+nothack&type=Code&ref=searchresults), however I believe most Angelscript developers use the .as extension which is ambiguous with Actionscript.

Contributing.md mentions that @bkeepers is able to help with ambiguity testing? (I can provide a sample of > 500 Angelscript files from our game, but there's a lot of Angelscript codebases out there.)

Otherwise, I could also write a disambiguate rule in `heuristics.rb` if necessary.

On top of the original PR, I have added [this Angelscript grammar](https://github.com/wronex/sublime-angelscript).",Externals,9,True,en
3822,"This pull request updates Ace modes for Csound languages, which were merged in https://github.com/ajaxorg/ace/pull/3398.",Externals,4,False,en
3818,"Hi all,

This PR adds [Ballerina](https://github.com/ballerinalang/ballerina) language to the linguist. Ballerina is a general purpose, concurrent and strongly typed programming language with both textual and graphical syntaxes, optimized for integration.

I have,
1) Added Ballerina language to `languages.yml`. Extension(.bal) does not have any conflicts.
2) Added grammar which has Apache 2 licence.
3) Added some samples.
4) Generated `language_id` for Ballerina.
5) Ran the tests locally and all tests passed without any issue.

You can find the search results for Ballerina usage [here](https://github.com/search?o=desc&q=extension%3Abal+NOT+nothack&s=indexed&type=Code&utf8=%E2%9C%93).

Please let me know if I have missed something.

Thanks.",Externals,12,True,en
3817,"Resolves #3814 by adding `buildozer.spec` as an INI filename. While it isn't *technically* an ""INI"" file in the Windows sense of the word, the description given by the [format's specification](http://buildozer.readthedocs.io/en/latest/specifications.html) convinces me it's close enough. In any case, it's a much better fit than what the classifier's currently giving:

<img src=""https://user-images.githubusercontent.com/2346707/30242006-990d4230-95d1-11e7-9c4f-bf5081a8cb7e.png"" width=""242"" alt=""Figure 1"" />

## Usage on GitHub
Only [1,382 files](https://github.com/search?utf8=%E2%9C%93&q=filename%3Abuildozer.spec&type=) indexed on GitHub, but they're pretty much one-per-repo, meaning they're well-distributed:

- **Unique repositories:** 954
- **Unique users:** 770

A list of collected URLs may be found [here](https://github.com/Alhadis/Linguist-Silo/blob/misc/buildozer.spec.log).

## Origin of sample
The sample I added was taken from the [repository](https://github.com/Narcolapser/Kivy-Kazam/blob/5b6ee1d985475717581ea7f76cd7354ea3371813/buildozer.spec) which was referenced in the issue this PR fixes: #3814. Conveniently enough, @Narcolapser [licensed](https://github.com/Narcolapser/Kivy-Kazam/blob/5b6ee1d985475717581ea7f76cd7354ea3371813/LICENSE) the project under the Apache-2 clause.

/cc @pchaigno",Externals,123,True,en
3813,,Externals,0,False,en
3811,"These compile with the latest Monkey2 release (V1.1.06).

Don't know how to add a Public Domain license, but I made those from scratch so, yes, they're public domain.",Externals,5,True,en
3809,"The latest Monkey Programming Language extension is "".monkey2"", so I added it to this list. The language description is available at ""http://monkeycoder.co.nz"". Thanks!",Externals,1,False,en
3806,"This allows to test a use-case where markdown should be reported
in the language stats (e.g because the main purpose of the repo is to
hold prose in markdown format) while HTML should be excluded from the
language stats (e.g because it's example output).",Externals,0,False,en
3804,"Usages:
https://github.com/search?p=1&q=extension%3Adwl+NOT+nothack&type=Code&utf8=%E2%9C%93

Documentation: https://mule4-docs.mulesoft.com/mule-user-guide/v/4.0/dataweave",Externals,10,False,en
3799,"KiCad .brd files and .kicad_pcb files have the same purpose, they are both source files for PCB layouts. Having one of the file types named ""KiCad Board"" and the other one ""KiCad Layout"" can cause confusion since it implies they are not the same thing.

The [.brd files use the old, legacy layout format](http://kicad-pcb.org/help/file-formats/#_native_file_formats) that is [not actively used anymore](https://github.com/search?utf8=%E2%9C%93&q=language%3A%22KiCad+Board%22&type=Repositories&ref=advsearch&l=KiCad+Board&l=). Having it come before the KiCad Layout language in the Language Selection list and not having it flagged as legacy can cause people to select it when searching for KiCad layout files:

<img width=""716"" alt=""screen shot 2017-08-29 at 10 27 56"" src=""https://user-images.githubusercontent.com/1408377/29811894-3f849cde-8ca5-11e7-89da-232f86edf009.png"">

See #3784 for the ongoing discussion about the KiCad file formats. This PR builds upon the changes introduced by #3743.",Externals,69,True,en
3793,"We're constantly forgetting to update [`vendor/README.md`](https://github.com/github/linguist/blob/grammar-list-test/vendor/README.md) whenever we add or change a grammar, and it's no wonder why. The [`script/add-grammar`](https://github.com/github/linguist/blob/4fd1dd7f6cf3934a704f36a9120e2d856f3e0821/script/add-grammar#L104) tool is the only thing that's currently updating the list at the moment... and it doesn't even get used that often.

This PR adds a test to make sure the list stays updated with submodule removals or additions.

**References:** #3192, #3307",Externals,37,True,en
3791,"https://github.com/search?utf8=%E2%9C%93&q=extension%3Anut+NOT+nothack&t
ype=Code

Squirrel is already detected by GitHub but has no syntax
highlighting.",Externals,6,False,en
3790,"The minimum Ruby version required for byebug is now 2.2.0 thanks to https://github.com/deivid-rodriguez/byebug/pull/337. This requirement change has led to our 2.1 builds failing with:

```
Gem::InstallError: byebug requires Ruby version >= 2.2.0.
Using github-linguist 5.2.0 from source at .
An error occurred while installing byebug (9.1.0), and Bundler cannot continue.
Make sure that `gem install byebug -v '9.1.0'` succeeds before bundling.
The command ""eval bundle install --jobs=3 --retry=3 --path=${BUNDLE_PATH:-vendor/bundle} "" failed 3 times.
The command ""bundle install --jobs=3 --retry=3 --path=${BUNDLE_PATH:-vendor/bundle}"" failed and exited with 5 during .
Your build has been stopped.
```

Rather than locking us to a particular version of byebug, I've bumped the minimum Ruby version to 2.2.0 and I've also defined a `:debug` group and excluded it in the Travis build so byebug is not installed during testing as it's not needed during testing.

One less gem means a slightly quicker build too 😄

/cc @github/data-engineering",Internals,29,True,en
3789,"natvis: https://docs.microsoft.com/en-us/visualstudio/debugger/create-custom-views-of-native-objects

https://github.com/search?utf8=%E2%9C%93&q=extension%3Anatvis+NOT+nothack&type=Code",Externals,6,True,en
3785,Adding the test file the Visual Basic compiler team uses to verify parsing and other features.,Externals,0,False,en
3783,"Used for Node.js when parsing in the Module grammar of ECMAScript.

From Node EP: https://github.com/nodejs/node-eps/blob/master/002-es-modules.md#32-determining-if-source-is-an-es-module

An Internet Draft: https://datatracker.ietf.org/submit/status/88872/

Search results: https://github.com/search?utf8=%E2%9C%93&q=extension%3Amjs+NOT+nothack&type=Code

NOTE: there is an older JavaScript dialect that uses this extension outside of the links above. This still aids in reading those files.",Externals,16,True,en
3782,"As discuted in #3712, this changes the source repository for Ruby grammars from the aroben/ruby.tmbundle repository to the official Atom one.

I hope to have done things correctly.",Externals,4,True,en
3781,"Hi everyone! I added a language definition for the [nearley parser generator](http://github.com/Hardmath123/nearley). In particular, I

- [x] Added the definition in languages.yml; the extension does not conflict with any other language
- [x] Picked a distinct-enough color
- [x] Added a grammar (.tmLanguage), which is Unlicensed
- [x] Added a large sample `.ne` file
- [x] Added a language ID using the script
- [x] Ran the tests; all pass on my machine

Here is a [search result](https://github.com/search?utf8=✓&q=extension%3Ane+NOT+nothack&type=Code) showing around 4.9k nearley files ""in the wild"". In addition, the [nearley homepage](https://nearley.js.org) explicitly curates 50 nearley-based projects, all hosted on Github.

Please let me know if there's anything else I need to do. Thanks for your time!

(I'm going to CC the other nearley maintainer, @tjvr.)

EDIT: I also accepted the CLA for github/linguist.",Externals,9,True,en
3780,Golden-brown color taken from [Ceylon elephant logo](https://ceylon-lang.org/).,Externals,0,False,en
3778,"As pointed out in https://github.com/github/linguist/issues/3777 the charlock_holmes dependency of Linguist can't be installed on macOS 10.12.6 due to https://github.com/brianmario/charlock_holmes/issues/117

This PR fixes that problem by updating our dependency to charlock_holmes 0.7.5. This is the latest release and also the release used on GitHub.com

Fixes https://github.com/github/linguist/issues/3777

/cc @github/data-engineering for FYI",Internals,19,True,en
3771,Purple is not an affiliated color of Matlab or Mathworks. Change the color to better reflect the color theme of the Matlab sofware and logo.,Externals,0,False,en
3767,"`.clang-tidy` is the filename used for clang-tidy's configuration file. clang-tidy is a clang-based C++ ""linter"" tool. For more info, see: https://clang.llvm.org/extra/clang-tidy/

It has [over a thousand site-wide uses](https://github.com/search?utf8=%E2%9C%93&q=filename%3A.clang-tidy+NOT+nothack&type=Code&ref=searchresults).",Externals,6,True,en
3765,"Changes since last release (https://github.com/github/linguist/compare/v5.1.0...v5.2.0)

- Add support for XPM. (#3706)
- fix classifier tests (#3709)
- Support for C++ files generated by protobuf/grpc (#3640)
- Change Haskell's colour to use official branding (#3728)
- Allow POD with Perl shebangs (#3735)
- Add Printer Font ASCII to recognised PostScript extensions (#3734)
- Add support for Gerber files (#3744)
- Make Language methods more resilient to non-String input (#3752)
- Switch grammar for Reason (#3732)
- Add Adobe Font Metrics to recognised filetypes (#3731)
- Refine definition of KiCad (#3743)
- Add flow-typed to vendor.yml (#3741)

... and an update to the latest version of all grammars.",Internals,54,True,en
3752,"The erroring test in 3e594a58ed70c278b0a5aa299dea45c18f40e531 shows the exception that we're seeing when using Linguist on GitHub.com and GitHub Enterprise when calls like `Language.find_by_alias(true)` end up being made:

```
  1) Error:
TestLanguage#test_does_not_blow_up_with_non_string_lookup:
NoMethodError: undefined method `downcase' for true:TrueClass
    /home/travis/build/github/linguist/lib/linguist/language.rb:128:in `find_by_alias'
    /home/travis/build/github/linguist/test/test_language.rb:274:in `test_does_not_blow_up_with_non_string_lookup'
```

Instead of raising an error, this handles non-String input so that `nil` is returned instead.

The problem can be recreated by creating a `.gitattributes` file that sets `linguist-language` to `true`, rather than a `String`.

So like this:

```
*.rb linguist-language
```

Rather than using the documented instructions like this:

```
*.rb linguist-language=Ruby
```

From the docs for the _Set_ state at https://git-scm.com/docs/gitattributes:

> The path has the attribute with special value ""true""; this is specified by listing only the name of the attribute in the attribute list.",Internals,32,True,en
3751,"## UPDATED
Okay, further digging around the corners of `languages.yml` revealed some other egregious cases of bogus ""markup"" languages, which my comment below describes in depth. I've updated the OP with a summary to recap what's changed:

* **ApacheConf** and **Nginx** configuration files recategorised from `markup` to `data`. The [latest ""trending"" Nginx repos](https://github.com/trending/nginx) reveals no physics-defying typesetting logic that can explain how a list of server variables controls the flow of typography (I've seriously been spending too much time in `troff`, honestly...)

* **Web Ontology Language** was tagged as `markup`, presumably by a submitter who was mislead by the connection to XML (possibly before XML was deemed to be data-typed, rather than real markup).

* **Eagle** CAD files specify PCB drawing data for the Eagle CAD suite. See https://github.com/github/linguist/pull/3743#issuecomment-319643063 for long-winded rationale and too many tangential anecdotes.

* **XPages** was a dead giveaway with its only two file-extensions being `.xsp-config` and `.xsp.metadata`. Didn't take much research to figure out they're just [XML-based configuration files](https://github.com/jesse-gallagher/Raidomatic/blob/6a3b28ebcb591f6dfb8d9eb8dd3f7b1c18035401/forums/CustomControls/DateTime.xsp-config) for a [web application framework](http://xpages.info/XPagesHome.nsf/Home.xsp) named ""XPages"". On the plus side, I also added XML highlighting for it, so at least its data [will look nicer now](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=text.xml&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fjesse-gallagher%2FRaidomatic%2Fblob%2F6a3b28ebcb591f6dfb8d9eb8dd3f7b1c18035401%2Fforums%2FCustomControls%2FDateTime.xsp-config&code=). =)

* **Pure Data** was only investigated for laughs because of the name, which looked ironic juxtaposed to a `type` of `programming`. After looking it up though, it turns out that the... frikkin' language really is [""pure data""](https://github.com/halfbyte/PureDataLibrary/blob/master/zerhacker.pd). I'll quote [PD's FAQ here](https://puredata.info/docs/faq/whatispd):

	> **Q:** _""What Is Pd?""_
	> **A:** `Pd` stands for `Pure Data.` Pd is a real-time software system for live musical and multimedia performances. It is in active development by Miller Puckette, and perhaps others. The system is unfinished, but quite usable for sophisticated projects.

	And the gloss on [PD's homepage](https://puredata.info/) makes it pretty obvious it isn't even programmer-related:

	> Pure Data is an open source visual programming environment [ … ] Pd enables musicians, visual artists, performers, researchers, and developers to create software graphically without writing lines of code. Pd can be used to process and generate sound, video, 2D/3D graphics, and interface sensors, input devices, and MIDI

	One look at the [sort of stuff](https://github.com/breedx2/pure-data/blob/master/abstractions/ctable.pd) that `.pd` files contain, and you know it's not been hand-written... Though to be fair, this misclassification was added [in the same commit](https://github.com/github/linguist/commit/8f46cd07487b6c5ce034ef7a9a3e19f999914513#diff-3552b1a64ad2071983c4d91349075c75R621) that Linguist's first two language-types were defined: which were limited to `Programming` and `Markup`. Guess it escaped notice and remained unnoticed for ~6 years.

--------------

### Original post that started this search:

@goodmind pointed out a confusing oddity in #3740:

> I looked at Protobuf and it has `type: markup` but initially I thought that this type should be used for HTML-like languages only and not RPC languages like Protobuf. (markup type is very misleading at first)

He's right. My understanding of Protobuf is that it's used for defining APIs, not marking up presentational content.

The current `type` classification for Protocol Buffer was added by @qqshfox in February 2013 (#392). I'd say Linguist's handling of language-types has become much more refined in the years since, but I feel I should ping @qqshfox to ask if he feels `markup` would still be a more suitable descriptor for Protocol Buffer?

My exposure with Protobuf is rather minimal, but I was actually reading about it recently after submitting [`google/fonts#1094`](https://github.com/google/fonts/pull/1094), and then wondering about the missing syntax highlighting for its ""text-based component"".",Externals,150,False,en
3744,"This is it. This is the moment that nobody's been waiting for. The anxiously awaited addition of **GERBER** support for GitHub!

What's **Gerber**, you ask? Well, if you haven't figured out from the name that it's [the de facto standard](https://en.wikipedia.org/wiki/Gerber_format) for PCB imaging formats, then I don't know what else to tell you. In all seriousness, the format has been standardised since at least 1998, and with more file extension schizophrenia than Markdown AND Roff together.

I wouldn't have expected such a format to have a widespread presence on GitHub, and... well, I was wrong:
* `.gbr`: [~37,727 results](https://github.com/search?q=extension%3Agbr+NOT+nothack&type=Code) / [2,953 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gbr)
* `.gbl`: [~14,608](https://github.com/search?q=extension%3Agbl+NOT+nothack&type=Code) / [2,862 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gbl)
* `.gbo`: [~12,124](https://github.com/search?q=extension%3Agbo+NOT+nothack&type=Code) / [2,847 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gbo)
* `.gbp`: [~4,773](https://github.com/search?q=extension%3Agbp+NOT+nothack&type=Code) / [2,599 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gbp)
* `.gbs`: [~21,498](https://github.com/search?q=extension%3Agbs+NOT+nothack&type=Code) / [2,889 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gbs)
* `.gko`: [~2,656](https://github.com/search?q=extension%3Agko+NOT+nothack&type=Code) / [2,237 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gko)
* `.gtl`: [~14,481](https://github.com/search?q=extension%3Agtl+NOT+nothack&type=Code) / [2,856 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gtl)
* `.gto`: [~13,105](https://github.com/search?q=extension%3Agto+NOT+nothack&type=Code) / [2,860 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gto)
* `.gtp`: [~10,268](https://github.com/search?q=extension%3Agtp+NOT+nothack&type=Code) / [2,836 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gtp)
* `.gts`: [~14,775](https://github.com/search?q=extension%3Agts+NOT+nothack&type=Code) / [2,891 sampled results](https://github.com/Alhadis/Linguist-Silo/tree/gts)
* `.gpb`: [~1,433](https://github.com/search?q=extension%3Agpb+NOT+nothack&type=Code)
* `.gpt`: [~3,960](https://github.com/search?q=extension%3Agpt+NOT+nothack&type=Code)

You see now why I already hate this format.

Despite the ridiculous number of extensions, there's thankfully very little conflict with existing file formats. Most of the clashes are with binary files, which Linguist would skip anyway. You can see the sorted result of each filetype search in the aforementioned sample links.


## Origin of samples
I was lucky to find samples released under a license, let alone a permissive one. Most repos I encountered were unlicensed altogether, so I'm glad I found these:

* [`986-Studio/FelinaePurr`](https://github.com/986-Studio/FelinaePurr/tree/a852ef5cc17ec03280d2e7d444970d7c498b6d08): [BSD-3-Clause](https://github.com/986-Studio/FelinaePurr/blob/a852ef5cc17ec03280d2e7d444970d7c498b6d08/LICENSE)
* [`gatechipdl/GameOfLight`](https://github.com/gatechipdl/GameOfLight/tree/0871628ab0d0fe072f09af73d5a283b8aa9c0bda): [MIT/Expat](https://github.com/gatechipdl/GameOfLight/blob/0871628ab0d0fe072f09af73d5a283b8aa9c0bda/LICENSE)
* [`akhenakh/nanoAPRS`](https://github.com/akhenakh/nanoAPRS/tree/e593d8ffc0cb49b995e17e723b8eba3f20202bd6): [MIT/Expat](https://github.com/akhenakh/nanoAPRS/blob/e593d8ffc0cb49b995e17e723b8eba3f20202bd6/LICENSE)
* [`agustinBassi/juegoSimon`](https://github.com/agustinBassi/juegoSimon/tree/874434e95f88538ceee6a0628db37a7142bee54b/hard): [BSD-2-Clause](https://github.com/agustinBassi/juegoSimon/blob/master/LICENSE)
",Externals,293,True,en
3743,"What the site [currently classifies](https://github.com/github/linguist/blob/b94e018/lib/linguist/languages.yml#L2117-L2125) as **KiCad** is, according to [their documentation](http://kicad-pcb.org/help/file-formats/), three entirely different formats:

* **Schematic files:** Two different files, same format (and extension). Still in use.
	* `.sch`: [5,501 samples](https://github.com/Alhadis/Linguist-Silo/tree/sch) collected out of [~224,968 results](https://github.com/search?q=extension%3Asch+NOT+nothack&type=Code)

* **Board files:** Original PCB layout format, now superseded by new S-expression format.

	* `.brd`: [2,907 samples](https://github.com/Alhadis/Linguist-Silo/tree/brd) collected out of [~107,658 results](https://github.com/search?q=extension%3Abrd+NOT+nothack&type=Code)

* **Pcbnew layout:** Primary PCB format used by KiCad suite, with a syntax based on S-expressions:
	* `.kicad_pcb`: [16,808 results](https://github.com/search?q=extension%3Akicad_pcb+NOT+nothack&type=Code)
	* `.kicad_mod`: [284,942 results](https://github.com/search?q=extension%3Akicad_mod+NOT+nothack&type=Code)
	* `.kicad_wks`: [306 results](https://github.com/search?q=extension%3Akicad_wks+NOT+nothack&type=Code)
	* `fp-lib-table`: [4,482 results](https://github.com/search?q=filename%3Afp-lib-table+NOT+nothack&type=Code)

Technical specifications of each format are covered in a [PDF file](http://bazaar.launchpad.net/~stambaughw/kicad/doc-read-only/download/head:/1115%4016bec504-3128-0410-b3e8-8e38c2123bca:trunk%252Fkicad-doc%252Fdoc%252Fhelp%252Ffile_formats%252Ffile_formats.pdf/file_formats.pdf), downloadable from KiCad's website.

I collected a fresh harvest of both `sch` and `brd` files, with the breakdown graphs included in each silo:
* [`.sch` breakdown](https://github.com/Alhadis/Linguist-Silo/blob/sch/breakdown.log)
* [`.brd` breakdown](https://github.com/Alhadis/Linguist-Silo/blob/brd/breakdown.log)

## Notes
* KiCad formats are `data` formats, not `programming` languages. I'm not sure why @pchaigno [chose the latter](https://github.com/github/linguist/pull/2309/files#diff-3552b1a64ad2071983c4d91349075c75R1566) in #2309 / #2187, but these formats are essentially just lists of coordinates, property lists, and object descriptions. XML has more in common with programming languages than these do.

* A considerable number of `sch` search results were [Scheme files](https://github.com/Alhadis/Linguist-Silo/blob/sch/urls-lang%3Dscheme.log). I ran an [additional search](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asch+define&type=Code) to gauge the extension's usage better, and concluded that it's common enough to include it as a recognised Scheme extension. There were numerous Racket files as well, but I don't know the difference between Scheme and Racket, so I left the latter as-is.

* Sample files were sourced from faffing around with vanilla [KiCad](http://kicad-pcb.org/) and [gEDA-gaf](http://www.geda-project.org/) installations, and me clicking anything that looked like a drawing tool. Needless to say, I couldn't find any samples released under a clear permissive license, so I hacked together my own.

* Scheme sample [`sboyer.sch`](https://github.com/shymega/guile/blob/cfe2279fea0987291bd772c769a204ca33e656b9/gc-benchmarks/larceny/sboyer.sch) released to the public domain ([source confirmed here](http://www.larcenists.org/R6src/sboyer.sch)).

* __Obligatory sidenote:__ The `harvester.js` snippet I wrote to collect public search results has been [moved to a Gist](https://gist.github.com/Alhadis/cae3452d49d640b48a507cadd02f86ce). Everything else has been torched and salted, with local copies eradicated by `rm ‑rfP`. I've never felt palpable disgust over such sloppy code. NFI what I was thinking or doing when I wrote that bullcrap.<br><br>If you want to calculate a summary of unique repositories, you can use the standard Unix toolchain:

~~~shell
# Filter list of unique repositories
grep < urls.log -iEoe '^https?://raw\.githubusercontent\.com/([^/]+/){2}' |\
uniq | sed -Ee 's,raw\.(github)usercontent,\1,i' > unique-repos.log
~~~

## Update
New samples added from recently-discovered repositories which are, thankfully, released under a permissive license:
* [`986-Studio/FelinaePurr`](https://github.com/986-Studio/FelinaePurr/tree/a852ef5cc17ec03280d2e7d444970d7c498b6d08): [BSD-3-Clause](https://github.com/986-Studio/FelinaePurr/blob/a852ef5cc17ec03280d2e7d444970d7c498b6d08/LICENSE)
* [`gatechipdl/GameOfLight`](https://github.com/gatechipdl/GameOfLight/tree/0871628ab0d0fe072f09af73d5a283b8aa9c0bda): [MIT/Expat](https://github.com/gatechipdl/GameOfLight/blob/0871628ab0d0fe072f09af73d5a283b8aa9c0bda/LICENSE)
* [`akhenakh/nanoAPRS`](https://github.com/akhenakh/nanoAPRS/tree/e593d8ffc0cb49b995e17e723b8eba3f20202bd6): [MIT/Expat](https://github.com/akhenakh/nanoAPRS/blob/e593d8ffc0cb49b995e17e723b8eba3f20202bd6/LICENSE)
* [`agustinBassi/juegoSimon`](https://github.com/agustinBassi/juegoSimon/tree/874434e95f88538ceee6a0628db37a7142bee54b/hard): [BSD-2-Clause](https://github.com/agustinBassi/juegoSimon/blob/master/LICENSE)

Sources shared with #3744.",Externals,380,True,en
3741,"flow-typed provide third-party library definitions for flow. They're generated js files and should be always committed to the repo.

https://github.com/flowtype/flow-typed",Externals,0,True,en
3735,Right now a POD-extension file with a Perl shebang will only get recognised as Perl. This lets the Shebang classifier not narrow too much.,Internals,0,False,en
3734,"[PFA files][1] are simple PostScript wrappers for Type 1 and Type 42 font instructions. This commit adds `.pfa` as a recognised PostScript extension, and updates the [logic][2] for recognising generated PostScript files. With very [rare][3] [exceptions][4], PFA files are almost always generated by a program converting a font to a PostScript-friendly format.

There are [~15,853][5] PFA files on GitHub; results of a search result scrape [are here][6]. Only a handful of non-PostScript files were encountered, which appear to be [genome-related sciency crapola](https://github.com/aron0093/KB8019/blob/0a418dd1bc60a457c7aac83b27f78ff19c281c3c/data/Proteomes/08.fa.txt.pfa). They're limited to two repositories, both by Swedish users. Origin of samples unknown, but presumably case-specific.

[1]: https://en.wikipedia.org/wiki/PostScript_fonts#Printer_Font_ASCII
[2]: https://github.com/github/linguist/blob/81957f90e9416661aee24e326b1b958222c696e5/lib/linguist/generated.rb#L249-L266
[3]: https://github.com/gitGNU/gnu_enscript/blob/af89c2ad63ca63befc630adfa0819214ddd99e66/afm/matrix.pfa
[4]: https://github.com/gitGNU/gnu_a2ps/blob/a572e93acf79191fbc65bc0dd08d19cd2a646977/fonts/pcfont.pfa
[5]: https://github.com/search?q=extension%3Apfa+NOT+nothack&type=Code
[6]: https://github.com/Alhadis/Linguist-Silo/tree/pfa",Externals,136,True,en
3732,"This pull request switches the grammar for Reason. The old grammar was actually based on the new one, [reasonml-editor/language-reason](https://github.com/reasonml-editor/language-reason). See reasonml-editor/sublime-reason#5 for details.

Example in Lightshow: [previous grammar](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Freasonml-editor%2Fsublime-reason%2Fblob%2Fmaster%2FReason.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fgithub%2Flinguist%2Fblob%2Fmaster%2Fsamples%2FReason%2FSyntax.re&code=), [new grammar](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Freasonml-editor%2Flanguage-reason%2Fblob%2Fmaster%2Fgrammars%2Freason.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fgithub%2Flinguist%2Fblob%2Fmaster%2Fsamples%2FReason%2FSyntax.re&code=test%3A+%22some+string%5C_with+and+escape+sequence%22).",Externals,54,True,en
3731,"Adobe Font Metrics (`*.afm` files) are a data format for storing character measurements, encoding data, and other PostScript/Type 1-specific metadata. Wikipedia's page on PostScript fonts [touches on it briefly](https://en.wikipedia.org/wiki/PostScript_fonts#Adobe_Font_Metrics.2C_Adobe_Composite_Font_Metrics.2C_Adobe_Multiple_Font_Metrics):

> (AFM files)… contain general font information and font metrics information for the font program. These files are generally used directly only in Unix environments. An AFM file provides both global metrics for a font program and the metrics of each individual character.
>
> The metrics of a multiple master font are described by one AMFM file, which specifies the control data and global font information, plus one AFM file for each of the master designs in the font.
>
> An ACFM file provides information about the structure of a composite font. Specifically, the global metrics of the composite font program and the global metrics of each of its immediately descendent font programs. ACFM file does not associate with a base font, but act as the top-level structure of a composite font. The character metrics of individual characters in the composite font are described completely by one of more associated AFM files.
>
> The formats are sufficiently similar that a compliant parser can parse AFM, ACFM, and AMFM files.

Fundamentally, all three formats are the same for our purposes: they share the same file-extension and perceivable syntax, so I haven't bothered adding `*.acfm` and `*.amfm` files as associated extensions. Not that there [even](https://github.com/search?q=extension%3Aamfm+NOT+nothack&type=Code) [are](https://github.com/search?q=extension%3Aacfm+NOT+nothack&type=Code), anyway. I have included them as language aliases, however.


### In-the-wild usage

Scrape and logs stashed in the silo, as per usual: [`Alhadis/Linguist-Silo/tree/afm`](https://github.com/Alhadis/Linguist-Silo/tree/afm). Nearly [269,000](https://github.com/search?q=extension%3Aafm+NOT+nothack&type=Code) results in-the-wild, most of them duplicates. Which doesn't surprise me, considering a good deal of those results point to GhostScript forks/mirrors. GhostScript (the most popular free implementation of Adobe PostScript) distributes free versions of the base 35 PDF fonts in [several formats](http://git.ghostscript.com/?p=urw-core35-fonts.git;a=commit;h=1f28a6fcd2176256a995db907d9ffe6e1b9b83e9), which includes AFM files.


### Origin of samples

Both of the samples I added were converted from TTF files sourced from [`google/fonts`](https://github.com/google/fonts), both released under Apache-friendly licenses:

* `SpecialElite.afm` -> https://github.com/google/fonts/tree/8839397/apache/specialelite
* `OpenSansCondensed-Bold.afm` -> https://github.com/google/fonts/tree/44438ae/apache/opensanscondensed

To be honest, I really don't think it matters, though. AFM files don't contain any glyph information: just the width and heights, spacing adjustments, et al. I erred on the side of caution anyway. GhostScript's fonts are released under the [GNU Affero License](https://www.gnu.org/licenses/agpl.html), so... suffice to say that was a no-go.
",Externals,52,True,en
3730,The Microsoft TypeScript grammar for Sublime Text is now hosted at [Microsoft/TypeScript-TmLanguage](https://github.com/Microsoft/TypeScript-TmLanguage). See Microsoft/TypeScript-Sublime-Plugin#610 for details.,Externals,3,False,en
3728,"Resolves github/linguist#3727.

Quoting @adius:
> The Haskell community has obviously settled with purple (check out https://haskell.org, https://haskell-lang.org, https://reddit.com/r/haskell, ...). `rgb(94,80,134)` to be precise.

He's right, and now that I think about it, I'm not entirely sure where the colour green came from. Everything in the language's branding uses either purple or dark blue, so that's obviously much more representative of the language than, well, `rgb(41,181,68)`.

/cc @lildude Reckon we could squeeze this under the door for Linguist [`v5.1.0`](https://github.com/github/linguist/pull/3725)?

**EDIT:** Additional rationale to justify this particular shade of purple: it's the same colour used by the [central lambda in Haskell's logo](https://www.haskell.org/static/img/haskell-logo.svg), arguably the image's most prominent element.",Externals,25,True,en
3725,"Changes since last release (https://github.com/github/linguist/compare/v5.0.11...v5.1.0)

- Update MD5 digest for testing under Ruby 2.4 (#3643)
- Support for Type Language (#3593)
- Add recognition and classification of WebAssembly (#3650)
- Improve running from cloned repo docs (#3669)
- Fix spelling of Perl 6 (#3672)
- Added syntax definition for Fantom language (#3660)
- Update vendor.yml: skeleton.css (#3682)
- Added Ring Language Support  (#3662)
- Add new language for the Easybuild framework (#3466)
- Add C sample (#3698)
- Add misclassified C sample (#3652)
- Register ""cpanfile"" as a Perl filename (#3704)
- Add xspec as XML file extension (#3702)
- Improve Pan language support (#3691)
- Add NCSA to license whitelist (#3714)
- fix Coq sample JsNumber.v (#3710)
- improve .ms disambiguation (Unix Assembly / MAXScript) (#3707)
- shell: add more interpreters (#3708)

... and an update to the latest version of all grammars.",Internals,83,True,en
3723,,Externals,0,False,en
3714,"See https://github.com/github/linguist/pull/3689#issuecomment-313593201:

> @ayberkt __wrote:__ *""The examples are currently under the [UIUC/NCSA](https://opensource.org/licenses/NCSA) license. If you could whitelist this we would prefer that but if that's not possible, we can release these sample programs under one of the whitelisted licenses (in another repo maybe).""*

@mlinksva gave the official go-ahead to whitelist NCSA, as it's an acceptably permissive license.

I also took the liberty of alphabetising our whitelist, since I couldn't figure out which line to add it on... :\

SPDX identifier [sourced from here](https://spdx.org/licenses/NCSA.html).",Externals,13,True,en
3710,It was fetched as HTML from GitHub instead of raw.,Externals,0,False,en
3709,"test_classify_ambiguous_languages was not running any test, since
it was looking only for languages that are ambiguous on
filename for known filenames (rather than ambiguous for filename
or extension).

Note that test time and assertions.
Before:
  Finished in 0.149294s, 40.1892 runs/s, 46.8874 assertions/s.
After:
  Finished in 3.043109s, 1.9717 runs/s, 224.7702 assertions/s.",Externals,38,False,en
3708,"* ash: only interpreter, extension is more commonly used for
  Kingdom of Loathing scripting, e.g. github.com/twistedmage/assorted-kol-scripts

* dash: only interpreter, extension is more commonly used for
  dashboarding-related stuff

* ksh: extension was already present

* mksh

* pdksh",Externals,0,False,en
3707,"A few MAXScript files were misclassified as Unix Assembly.
Some of them can be found at github.com/davestewart/maxscript

* This commit changes the heuristic which looked for labels
  such as "".LG7E0:"" to actually match the full label including
  the colon. This reduced the number of MAXScript files
  misclassified as Unix Assembly, without any new Unix Assembly
  misclassified so far.

* add MAXScript sample rolloutCreator.ms, extrated from MIT repo:
  https://github.com/davestewart/maxscript/blob/master/3D/3ds2ae/02_resources/max%20scripts/3ds%20ax%20scripts/rolloutCreator.ms",Externals,14,False,en
3706,"* .xpm and .pm extensions associated with XPM.

* .pm is disambiguated by searching the /* XPM */ string.
  This is how `file` performs detection and should work with
  every XPM3 file (most XPM generated by software later than 1991).

Added XPM samples:

* stick-unfocus.xpm: extracted from Fluxbox (MIT License)
  https://github.com/fluxbox/fluxbox/blob/0c13ddc0c85ed4445ff8e289387c142e0ac98c77/data/styles/Emerge/pixmaps/stick-unfocus.xpm

* cc-public_domain_mark_white.pm: public domain image from
  https://commons.wikimedia.org/wiki/File:Cc-public_domain_mark_white.svg
  converted to XPM with ImageMagick (convert input.svg output.xpm).",Externals,30,True,en
3704,"This is a [manifest file](http://search.cpan.org/~miyagawa/Module-CPANfile-1.1002/lib/cpanfile.pod) used for describing the dependencies list of a CPAN module. Very similar (and inspired by) Ruby's [Gemfile](http://bundler.io/v1.3/man/gemfile.5.html) format.

**In-the-wild usage:** [~10,782 results](https://github.com/search?q=filename%3Acpanfile+NOT+nothack&type=Code), no discrepancies. Distributed across 2273 repositories by 852 users (based on a [subsample](https://github.com/Alhadis/Linguist-Silo/blob/misc/cpanfile.log) of 2,587 results).

**Origin of sample file:** [`s-aska/dropbox-api-command`](https://github.com/s-aska/dropbox-api-command/blob/035f3d41d41027a8d382c1e3cb1c7af231acee7c/cpanfile), released under the [MIT license](https://github.com/s-aska/dropbox-api-command/blob/035f3d41d41027a8d382c1e3cb1c7af231acee7c/LICENSE).",Externals,71,True,en
3702,"Currently [870 results](https://github.com/search?utf8=%E2%9C%93&q=extension%3Axspec+NOT+nothack&type=Code).

Sample from https://github.com/xspec/xspec/blob/master/tutorial/xquery-tutorial.xspec",Externals,9,True,en
3698,Sample was incorrectly being identified as C++,Externals,0,False,en
3696,"Also added disambiguation rule for `.proj` and `.user`.

##### CSCFG

https://github.com/search?utf8=%E2%9C%93&q=extension%3Acscfg+NOT+nothack&type=Code
(16.7K hits)

##### CSDEF

https://github.com/search?utf8=%E2%9C%93&q=extension%3Acsdef+NOT+nothack&type=Code
(12.7K hits)

##### CCPROJ

https://github.com/search?utf8=%E2%9C%93&q=extension%3Accproj+NOT+nothack&type=Code
(5K hits)

##### DEPPROJ

https://github.com/search?utf8=%E2%9C%93&q=extension%3Adepproj+NOT+nothack&type=Code
(505 hits)

##### NDPROJ

https://github.com/search?utf8=%E2%9C%93&q=extension%3Andproj+NOT+nothack&type=Code
(194 hits)

##### PROJ

https://github.com/search?utf8=%E2%9C%93&q=extension%3Aproj+%28project+OR+Property+OR+Import+OR+xml+OR+xmlns%29&type=Code
(35K hits)

##### SHPROJ

https://github.com/search?utf8=%E2%9C%93&q=extension%3Ashproj+NOT+nothack&type=Code
(13K hits)

<del>
##### USER

https://github.com/search?utf8=%E2%9C%93&q=extension%3Auser+%28project+OR+Property+OR+Import+OR+xml+OR+xmlns%29&type=Code
(693K hits)
</del>
",Externals,76,True,en
3691,"An atom package providing grammar for Pan is now available and can be used to once again provide highlighting for Pan (which stopped being supported after the move away from Pygments).

While we're working on this, we can add a more representative sample of valid Pan source files to the samples directory.",Externals,0,True,en
3682,"[Skeleton](http://getskeleton.com/) is the younger, slimmer cousin to bootstrap.  Figured it should be excluded as well.  

",Externals,0,True,en
3672,"Resolves #3671.

I'm surprised it's taken that long for anybody to notice, because nowhere is Perl 6 written as `Perl6` in the official docs. Heck, the Camel Book calls it Perl 6 too:

> The third edition was published in the middle of 2000, just as Perl v5.6 was coming out. As we write this, it’s 12 years later and Perl v5.16 is coming out soon. A lot has happened in those years, including several new releases of Perl 5, and a little thing we call **Perl 6**. That 6 is deceptive though; **Perl 6** is really a “kid sister” language to Perl 5, and not just a major update to Perl 5 that version numbers have trained you to expect. This book isn’t about that other language. It’s still…
",Externals,24,True,en
3669,"As pointed out in https://github.com/github/linguist/issues/3663, it's not clear that you need to generate the `samples.json` file before you can run Linguist from the cloned repo. This is probably missed by most who run straight into running the tests as the Rake task updates the samples for you.

This PR adds the missing step and advises that this needs to be rerun every time there is a change to any of the samples if the tests aren't being run.

Fixes https://github.com/github/linguist/issues/3663",Internals,8,True,en
3662,"Language (GitHub) : https://github.com/ring-lang/ring

Language Page (Wikipedia) : https://en.wikipedia.org/wiki/Ring_(programming_language)

Language in TIOBE Index (TOP 100, In group 51 to 100) : https://www.tiobe.com/tiobe-index/

Language Website : http://ring-lang.net 

Search : https://github.com/search?p=100&q=extension%3Aring+see&ref=searchresults&type=Code&utf8=%E2%9C%93 

Please Add It.",Externals,17,True,en
3660,"[Fantom](http://fantom.org) was a pre-existing language in linguist.

Added [rkoeninger/sublime-fantom](https://github.com/rkoeninger/sublime-fantom) as a submodule
Added license for `sublime-fantom`
Specified `tm_scope` for Fantom
Provided better color for Fantom derived from official logo",Externals,0,True,en
3652,This sample is misclassified as Objective-C.,Externals,0,False,en
3650,"This PR adds support for WebAssembly's textual representation on GitHub (`.wast` and `.wat`) files. Use of these files has spread substantially since the working group announced [cross-browser consensus](http://webassembly.org/roadmap/). In usual fashion, I've done what I could to collate in-the-wild examples:

* [`.wast`](https://github.com/Alhadis/Linguist-Silo/tree/wast): 4,705 files
* [`.wat`](https://github.com/Alhadis/Linguist-Silo/tree/wat) 25,812 files

The `wast` results were very promising; virtually every result was WebAssembly. The `wat` search, while offering a healthy amount of WebAssembly too, tossed up an unusual number of Makefiles and other junk related to ""Watcom"" (probably [Watcom C](https://en.wikipedia.org/wiki/Watcom_C/C%2B%2B0)…?) The biggest offender here are `makefile.wat` files, [which as you'll see](https://github.com/Alhadis/Linguist-Silo/tree/wat/files/Makefile), add up to nearly 800 unique variations from collated results (that's with duplicates removed).

## Licenses of example files
From **[WebAssembly/binaryen](https://github.com/WebAssembly/binaryen/)** ⇒ [Apache 2.0](https://github.com/WebAssembly/binaryen/blob/master/LICENSE)
+ [`imported-min.wast`](https://raw.githubusercontent.com/WebAssembly/binaryen/0b8acfc0139652d1c0f284c7650812a309574586/test/ctor-eval/imported-min.wast)
+ [`local-cse.wast`](https://raw.githubusercontent.com/WebAssembly/binaryen/1f1018564c472b75335bf4bddbf65cfebb226fb0/test/passes/local-cse.wast)
+ [`remove-unused-brs_shrink-level%3D1_ignore-implicit-traps.wast`](https://raw.githubusercontent.com/WebAssembly/binaryen/1f1018564c472b75335bf4bddbf65cfebb226fb0/test/passes/remove-unused-brs_shrink-level%3D1_ignore-implicit-traps.wast)

From **[bzar/wasm-intro](https://github.com/bzar/wasm-intro)** ⇒ [MIT/Expat license](https://github.com/bzar/wasm-intro/blob/master/LICENSE)
+ [`add.wat`](https://raw.githubusercontent.com/bzar/wasm-intro/d53c653b35649f9433ef5e7f5fff9da49483221b/wat/add.wat)
+ [`fibonacci.wat`](https://github.com/bzar/wasm-intro/blob/d53c653b35649f9433ef5e7f5fff9da49483221b/wat/fibonacci.wat)
+ [`print.wat`](https://raw.githubusercontent.com/bzar/wasm-intro/d53c653b35649f9433ef5e7f5fff9da49483221b/wat/print.wat)

From an **[old copy of the FreeType Project](https://github.com/aosm/X11/tree/f2829c6974ac3aacdf0c5e3f1d1c2818301cec0d/xc/extras/FreeType)** ⇒ [Unknown/Permissive license?](https://github.com/aosm/X11/blob/f2829c6974ac3aacdf0c5e3f1d1c2818301cec0d/xc/extras/FreeType/license.txt)
+ [`Makefile.wat`](https://raw.githubusercontent.com/aosm/X11/f2829c6974ac3aacdf0c5e3f1d1c2818301cec0d/xc/extras/FreeType/lib/arch/os2/Makefile.wat)

The [FreeType license](https://github.com/aosm/X11/blob/f2829c6974ac3aacdf0c5e3f1d1c2818301cec0d/xc/extras/FreeType/license.txt) has me uncertain, but it *seems* acceptable. Finding a `Makefile.wat` file that wasn't released under a copyleft or copyright license was difficult, though. What I've added might be all that we can find.

/cc @mlinksva for legal review.",Externals,272,True,en
3648,,Externals,0,False,en
3643,"Ruby 2.4 deprecated Fixnum & Bignum by unifying them into Integer (see https://www.ruby-lang.org/en/news/2016/12/25/ruby-2-4-0-released/). This means the MD5 digests for the integers in our tests have a class of Integer under 2.4.0 and later instead of Fixnum from earlier releases which means we need to update the digests specifically for Ruby >= 2.4.0.  This PR does just that.

I didn't go the route of modifying Linguist::MD5.hexdigest as any mention of `Fixnum` or `Bignum` results in a deprecation warning which gets annoying fast 💨.

/cc @github/data-engineering ",Internals,21,True,en
3642,"A whole log of syntax updates with the most notable being that we'll be finally shipping the most recent PHP syntax on GitHub.com and will also be shipping the recent HAML fixes highlighted in https://github.com/github/linguist/pull/3627

/cc @Caged - I'd like to :ship: on github.com tomorrow 🙏",Internals,4,True,en
3640,"This changeset includes a sample generated file.

[grpc](http://grpc.io) is a high performance, open-source universal
RPC framework.",Externals,0,True,en
3639,"Whilst building releases v5.0.8 - 5.0.10 I've encountered a problem where the Reason grammar couldn't be updated for some reason but I didn't have the time to look into it. I did today and discovered it moved to https://github.com/chenglou/sublime-reason in https://github.com/facebook/reason/pull/1196

This PR updates our link to the new location.",Internals,11,True,en
3634,"[Closure Templates](https://developers.google.com/closure/templates/) is a templating system created by Google to run on both the client and the server. After a quick search (see [here](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asoy+NOT+nothack&type=Code)), there seem to be over 16,000 examples of usage currently on github.

You can find the grammar over at [mthadley/language-closure-templates](https://github.com/mthadley/language-closure-templates).

Thanks, and let me know if I missed anything!",Externals,11,True,en
3633,"This PR switches Dart grammars from [guillermooo/dart-sublime-bundle](https://github.com/guillermooo/dart-sublime-bundle) to [dart-atom/dartlang](https://github.com/dart-atom/dartlang/).

The Sublime plugin is no longer maintained and its highlighting leaves a lot to be desired.  
(_A particularly egregious example: [it highlights keywords that occur inside strings](https://github.com/rkirsling/dlox/blob/master/lib/src/scanner.dart#L14-L31)._)

The Atom plugin, on the other hand, works well and continues to be maintained.  
(_The VSCode / IntelliJ plugins would also work, but their grammars are not supported by Linguist._)",Externals,4,True,en
3630,"I'm surprised I hadn't noticed this file extension earlier. Especially since its in-the-wild distribution is considerable: there are roughly ~9,095 `.nr` files [indexed on GitHub](https://github.com/search?q=extension%3Anr+NOT+nothack&type=Code), with an estimated 77.63% of them being duplicates (most likely forks and mirrors of various BSD systems). A corpus of search results [can be found here](https://github.com/Alhadis/Linguist-Silo/tree/nr).

The sample `.nr` file I added is the game manual for *Trek*, taken from [DragonFlyBSD](https://github.com/DragonFlyBSD/DragonFlyBSD/blob/master/games/trek/DOC/trekmanual.nr)'s codebase (authored by Eric Allman, no less).

For those wondering, the extension is probably a shortened form of `nroff` (""New Roff""). The ""new"" component is a little misleading if you're not familiar with the language's tangled, murky, pre-1970 origins. See [`manpages.bsd.lv`](http://manpages.bsd.lv/history.html) for the most comprehensive timeline you'll find.",Externals,13,True,en
3629,"Reverts github/linguist#3627

This is no longer needed as @Alhadis fixed the upstream grammar. 🎉

I'm going to keep some of the changes to the vendor/README.md file though.",Internals,4,True,en
3627,"The `language-haml` syntax for HAML has a recursive include (https://github.com/ezekg/language-haml/blob/master/grammars/ruby%20haml.cson#L360-L408) which is causing unbounded nesting of tags when parsing some HAML documents.

As an example, see the HTML source for this rendered document: https://github.com/ManageIQ/manageiq-ui-classic/blob/9b4bfe77184a177f24159fce36cd9377a2f020da/app/views/layouts/angular/_multi_auth_credentials.html.haml

It's not clear to me how to fix the HAML grammar, but I really believe the recursive inclusion is not correct. Hence, I propose we rollback to TextMate's grammar, which does not have this issue.

cc @github/linguist 
Fixes https://github.com/github/github/issues/72875",Internals,38,True,en
3626,"Forgot this in [PR from yesterday](https://github.com/github/linguist/pull/3625). Adding for completeness.

Sorry for the double PR.",Externals,4,True,en
3625,"Shen was already recognized, just adding submodule for grammar file and specifying the TextMate scope `source.shen`.",Externals,0,False,en
3616,"Reverts github/linguist#3603

The problems we had with the upstream TextMate bundle turned out to be a problem with the GitHub parser. See https://github.com/github/linguist/issues/3607 for more details.  

This PR reverts my previous revert and takes us back to using the upstream TextMate bundle.",Internals,8,True,en
3614,"In this pull request, I propose adding [missing GLSL extensions](https://github.com/KhronosGroup/glslang#execution-of-standalone-wrapper):
1. `.comp` compute shader. There are about [13 K files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Acomp+NOT+nothack&type=Code).
2. `.tesc` tesselation control shader. There are about [2 K files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Atesc+NOT+nothack&type=Code).
3. `.tese` tesselation evaluation shader. There are about [1 K files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Atese+NOT+nothack&type=Code).

The samples are from [Sascha Willems' Vulkan C++ examples and demos](https://github.com/SaschaWillems/Vulkan) licensed under MIT License.",Externals,25,False,en
3611,"Like this: https://github.com/npm/node-fetch-npm/commit/efbc7d5bfac8c80f499b15636a05f0a2a39cdb91

/cc @zkat",Externals,21,True,en
3608,These changes are related to the Zephir official repo links.,Externals,0,False,en
3604,,Internals,0,False,en
3603,"Manually reverting this as it breaks PHP syntax highlighting on github.com as reported in https://github.com/github/linguist/issues/3602

This is a known issue and we have a test in the github test suite that should have picked this up, but it didn't this time.

I'm going to push out a new release just with this change, update github.com, and then see if I can work out which change in the upstream bundle introduced this problem and see if we can fix it once and for all as this catches us all the time.",Internals,4,True,en
3597,"Update to include recent fixes and update grammars.

The reason grammar has not been updated as the current HEAD isn't building a result for the grammars.yml file.

The javascript grammar has not been updated as contains a ""known"" issue (https://github.com/atom/language-javascript/pull/496#issuecomment-285577005) that is pending the merging of https://github.com/atom/language-javascript/pull/496.",Internals,15,True,en
3593,"https://core.telegram.org/mtproto/TL
which used in [Telegram](telegram.org)

### Uses
https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/Resources/scheme.tl
https://github.com/vysheng/tgl/search?utf8=%E2%9C%93&q=extension%3Atl+NOT+nothack&type=



### Search results
https://github.com/search?utf8=%E2%9C%93&q=extension%3Atl+NOT+nothack&type=

It looks like extension `.tl` clashes with DustJS templates
https://github.com/linkedin/venus.js/blob/d84e8963e0c7a2c67436e3d7eb99476de0caabf9/.venus/templates/default.tl",Externals,35,False,en
3592,"As discussed in #3514, `.w` is a file extension for CWeb, a mix of TeX and C. This pull request moves the `.w` extension for CWeb to its own entry.",Externals,4,False,en
3588,Addresses #3515.,Externals,4,False,en
3587,"Follow-up of @pchaigno's [suggestion](https://github.com/github/linguist/pull/3546#issuecomment-297942194) in #3546. This PR merges the heuristics used for matching `.t` files on GitHub, but also applies a few other enhancements I made along the way:

1. **Perl 6 is now checked before Perl 5**  
Both languages understand `use strict;`, but the pragma is less likely to surface in the former. [According to the docs](https://docs.perl6.org/language/5to6-nutshell#Pragmas), Perl 6 enables strict mode by default, making the `use strict;` pragma redundant. Conversely, Perl 5 has strict mode *off* by default for compatibility reasons only - but every Perl programmer knows to enable strict-mode (and warnings) before starting work on any halfway-serious program.

2. **Multiple blanks are now checked, instead of matching a single space**  
`/use strict/` won't catch pragmas that use tabs, or have multiple spaces between each word. Newlines are even permitted too: the following chunk is valid Perl:
	~~~perl
	use

	strict;

	use
		v5.24.0;
	~~~

3. **Turing's heuristic now looks for `:=` instead of `:`**  
The tests failed because a [Terra file](https://github.com/github/linguist/blob/9b8b39f/samples/Terra/arith.t#L49) was misclassified as Turing. I realised a pattern like `var abc : xyz` is bound to surface in other languages, so I changed it to match `var abc := xyz` instead. `:=` wasn't mentioned anywhere in [Terra's language reference](http://terralang.org/getting-started.html#the-terra-language), so I'm guessing it won't occur there.

### Other observations

* **Semicolons are valid Turing**  
In #3546, I wondered if the original Turing/Perl heuristic could be refined to check for trailing semicolons (since Turing doesn't use the). I installed and ran [Open Turing](http://tristan.hume.ca/openturing/), and it evaluated `put 2 * 8;` perfectly fine. I guess they're legal characters, but ignored. Noting this for future reference if needed.

* **Many of the other heuristics could be (micro-)optimised**  
There're numerous capturing groups that aren't referred to by back-references, which requires a little extra overhead at runtime (since the regex engine needs to retain references to captured substrings). Using `(?:…)` instead of `(…)` is generally best practice when referencing the capture isn't needed.
Granted, the performance boost is only minimal, but if this code has to check millions of files, well... I'd wring every drop of performance I could get.

* **Our heuristics are making naive assumptions about whitespace**  
Going back to point \#2 above, it's likely that some heuristics aren't matching files they should be because the subject's source code contains multiple whitespace characters.",Externals,44,True,en
3586,"It appears the [recent switch to CommonMark](https://githubengineering.com/a-formal-spec-for-github-markdown/) affected the auto-numbering of ordered lists:

<img src=""https://cloud.githubusercontent.com/assets/2346707/25532603/3da76c78-2c71-11e7-9d99-d8014b44e8bc.png"" width=""314"" alt=""Figure 1"" />

This commit makes the lists count from `1.` again.

/cc @kivikakk",Externals,41,True,en
3582,"Hello, 

This PR tends to add [MJML](https://github.com/mjmlio/mjml) as an extension to XML. 

Here is a link to a [search of MJML on Github](https://github.com/search?utf8=%E2%9C%93&q=mjml&type=Repositories) as well as a [search returning the usage of `.mjml` as an extension on Github](https://github.com/search?q=extension%3Amjml+NOT+nothack&type=Code&utf8=%E2%9C%93) as requested in the Contributing guidelines.

MJML is an open source framework and markup language to code responsive emails.",Externals,11,True,en
3580,"ADMX and ADML files are XML-based and are [used by Windows](https://technet.microsoft.com/en-us/library/cc772507(v=ws.10).aspx) to create a user interface for Group Policy settings. There are approximately [1.5K such files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aadmx+NOT+nothack&type=Code&ref=searchresults) at GitHub.

The samples are sourced from [Microsoft Download Center](https://www.microsoft.com/en-us/download/details.aspx?id=48257).",Externals,21,True,en
3579,"I saw https://github.com/github/linguist/pull/3572 fly by in my Twitter feed. This diff and its explanation is entirely wrong and snapshot files *must not* be hidden from diffs and are important for code review.

It is true that snapshot files are generated by Jest, however users have to accept the new values and approve them and code reviewers should inspect them for unintended changes. While Jest creates them, it is merely a mechanism to reduce manual work to write down the assertion content and it is essential to the test rather than an unimportant side-effect.",Externals,4,True,en
3578,"I was trying to look up the alias to use for DNS Zone. From the docs
the alias I should use would be dns zone, but in reality it is dns-zone.
This change updates the comments to describe how to derive the
implicit name of a given alias.",Externals,0,False,en
3575,"Closes #3565 (at least for the part to be fixed in Linguist itself).

Note that I have only update the URL. I have not updated the target commit to the latest commit in this PR for now, as the readme says that the grammar is updated when building the gem anyway. But I may contribute the reference update too if you think it is necessary.",Externals,4,True,en
3574,"[Jolie](http://jolie-lang.org) is a general-purpose service-oriented language, mainly used for the development of microservices. The language is currently used in [industry](http://www.italianasoftware.com/) and [taught](http://www.jolie-lang.org/academia.html) in Danish, Italian, and Russian Universities.

In the wild there are more than 3k Jolie files ([.ol](https://github.com/search?o=asc&p=3&q=extension%3Aol+NOT+nothack&type=Code) and [.iol](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aiol+NOT+nothack&type=Code) files - raw files should be excluded).

The [language repository](https://github.com/jolie/jolie) is hosted on GitHub, has a growing community of contributors, and steady-paced releases.

Thanks and please let me know if additional changes are required.",Externals,9,True,en
3572,"The [Jest Snapshot Test](https://facebook.github.io/jest/docs/snapshot-testing.html) files are typically auto-generated (though human readable) by the testing framework. I've seen them frequently get to a large diff in code reviews, so hiding them by default in the GitHub PR screen is beneficial for my use case.

With these files, generally reviewing the `.js.snap` file is not necessary, as the other `.js` changes in source code that caused the Snapshot file to be regenerated will still be reviewed.",Externals,0,True,en
3564,"Linguist cannot work on any directory; it needs to be a Git repository.
Fixes #3563.",Externals,4,False,en
3556,This is similar to https://github.com/github/linguist/pull/3550 for the remaining languages where the name used in heuristics.rb does not match the one in samples directory.,Externals,4,False,en
3550,"It was left unrenamed from GAS, which lead to heuristic not working for this case.
See here: abfb698550a40dc51212de075fde5fe670f529b4

Without this patch, if I enable only the extension+heuristic strategies, I get:

```
$ bundle exec linguist samples/Unix\ Assembly/hello.ms
hello.ms: 92 lines (63 sloc)
  type:      Text
  mime type: application/x-troff-ms
  language:  MAXScript
```

with this patch:

```
$ bundle exec linguist samples/Unix\ Assembly/hello.ms
hello.ms: 92 lines (63 sloc)
  type:      Text
  mime type: application/x-troff-ms
  language:  Unix Assembly
$ bundle exec linguist samples/MAXScript/volume-calc.ms 
volume-calc.ms: 23 lines (22 sloc)
  type:      Text
  mime type: application/x-troff-ms
  language:  MAXScript
```",Externals,36,False,en
3548,"This PR adds support for the extension used in Python type stubs as described in PEP-484, https://www.python.org/dev/peps/pep-0484/ and part of the official Python language since May 2015.

This is already being used in github repositories (see https://github.com/search?utf8=%E2%9C%93&q=extension%3Apyi+NOT+nothack&type=Code ) including some of the official python project repositories like https://github.com/python/typeshed/

As a note, the contributed sample comes from https://github.com/python/typeshed/ and its licensing term are described at https://github.com/python/typeshed/blob/28e24a4664b814e6767b45e8eaac7d40d14b4765/LICENSE

This follows up my request in #3547 
",Externals,48,True,en
3541,"Look for any line starting with ""=\w+"", not full lines, otherwise we miss e.g. ""=head1 HEADING"".",Internals,1,False,en
3535,,Internals,0,False,en
3534,"This was included by https://github.com/github/markup when recognising Markdown files; now it uses Linguist to recognise them (github/markup#537), so it'd be good to continue to recognise the same set of extensions.",Internals,3,False,en
3533,"👋 Hello current maintainers (@Alhadis, @larsbrinkhoff, @lildude and @pchaigno)!

The @github/data-engineering team has been asked to help maintain Linguist, so I've added myself and the other members of our team to the list of contributors, and removed some GitHub staff members that are no longer active in this project.

We'll undoubtedly need a fair bit of handholding as we get up to speed on this, so thank you all in advance. We look forward to working with you! 💖 ",Internals,0,True,en
3530,"Updates the instrumenter doc, initializing it.",Externals,0,False,en
3525,"Quite a few of the README's in tmbundles use the `.mdown` extenstion. Also, searching Github, this extension  ([.mdown](https://github.com/search?utf8=✓&q=extension%3Amdown+NOT+nothack&type=Code&ref=searchresults)) appear to be more common than some of the others ([.mkd](https://github.com/search?utf8=✓&q=extension%3Amkd+NOT+nothack&type=Code&ref=searchresults), [.mkdn](https://github.com/search?utf8=✓&q=extension%3Amkdn+NOT+nothack&type=Code&ref=searchresults), [.mkdown](http://[here](https://github.com/search?utf8=✓&q=extension%3Amdown+NOT+nothack&type=Code&ref=searchresults))).",Externals,8,False,en
3524,Here goes.,Internals,0,False,en
3523,"We currently use a heuristic to determine if a `.md` file should be recognised as ""Markdown"" or ""GCC Machine Description"". If neither regex matches the heuristic, the existing guesses are retained. Because ""GCC Machine Description"" sorts lexicographically before ""Markdown"", then, it's preferred as the first choice.

This is very unlikely to be what we want in the majority of cases, so let's prefer Markdown unless we're sure.",Internals,0,True,en
3519,"[Marko](http://markojs.com/) is a language that is used to build user interfaces.  

**Usage stats**

[In the wild](https://github.com/search?utf8=%E2%9C%93&q=extension%3Amarko+NOT+nothack&type=Code&ref=searchresults) there's over 25k `.marko` files &mdash; admittedly, a number of these are from `.dotfile` repos that have checked in `node_modules`, but as far as I can tell all these results are examples of the Marko UI language.  

The [main repo](https://github.com/marko-js/marko) has over 2k stargazers and over 2m downloads on npm.

**Enterprise & private**

Marko is an open source project of eBay (a GitHub Enterprise customer) and we would love to have language recognition and syntax highlighting within our Enterprise repos as well. (_side question: In general, how soon after merging changes to `linguist` do they make it to Enterprise deployments?_)

Additionally, we know of at least a few companies that are using Marko in either Enterprise deployments or in private GitHub repos that would benefit from this as well.

Thanks and please let me know if there are any additional changes required!

",Externals,10,True,en
3518,"As detailed in my https://github.com/github/linguist/issues/1792#issuecomment-286379822, GitHub.com now honours language overrides in the `.gitattributes` file when determining the syntax highlighting to use.

This PR updates the README to reflect this change.

Fixes https://github.com/github/linguist/issues/1792",Internals,17,True,en
3517,"`*.vstemplate` files describe VisualStudio templates. They always use XML syntax. [Examples on GitHub (12,000+)](https://github.com/search?utf8=%E2%9C%93&q=extension%3Avstemplate+NOT+nothack&type=Code&ref=searchresults)

`*.vsixmanifest` files describe VisualStudio and VSCode extensions. They also always use XML syntax. [Examples on GitHub (8,000+)](https://github.com/search?utf8=%E2%9C%93&q=extension%3Avsixmanifest+NOT+nothack&type=Code&ref=searchresults)

",Externals,21,True,en
3512,"In one of my repositories, I have 2 folders:
* Demos
* Docs

With the previous regex's for documentation.yml, those 2 folders would have not been matched. I have updated them to include folders called demos and be less case sensitive.",Externals,2,False,en
3511,"WiX uses wixproj for projects.

https://github.com/search?utf8=✓&q=extension%3Awixproj+NOT+nothack&type=Code&ref=searchresults",Externals,2,True,en
3510,"This pull request is a follow up to #3504 and removes several grammars from the whitelist.

#3504 added several grammars to the whitelist because they weren't recognized by Licensee anymore. It turns out that some of them (BSD licenses) were not recognized because of a bug in Licensee, fixed in benbalter/licensee#174 (Licensee v8.8.3).

I also updated the submodules since, with the new versions, two grammars (davidhq/SublimeEthereum#13 and Drako/SublimeBrainfuck#1) now have proper `LICENSE` files and are thereby recognized by Licensee.

MagicPython now supports `text.python.console` and `text.python.traceback` so I had to remove the `language-python` grammar.

Fixes the Travis build (again).

EDIT: @brandonblack The Travis build fails for Ruby 2.4.0. I'm not sure what the error means... :s",Externals,20,True,en
3509,"Usually files that are used for [eye](https://github.com/kostya/eye) have the file extension `.eye`.
A eye definition file always contains ruby code.",Externals,0,False,en
3504,"Due to a recent update of Licensee (with modifications to the normalization process), hashes for grammar licenses changed. This pull request updates those hashes and ensures it doesn't happen again (restrict automatic updates of the licensee gem to minor releases).

Licensee also doesn't recognize a few licenses anymore (additions from `PHP-Twig.tmbundle` to `SublimeEthereum`). I'll open an issue in licensee for those that look like regressions. I'll also try a get a few more normalized (i.e., remove extra title) directly into the grammar repositories.

~~Fixes the Travis build.~~ There's still an issue with Ruby 2.1. @brandonblack Should we drop it for Linguist? Or maybe there's a way to define a conditional dependency (Licensee 8.7 if Ruby < 2.2)?",Externals,6,True,en
3502,"This pull request adds a grammar for OpenSCAD. An MIT license was recently added to https://github.com/tbuser/openscad.tmbundle, enabling the present improvement.
[Example with Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Ftbuser%2Fopenscad.tmbundle%2Fblob%2Fmaster%2FSyntaxes%2FOpenSCAD.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FOpenSCAD%2Fnot_simple.scad&code=).",Externals,23,False,en
3500,"Xamarin Workbook files are interactive coding documents for C#, serialized as
markdown files. They include a YAML front matter header block with some
metadata. Interactive code cells are included as `csharp` fenced code blocks.

An example can be found here:
https://github.com/xamarin/Workbooks/blob/master/csharp/csharp6/csharp6.workbook

Treated as markdown, it would appear like so:
https://gist.github.com/sandyarmstrong/e331dfeaf89cbce89043a1c31faa1297

They are becoming increasingly popular as teaching documents. There are a few hundred already in GitHub today: https://github.com/search?utf8=%E2%9C%93&q=extension%3Aworkbook+NOT+nothack&type=Code&ref=searchresults .",Externals,25,False,en
3493,"I use the modeline `vim: set filetype=pandoc:` for [this documentation Mustache template](https://github.com/klpn/Mortchartgen.jl/blob/master/data/mortchartdoc.mustache) to have it recognized as Pandoc markdown (this filetype is used by e.g. [the vim-pandoc plugin](https://github.com/vim-pandoc/vim-pandoc)). However, the `pandoc` filetype is not recognized by Linguist, and the file is incorrectly classified as `HTML+Django`. So, this request adds an alias for `pandoc` to `Markdown`.",Externals,0,False,en
3491,"This PR adds the `.cginc` extension (as commonly used for files `#include`d by Unity ShaderLab shaders) to the HLSL language.

[.cginc search result on GitHub.com](https://github.com/search?utf8=✓&q=extension%3Acginc+NOT+nothack&type=Code&ref=searchresults)",Externals,2,True,en
3490,"This PR adds a new language definition for ShaderLab (used to write shaders in the Unity game engine). It uses the grammar that was already added as part of #3469.

I've moved the `.shader` extension from the GLSL language definition (where it was incorrect, but better than nothing) to the new ShaderLab language definition.

[ShaderLab search result on GitHub.com](https://github.com/search?utf8=✓&q=extension%3Ashader+NOT+nothack&type=Code&ref=searchresults)",Externals,6,True,en
3489,https://github.com/github/linguist/compare/v5.0.5...master,Internals,3,False,en
3488,"This pull request adds grammars and supporting files for [Jison](https://zaa.ch/jison/). A [search for files with a jison extension](https://github.com/search?utf8=✓&q=extension%3Ajison+NOT+nothack&type=Code&ref=searchresults) shows 2,000+ code results, and a [search for files with a jisonlex extension](https://github.com/search?utf8=✓&q=extension%3Ajisonlex+NOT+nothack&type=Code&ref=searchresults) shows 1,000+ code results. The samples are from https://github.com/zaach/jison, which is [MIT-licensed](https://github.com/zaach/jison#license), and https://github.com/GerHobbelt/jison, which is also [MIT-licensed](https://github.com/GerHobbelt/jison#license).",Externals,12,False,en
3487,The repository providing TextMate definitions for the Julia language has been moved from nanoant's personal account to the JuliaEditorSupport organization. This PR updates the URLs used by Linguist accordingly.,Externals,0,False,en
3485,"From [the README](https://github.com/github/linguist#using-gitattributes):

> Just like vendored files, Linguist excludes documentation files from your project's language stats. lib/linguist/documentation.yml lists common documentation paths and excludes them from the language statistics for your repository.

I have a folder called `sample` that I would like excluded. The first line in this file is marked as ` ^docs?/` and it stands to reason that `samples?` should also be excluded.",Internals,0,True,en
3479,Retrying our previous attempt to release this.,Internals,0,False,en
3477,Reverts github/linguist#3473,Internals,4,False,en
3476,,Externals,0,False,en
3475,"[P4](http://p4.org/) is a language to describe the processing pipeline of network devices. I found [131 repositories from 97 users](https://github.com/search?utf8=%E2%9C%93&q=extension%3Ap4+control+OR+parser+OR+modify_field+OR+table+OR+fields+OR+header&type=Code&ref=searchresults) on github.com. The language is quite young ([2014](http://www.sigcomm.org/sites/default/files/ccr/papers/2014/July/0000000-0000004.pdf)), but it's receiving a lot of attention in the research community and the first devices supporting it are starting to emerge.

The color comes from the logo. I used [an Atom package](https://github.com/TakeshiTseng/atom-language-p4) for the grammar ([see on Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FTakeshiTseng%2Fatom-language-p4%2Fblob%2Fmaster%2Fgrammars%2Fp4.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fhanw%2Fp4fpga%2Fblob%2F91359594668db2f454a6bbd7b2034c52d33ad353%2Fexamples%2Fbenchmark%2Fbenchmark-action-128%2Fp4src%2Fmain.p4&code=)).

The two sample files come from a ""real"" application, released under Apache license.",Externals,99,True,en
3473,"Quite a few changes: https://github.com/github/linguist/compare/v5.0.4...lildude:cut-release-v5.0.5

With this release I've also updated the grammars and relaxed the `rugged` dependency as we're using 0.26.0b3 on dotcom and we probably shouldn't be shipping a release of Linguist that depends on a beta version of rugged.

@brandonblack as this is my first release, I'm asking for your review of this PR before I go ahead and merge, push etc, just to be safe.

Local testing with dotcom doesn't reveal any problems.",Internals,11,True,en
3471,"In an attempt to resolve a problem with rendering large, complex RTF files, I added support for RTF in https://github.com/github/linguist/pull/3468, however this wasn't the best approach as @pchaigno pointed out in https://github.com/github/linguist/pull/3468#issuecomment-279247233

On closer inspection, it makes more sense to return early in `Classifier.classify` if no languages have been supplied as by not doing so, we unnecessarily tokenise the data that won't be used when it comes to scoring further down in the method.

This makes a significant difference in the time it takes to perform against the problematic file, before the early return:

```
$ time bin/linguist ~/tmp/trash/linguist-timeout/License.rtf --breakdown
License.rtf: 7507 lines (7457 sloc)
  type:      Text
  mime type: application/rtf
  language:
bin/linguist ~/tmp/trash/linguist-timeout/License.rtf --breakdown  13.56s user 0.13s system 96% cpu 14.156 total
$
```

... versus _with_ the early return:

```
$ time bin/linguist ~/tmp/trash/linguist-timeout/License.rtf --breakdown
License.rtf: 7507 lines (7457 sloc)
  type:      Text
  mime type: application/rtf
  language:
bin/linguist ~/tmp/trash/linguist-timeout/License.rtf --breakdown  0.42s user 0.07s system 90% cpu 0.545 total
$
```

Hopefully I'm not missing anything obvious with this, but please speak up if you think I am.",Internals,59,True,en
3470,"This pull request fixes the current Travis build fail. The commit history of the TXL grammar was [recently changed](KatrinaHoffert/Sublime-Text-TXL-syntax/issues/2) (force-push), thus breaking our own submodule.",Externals,1,False,en
3469,"Linguist already has a language defined for HLSL, but it doesn't have an associated grammar, so HLSL files are not highlighted on GitHub.

This PR adds a TextMate grammar for HLSL, to enable syntax highlighting on GitHub.",Externals,0,True,en
3466,The hpcugent/easybuild-framework is a python framework for installation of applications on HPC envirnments. The actual package build description are written in python but having _.eb_ as extension.,Externals,0,False,en
3464,"Using the technique as discussed in #2761.

I wasn’t able to find files that covered _all_ of the cases I wanted to cover in the MS/TypeScript repo. OTOH e.g. the previous fixture file (which I removed) that was taken from there also wasn’t a great representative example.",Externals,4,True,en
3463,There are thousands of repos using this language: https://github.com/search?q=filename%3Ameson.build&type=Code,Externals,1,False,en
3459,"this adds support for detecting [Bazel](https://bazel.build/) [WORKSPACE](https://bazel.build/versions/master/docs/getting-started.html#using-a-workspace) files which should be parsed as [python](https://bazel.build/versions/master/docs/build-ref.html#core_build_language). Not bazel also defines BUILD files which seem to already be covered. 

Here is an example [search](https://github.com/search?utf8=%E2%9C%93&q=filename%3AWORKSPACE+not+python&type=Code&ref=searchresults) I'm not sure if it's 100% correct way to search but the results seem to bring up the files I'm targeting.",Externals,9,True,en
3457,"Interestingly it has tests to match `Rakefile` and has a `Rakefile` sample but it's not in the ruby's filenames list. And `.irbrc` (like `.pryrc`) is better suited as a filename than a file extension

- Examples of `.irbrc`: https://github.com/search?q=irbrc&ref=searchresults&type=Commits&utf8=%E2%9C%93
- Examples of `.pryrc`: https://github.com/search?utf8=%E2%9C%93&q=pryrc&type=Commits&ref=searchresults
- Gemfile.lock has its own format https://github.com/search?utf8=%E2%9C%93&q=Gemfile.lock&type=Commits&ref=searchresults",Externals,15,True,en
3454,"Add `.lkml` extension to LookML syntax added in https://github.com/github/linguist/pull/1408

- https://github.com/llooker/okcupidtrial/blob/master/profile.view.lkml
- [A search for `extension:lkmll` on GitHub](https://github.com/search?o=desc&q=extension%3Alkml+NOT+nothack)",Internals,5,True,en
3452,"This should resolve #3451.

I haven't tested it yet, but I'll do that as soon as the azure-docs repo has finished downloading.",Externals,4,True,en
3448,Adding color to PowerShell repos. Color is the default background color of a PowerShell console on Windows.,Externals,0,False,en
3447,"Use primary color of HTML5 logo as defined on [Logo FAQ page](https://www.w3.org/html/logo/faq#colors).

Currently used color is `#e44b23` (which is closer to HSL 12° 78% 52%), but the logo primary color is defined as `#e34c26` (or HSL 12° 77% 52%).

As a side note: the official [logo in SVG format](https://www.w3.org/html/logo/downloads/HTML5_Badge.svg) has its primary color set to `#e34f26`, so go figure.",Externals,28,True,en
3445,"- Fixes a null reference on yarn.lock check
- Upgrade of rugged to v0.25.1.1",Internals,5,False,en
3444,"This check for generated yarn.lock files lacked an adequate guard.

#
Resolves: github/github#68104
CC: @mikrobi",Internals,5,True,en
3443,"As such a name would suggest, `Emakefile` files are a Make-like build facility for the Erlang language. The site's [official documentation](http://erlang.org/doc/man/make.html) has the full details of what these things contain.

**In-the-wild usage:** [~3,444 results](https://github.com/search?q=filename%3AEmakefile+NOT+nothack&type=Code), with no discrepancies. Total of 1421 unique repos among 1019 users.",Externals,13,True,en
3441,"Adding regular expressions as a data-type feels a little... strange, but like [ABNF](https://github.com/github/linguist/pull/3311), its in-the-wild usage is broad enough to warrant formal recognition:

* [`.regexp`](https://github.com/Alhadis/Linguist-Silo/tree/regexp) [2,310 results](https://github.com/search?q=extension%3Aregexp+NOT+nothack&type=Code)
* [`.regex`](https://github.com/Alhadis/Linguist-Silo/tree/regex): [2,948 results](https://github.com/search?q=extension%3Aregex+NOT+nothack&type=Code)

The only hiccup with the classification was a license file named [`COPYING.regex`](https://raw.githubusercontent.com/2007750219/softart/ab7fee675d700047421b32248f76ebab1c568ba6/3rd_party/llvm/lib/Support/COPYRIGHT.regex). This is a modified license file distributed with \*BSD systems, which amounted to ~750 results. Since that's quite considerable, I added `COPYRIGHT.regex` as a text-type filename.

(Apologies for not being terribly active recently... called to real-life, etc)",Externals,53,True,en
3438,"This PR enables, via the `LINGUIST_SUBMODULE_THREADS ` env variable the number of threads that will be used for the submodule update operation.

This will let users to set this value at will in case they have beefier (or less powerful) machines.
",Externals,0,True,en
3436,https://github.com/github/linguist/compare/v5.0.2...release-v5.0.3,Internals,6,False,en
3434,"This pull request improves the heuristic for Modula-2 `.mod` files.
Module names can contain dots, which the old heuristic didn't consider.

Fixes #3433.

/cc @congdm",Externals,5,False,en
3432,,Externals,0,False,en
3429,Upstream textmate/diff.tmbundle#6 was merged.,Internals,1,False,en
3427,Addressing bad v5.0.1 release and updating grammars.,Internals,3,False,en
3426,"[Latest episode of my lifelong quest to leave the world a prettier place](https://github.com/atom/language-css/pull/99#event-918545418). =)

I started a pull request to Atom's CSS grammar intending to update some keyword lists, but got sidetracked after noticing how many inaccuracies there were in the grammar. One week-long snowball later, it avalanched into what was practically a full-rewrite. The [finished grammar](https://github.com/atom/language-css) is battle-hardened against even the most [absurd permutations of grammar](https://gist.github.com/Alhadis/49a3122e33e5064133c407b28c28905a#file-absurd-css).

A bunch of gists can [be found here](https://gist.github.com/Alhadis/49a3122e33e5064133c407b28c28905a), which also features a list of keywords that outline just how many keywords are missing from GitHub's current CSS highlighting. Compare that with the result of this PR:

- [[`list-types.css`](https://gist.github.com/Alhadis/49a3122e33e5064133c407b28c28905a/raw/4bc83dbac0240c8f259660b90e35904449c22af1/list-types.css)]: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.css&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.github.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Flist-types.css&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom%2Flanguage-css%2Fblob%2Fmaster%2Fgrammars%2Fcss.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.github.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Flist-types.css&code=)
- [[`tags-html.css`](https://gist.github.com/Alhadis/49a3122e33e5064133c407b28c28905a/raw/4bc83dbac0240c8f259660b90e35904449c22af1/tags-html.css)]: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.css&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.github.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Ftags-html.css&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom%2Flanguage-css%2Fblob%2Fmaster%2Fgrammars%2Fcss.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.githubusercontent.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Ftags-html.css&code=)
- [[`tags-mathml.css`](https://gist.github.com/Alhadis/49a3122e33e5064133c407b28c28905a/raw/4bc83dbac0240c8f259660b90e35904449c22af1/tags-mathml.css)]: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.css&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.githubusercontent.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Ftags-mathml.css&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom%2Flanguage-css%2Fblob%2Fmaster%2Fgrammars%2Fcss.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.githubusercontent.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Ftags-mathml.css&code=)
- [[`tags-svg.css`](https://gist.githubusercontent.com/Alhadis/49a3122e33e5064133c407b28c28905a/raw/4bc83dbac0240c8f259660b90e35904449c22af1/tags-svg.css)]: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.css&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.githubusercontent.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Ftags-svg.css&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom%2Flanguage-css%2Fblob%2Fmaster%2Fgrammars%2Fcss.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.githubusercontent.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Ftags-svg.css&code=)
- [[`properties.css`](https://gist.github.com/Alhadis/49a3122e33e5064133c407b28c28905a/raw/4bc83dbac0240c8f259660b90e35904449c22af1/properties.css)]: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.css&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.github.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Fproperties.css&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom%2Flanguage-css%2Fblob%2Fmaster%2Fgrammars%2Fcss.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.github.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Fproperties.css&code=)
- [[`numbers.css`](https://gist.github.com/Alhadis/49a3122e33e5064133c407b28c28905a/raw/4bc83dbac0240c8f259660b90e35904449c22af1/numbers.css)]: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.css&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.github.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Fnumbers.css&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom%2Flanguage-css%2Fblob%2Fmaster%2Fgrammars%2Fcss.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.github.com%2FAlhadis%2F49a3122e33e5064133c407b28c28905a%2Fraw%2F4bc83dbac0240c8f259660b90e35904449c22af1%2Fnumbers.css&code=)

Full proof-of-coverage can be found by browsing the grammar's [now 3,400+ line spec-file](https://github.com/atom/language-css/blob/master/spec/css-spec.coffee).

/cc @50wliu, @kivikakk",Externals,1213,True,en
3424,"If you try to look up a non-existent language, you get `nil`. Unless you look up the string `"",""`. Then you get an exception.

(Fixes it so you don't get an exception.)",Internals,0,True,en
3423,👋  folks. It looks like things are going pretty well over here so I'm just updating the README to reflect reality 😄 ,Internals,0,False,en
3421,,Internals,0,False,en
3420,"We have an issue highlighting diffs where, on a line that's been removed, the `-` only at the beginning of the line is highlighted as an insertion. The source turned out to be a slight bug in the upstream diff bundle.

This PR is a holdover until upstream merges; I'll issue a new PR to revert back to upstream once it's merged.",Internals,0,True,en
3416,"`Cask` file is Emacs [Cask](https://github.com/cask/cask) configuration file.
The file is included in [user initialization file](https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html) directory (`.emacs.d`) and [Emacs Lisp package](https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging.html#Packaging).

GitHub search result: https://github.com/search?utf8=%E2%9C%93&q=filename%3ACask&type=Code&ref=searchresults",Externals,6,False,en
3413,"#3410

https://github.com/search?p=6&q=extension%3Amysql+NOT+nothack&ref=searchresults&type=Code&utf8=%E2%9C%93
https://github.com/search?utf8=%E2%9C%93&q=filename%3Ayml.mysql+extension%3Amysql&type=Code&ref=searchresults
https://github.com/search?p=1&q=filename%3AREADME.mysql&ref=searchresults&type=Code&utf8=%E2%9C%93
https://github.com/search?utf8=%E2%9C%93&q=filename%3AINSTALL.mysql",Externals,31,True,en
3411,"This pull request removes the Hy grammar since its repository was recently deleted.
Fixes the Travis build.",Externals,0,False,en
3409,This pull request slightly improves the `.pl` Prolog heuristic rule and fixes #3408.,Externals,4,False,en
3402,"Hopefully this is considered a language? I find 39k results searching for files which are XCompose:

https://github.com/search?p=10&q=%3CMulti_key%3E&ref=searchresults&type=Code&utf8=%E2%9C%93

Not all of them would catch in this filter, but most are named so they would match.",Externals,11,True,en
3396,"Genie was introduced in 2008 as part of the GNOME project:
https://wiki.gnome.org/Projects/Genie

It is a programming language that uses the Vala compiler to
produce native binaries. It has good bindings to C libraries
especially those that are part of the GObject world such as
Gtk+3 and GStreamer

At present the .gs extension on GitHub shows as Javascript or Gosu.
A GitHub search shows confusing results:
https://github.com/search?p=15&q=extension%3Ags+-language%3Ajavascript+-language%3Agosu+NOT+nothack&ref=searchresults&type=Code&utf8=%E2%9C%93

For some example projects see:
https://github.com/darkoverlordofdata/shmupwarz-vala
https://github.com/tliron/khovsgol/

The shmupwarz-vala project adds a .gitattributes file containing:
*.gs linguist-language=Genie
This pull request should at least enable Genie to be shown when projects use a relevant .gitattributes file.",Externals,15,False,en
3393,"This pull request adds [Jison](https://zaa.ch/jison/)-generated JavaScript to generated files. (It also fixes a few minor typos in [lib/linguist/generated.rb](https://github.com/github/linguist/blob/master/lib/linguist/generated.rb).)

The first line of Jison-generated parsers usually begins with

```js
/* parser generated by jison 
```

This is written to parsers at [zaach/jison/lib/jison.js#L984](https://github.com/zaach/jison/blob/7653842e5120510b0b77484ac90d6c569cf146fd/lib/jison.js#L984).

The first line of Jison-generated standalone lexers usually begins with

```js
/* generated by jison-lex 
```

This is written to lexers at [zaach/jison-lex/regexp-lexer.js#L557](https://github.com/zaach/jison-lex/blob/28aa5ac329310ac74eff0d4259fcf594429134f7/regexp-lexer.js#L557) and [zaach/jison-lex/regexp-lexer.js#L573](https://github.com/zaach/jison-lex/blob/28aa5ac329310ac74eff0d4259fcf594429134f7/regexp-lexer.js#L573).

To test this, I added two files to the JavaScript samples. These are generated on macOS by `cd`-ing to the [examples folder of the GerHobbelt fork of Jison](https://github.com/GerHobbelt/jison/tree/master/examples) and entering in Terminal

```sh
node ../lib/cli.js ccalc-parse.y ccalc-lex.l
node ../../node_modules/jison-lex/cli.js ccalc-lex.l
```

Jison is distributed under the [MIT license](https://github.com/GerHobbelt/jison#license).",Externals,99,True,en
3392,"I'm the author of the Terraform Sublime Text syntax highlighting package, and a [long standing request](https://github.com/alexlouden/Terraform.tmLanguage/issues/5) has been to use my package to improve the syntax highlighting of HCL (Hashicorp Configuration Language - used in Vault, Consul, Terraform, etc) files on Github. 

This PR adds `source.terraform` and uses it instead of ruby for `.hcl` and `.tf`. I've also expanded the `example.tf` to demonstrate some more of the HCL language features, which might be useful for testing syntax highlighting improvements going forward. It's a reasonably popular language - TF has ~47k results on [Github search](
https://github.com/search?utf8=%E2%9C%93&q=extension%3Atf+NOT+nothack&type=Code&ref=searchresults).

Please let me know if this looks okay or if you'd like any improvements/changes to this PR or the Terraform syntax highlighting package to get this through. I wasn't sure about the name of the repo (`Terraform.tmbundle` or `HCL.tmbundle` might be more consistent?) or grammar (`source.hcl` instead?).

I've tested the Terraform tmLanguage with Lightshow ([link](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Falexlouden%2FTerraform.tmLanguage%2Fmaster%2FTerraform.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Falexlouden%2Flinguist%2F8498741b3a9d10f3c1665e20e32f546ae94efe74%2Fsamples%2FHCL%2Fexample.tf&code=)), and it looks like there's more red than compared to [ruby](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Ftextmate%2Fruby.tmbundle%2Fmaster%2FSyntaxes%2FRuby.plist&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Falexlouden%2Flinguist%2F8498741b3a9d10f3c1665e20e32f546ae94efe74%2Fsamples%2FHCL%2Fexample.tf&code=), is that expected?

Cheers!",Externals,106,True,en
3388,"In this release:
- Language Renaming 🎉 
- Removing Deprecated Code Paths
- Separation of Detection by Filename vs. Extension
- Updated Grammars

#
CC: @github/linguist ",Internals,0,False,en
3382,Exclude Realm and RealmSwift frameworks from language statistics.,Externals,0,False,en
3377,Update the URL's and add the repo.  Let me know if I did this right.,Externals,0,False,en
3373,"Disclaimer: I'm a newbie to Ruby.

In R, `roxygen2` is a de facto standard of document generation. The generated documents are typically starts with this line:

```r
% Generated by roxygen2: do not edit by hand
```

For a real example, please see this one: https://github.com/tidyverse/ggplot2/blob/f6f9f9de41c48382c70cbccc253db198e3cdc128/man/layer.Rd#L1

This pull request make linguist to ignore these generated documents.",Externals,26,True,en
3370,CC: @github/linguist ,Internals,0,False,en
3368,"[**GN**](https://www.chromium.org/developers/gn-build-configuration) is Google's new build system, which replaced their [now-deprecated](https://github.com/v8/v8/wiki/Building%20with%20Gyp) toolchain [**GYP**](https://gyp.gsrc.io/).

**GN** (_""Generate Ninja""_) is a companion project to the [Ninja build system](https://ninja-build.org/) which generates `.ninja` files using a lightweight configuration language. Its syntax is [reminiscent of Python](https://raw.githubusercontent.com/v8/v8/f8cbe2768cc88cb40e24c929fb28965bfb0ca6fe/BUILD.gn), but such similarities are purely superficial. GN's language is purposefully stripped-down to be as predictable as possible. To quote their [design philosophy](https://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/language.md#Design-philosophy):

> Writing build files should not be a creative endeavour. Ideally two people should produce the same buildfile given the same requirements. There should be no flexibility unless it's absolutely needed. As many things should be fatal errors as possible.

For this reason, I've classed GN as a `data`-type language, albeit tentatively.

Usage on GitHub
---------------
GN uses the extensions `.gn` and `.gni`, both of which have considerable in-the-wild usage:

* [`.gn`](https://github.com/Alhadis/Linguist-Silo/tree/gn): [96,823 results](https://github.com/search?q=extension%3Agn+NOT+nothack&type=Code)
* [`.gni`](https://github.com/Alhadis/Linguist-Silo/tree/gni) [14,494 results](https://github.com/search?q=extension%3Agni+NOT+nothack&type=Code)


Related additions
-----------------
I've also added support for `.gypi` and `.gclient` files as Python types, which have considerable use across GitHub:

* [`.gypi` extension](https://github.com/search?p=3&q=extension%3Agypi+NOT+nothack&type=Code): 309,927 files
* [`.gclient` filename](https://github.com/search?q=filename%3A.gclient+NOT+nothack&type=Code): 4,078 files

`.gypi` files are GYP includes. `.gclient` is a config script written in Python used by Google's `depot_tools` for checking out projects. [From their docs](https://www.chromium.org/developers/how-tos/depottools#TOC-gclient):

> * `.gclient` and `DEPS` are python scripts, you can hack in easily or add additional configuration data.  
> …
> * __.gclient file:__ It's the master file. It is, in fact, a python script.

I thought to add `DEPS` as well, but realised the filename was generic enough to cause problems if it were added as a Python type. Seeing [unrelated results](https://github.com/stiq/symfonyblog/blob/e23c8d2669363172e0ce7416586e0033b43c0a9f/deps) on the first [search-result page](https://github.com/search?q=filename%3ADEPS+NOT+nothack&type=Code) confirmed that would've been a bad idea.


Samples
-------
Every sample I've added has been taken from the [V8 repository](https://github.com/v8/v8), licensed under the BSD-3-Clause.
",Externals,88,True,en
3367,"`.php_cs` and `.php_cs.dist` is [PHP CS Fixer](https://github.com/FriendsOfPHP/PHP-CS-Fixer) configuration file in PHP.

GitHub search result: https://github.com/search?utf8=%E2%9C%93&q=filename%3A.php_cs&type=Code&ref=searchresults",Externals,6,True,en
3361,"This pull request marks [`.indent.pro` files](https://github.com/search?o=desc&q=filename%3A.indent.pro&s=indexed&type=Code&utf8=%E2%9C%93) (GNU Indent profiles) as vendored.

Fixes #3202.",Externals,10,True,en
3360,"This pull request adds a heuristic rule for TeX `.cls` files. The `.cls` file extension is shared by 4 languages (TeX, Apex, OpenEdge ABL, and Visual Basic) and TeX files are often the subject of misclassification by the Bayesian classifier (e.g., #3299).

I'm guessing that this is happening because TeX files contain a lot of text which skew training. The tokenization process is also ignores `\` and `{` which make much of the construct in TeX files. These intuitions can be confirmed by checking the `samples.json` entries for TeX.

Fixes #3299.",Externals,9,True,en
3359,"This pull request removes deprecated code in preparation of a 5.0 release. In the order, the commits remove:

1. the `find_by_shebang` method: there is now a shebang strategy instead; 
0. the `ace_modes` method: every language has an `ace_mode` field now;
0. the `primary_extension` method: was used in Gists which don't have a language dropdown anymore;
0. the `Linguist::Language.detect` method: replaced by `Linguist.detect`;
0. `search_term` field in each language: not sure if it's still used, might need to remove that last commit.",Externals,7,True,en
3358,`.babelrc` is Babel configuration file in JSON 5 format.,Externals,1,False,en
3355,"This commit is made by running
`./script/add-grammar --replace ruby-haml.tmbundle https://github.com/ezekg/language-haml`
on the branch of #3354.

[ruby-haml.tmbundle](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=text.haml&grammar_url=https%3A%2F%2Fgithub.com%2Ftextmate%2Fruby-haml.tmbundle%2Fblob%2F57b1b3523136e3dce9479d46c1d3c16aaa7f8f70%2FSyntaxes%2FRuby%2520Haml.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.githubusercontent.com%2Fmeganemura%2F161ba93782d5dbb6930c279797adb8a6%2Fraw%2F406e8a004649d1813e0f473fe5dbf5b8a3be4f15%2Flinguist.html.haml&code=) does not support multi-line comment.
[language-haml](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fezekg%2Flanguage-haml%2Fblob%2F301625dff414653eb88320c624434429ef8e244c%2Fgrammars%2Fruby%2520haml.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgist.githubusercontent.com%2Fmeganemura%2F161ba93782d5dbb6930c279797adb8a6%2Fraw%2F406e8a004649d1813e0f473fe5dbf5b8a3be4f15%2Flinguist.html.haml&code=) supports multi-line comment, and looks well maintained.",Externals,203,False,en
3354,"Since I want to replace grammar, I ran
`./script/add-grammar --replace ruby-haml.tmbundle https://github.com/ezekg/language-haml`.
As a result, I noticed that it was strange behavior.

1. Added new `language-haml` to `grammars.yml`, but there is also old `ruby-haml.tmbundle` in `grammars.yml`

2. The old `ruby-haml.tmbundle` line was deleted from `vendor/README.md`, but the new `language-haml` was not added to `vendor/README.md`.

This PR fixes those behaviors by updating `grammars.yml`. This is why running `script/convert-grammars` after removing old one in `add-grammar`.
And the other commit makes `script/convert-grammars` working well with the directory of the path entried in `grammars.yml` doesn't exist.",Externals,2,False,en
3353,"The improvements here are impossible to miss:

- [**Before**](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.ninja&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fkhyo%2Flanguage-ninja%2Fmaster%2Fgrammars%2Fninja.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fkhyo%2Flanguage-ninja%2Fblob%2Fmaster%2Fexample.ninja&code=)
- [**After**](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fkhyo%2Flanguage-ninja%2Fmaster%2Fgrammars%2Fninja.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fkhyo%2Flanguage-ninja%2Fblob%2Fmaster%2Fexample.ninja&code=)",Externals,42,True,id
3352,"This adds support for Rascal (http://www.rascal-mpl.org/) syntax highlighting and code detection to GitHub linguist, and thus fixes usethesource/rascal#152 .
The language is widely used in the wild, as seen in the following [GitHub search](https://github.com/search?utf8=%E2%9C%93&q=extension%3Arsc+NOT+nothack&type=Code&ref=searchresults), and this PR has support from the official Rascal team (cc: @DavyLandman).

Thank you in advance for your consideration.
",Externals,9,False,en
3350,"This PR contains some minor improvements for script/list-grammars, script/prune-grammars.
And I also update some auto-generated files and clean up.",Externals,0,False,en
3349,"`Blob.extensions()` returns a non empty extension for files ending with a dot. For instance,
```ruby
new Blob(""K.U.S.H."", """").extensions => ["".u.s.h"", "".s.h"", "".h""]
```
This pull request fixes that behavior.

Fixes #3348.
",Externals,4,False,en
3341,"Search results: https://github.com/search?utf8=%E2%9C%93&q=extension%3Anjk+NOT+nothack&type=Code&ref=searchresults

Nunjucks docs on file extension: https://mozilla.github.io/nunjucks/templating.html#file-extensions

> # File extensions
> Although you are free to use any file extension you wish for your Nunjucks template files, the Nunjucks community has adopted `.njk`.
> If you are developing tools or editor syntax helpers for Nunjucks, please include recognition of the `.njk` extension.",Externals,6,True,en
3337,"The last version of Licensee ([`v8.7.0`](https://github.com/benbalter/licensee/releases/tag/v8.7.0)) can recognize underlined license headers in READMEs (see benbalter/licensee#138). ~~Thus, the license of the Ant grammar is correctly recognized and whitelisting it is not necessary anymore.~~ EDIT: Unfortunately the Ant grammar doesn't have exactly the usual TextMate bundle license, so the license hash is different and I had to add it to the hash whitelist (meaning we just switched one whitelist entry for another :/). 

Fixes the master branch Travis build.",Externals,9,True,en
3336,"This PR adds support for the Reason language using the official grammar from [facebook/reason](https://github.com/facebook/reason/blob/master/editorSupport/language-reason/grammars/reason.json).

Samples taken from

* [JSX.re](https://github.com/facebook/reason/blob/master/formatTest/typeCheckedTests/expected_output/jsx.re)
* [Layout.re](https://github.com/jordwalke/ReLayout/blob/master/src/Layout.re)
* [Machine.re](https://github.com/freebroccolo/yggdrasil/blob/master/src/lib/Yggdrasil/Machine.re)
* [SuperMerlin.re](https://github.com/facebook/reason/blob/master/editorSupport/atom-reason/src/SuperMerlin.re)
* [Syntax.re](https://github.com/facebook/reason/blob/c3c0579a8aad073c9374655327abaa764a543868/formatTest/unit_tests/expected_output/syntax.re)

@jordwalke @chenglou can you please take a look at this and let me know if there are any changes you would like to make?",Externals,28,True,en
3333,"As title describes, Im adding Dangerfile (http://danger.systems/) to have the file language detected as Ruby.

Some examples:

- https://github.com/danger/danger/blob/master/Dangerfile
- https://github.com/artsy/eigen/blob/master/Dangerfile
- https://github.com/cocoapods/cocoapods/blob/master/Dangerfile
- https://github.com/realm/jazzy/blob/master/Dangerfile

And a lot more :P",Externals,0,True,en
3329,"Thrift-generated PHP files start with;
```php
 <?php
 namespace Foo\Bar\Thrift;
 /**
  * Autogenerated by Thrift Compiler (0.9.3)
```",Externals,3,False,en
3325,"Closes #3323 (check it for a discussion)
According to @Alhadis,
> The 1895 py3 files on GitHub are distributed among 392 repositories by 366 users",Externals,15,False,en
3315,"Changes since last release: 346aa99...aa27f18

This is likely going to be my last gem release of Linguist 😿 ",Internals,9,True,en
3314,"Brought to light by @matej-kosik in #3313.

Half of these are GPL2.1-licensed files from Coq's standard distribution. They escaped notice because our samples had the copyright headers removed (which, needless to say, is *not* a very nice thing):

* **[Heap.v](https://github.com/coq/coq/blob/trunk/theories/Sorting/Heap.v)** -> [Heap.v](https://github.com/github/linguist/blob/2b36f73da640be93d1900ebcaa1eeb7e3877ceff/samples/Coq/Heap.v)
* **[PermutSetoid.v](https://github.com/coq/coq/blob/trunk/theories/Sorting/PermutSetoid.v)** ->  [PermutSetoid.v](https://github.com/github/linguist/blob/2b36f73da640be93d1900ebcaa1eeb7e3877ceff/samples/Coq/PermutSetoid.v)
* **[Permutation.v](https://github.com/coq/coq/blob/trunk/theories/Sorting/Permutation.v)** -> [Permutation.v](https://github.com/github/linguist/blob/2b36f73da640be93d1900ebcaa1eeb7e3877ceff/samples/Coq/Permutation.v)
* **[interval_discr.v](https://github.com/coq/coq/blob/trunk/doc/faq/interval_discr.v)** -> [interval_discr.v](https://github.com/github/linguist/blob/7b6caa0f6c7603aabb5e6ed657e24aaddbeafc78/samples/Coq/interval_discr.v)

The remaining files were taken from an [online course by Software Foundations](https://www.cis.upenn.edu/~bcpierce/sf/current/), which is released under the MIT license. You can verify this by downloading it and consulting `LICENSE` in the tarball's root directory.

[`Basics.v`](https://github.com/github/linguist/blob/7b6caa0f6c7603aabb5e6ed657e24aaddbeafc78/samples/Coq/Basics.v) is mostly composed of material from the aforementioned course, but I also noticed code chunks in there which weren't used in the original source. I've removed it to be safe, since the licensing wasn't clear.

------------------

I've added some pretty hefty samples to make up for the deletions:

**[JSCert](https://github.com/jscert/JSCert)** (BSD-2-Clause)  

  - [`JSCorrectness.v`](https://github.com/jscert/jscert/blob/master/coq/JsCorrectness.v)
  - [`JSInterpreterExtraction.v`](https://github.com/jscert/jscert/blob/master/coq/JsInterpreterExtraction.v)
  - [`JSNumber.v`](https://github.com/jscert/jscert/blob/master/coq/JsNumber.v)
  - [`JSPrettyInterm.v`](https://github.com/jscert/jscert/blob/master/coq/JsPrettyInterm.v)

**[Coq-ATM](https://github.com/clarus/coq-atm)** (MIT/Expat)

  - [`Computation.v`](https://github.com/clarus/coq-atm/blob/master/Computation.v)
  - [`Main.v`](https://github.com/clarus/coq-atm/blob/master/Main.v)
  - [`Spec.v`](https://github.com/clarus/coq-atm/blob/master/Spec.v)",Externals,101,True,en
3312,"Hi,

this pull request adds support for the [Extended Backus–Naur form](https://en.wikipedia.org/wiki/Extended_Backus–Naur_form). [Here](https://github.com/search?utf8=✓&q=extension%3Aebnf+NOT+nothack&type=Code&ref=searchresults) is a link that shows the usage of the language at GitHub.

If I should change anything in this pull request, then please just comment below. Thank you.

Kind regards,
  René",Externals,2,True,en
3311,"Hi,

this commit adds support for [Augmented Backus–Naur form][], a metalanguage used to specify language grammars. The language does not seem to be [that popular on GitHub](https://github.com/search?utf8=✓&q=extension%3Aabnf+NOT+nothack&type=Code&ref=searchresults), but important enough to be used in [popular repositories](https://github.com/toml-lang/toml/blob/abnf/toml.abnf). A RFC document, describing the current version of the language, is available [here](https://tools.ietf.org/html/rfc5234).

If I should change anything in this pull request, then please just comment below. Thank you.

Kind regards,
  René

[Augmented Backus–Naur form]: https://en.wikipedia.org/wiki/Augmented_Backus–Naur_form
",Externals,6,True,en
3310,"@Alhadis has been doing some spectacular work on this project for many many months now. This PR is just reflecting reality.

Thanks for all of your work on Linguist @Alhadis ⚡️ 😍 
",Internals,0,True,en
3308,"/ cc @Alhadis 
",Internals,0,True,pt
3307,"Replaces #3192
",Internals,4,True,en
3297,"@pchaigno @larsbrinkhoff @Alhadis - I'm afraid I'm deserting you all and heading off to [STScI in Baltimore](http://hubblesite.org/newscenter/archive/releases/2016/44/) to do something new. My last day at GitHub will be 4th November.

In the short term this means that I'm no-longer going to be able to push new versions of Linguist to GitHub, in the longer-term I probably won't be active on the project at all 😿 

I'm opening up this PR to give you all a heads up. I'm currently soliciting interest internally (at GitHub) for a new maintainer from our side.

It's been an absolute pleasure working with you all on Linguist. Thanks for your eternal patience and awesome contributions. We literally wouldn't have been able to do this without you.

/ cc @github/open-source 
",Internals,7,True,en
3296,"Changes since last release: https://github.com/github/linguist/compare/v4.8.15...d147778
",Internals,10,True,en
3295,"Replaces #3233 
",Internals,4,True,en
3294,"Clojure has claimed the `.boot` file extension.  The bulk of all `.boot` files seem to be named [`Makefile.boot`](https://github.com/search?q=extension%3Aboot+NOT+slartibartfast&type=Code), which are decidedly _not_ Clojure.

This is an easy fix to undo most of the damage.  The [remaining files](https://github.com/search?q=extension%3Aboot+-filename%3AMakefile.boot&type=Code) also seem to be mostly makefiles, but it's late and I need to sleep.
",Externals,3,True,en
3289,"We changed the grammar for ActionScript to a fork some time ago (#2100) because it had some highlighting issues. Most of the fixes have now been upstreamed. The upstream repository also has a recognized license, which makes one less entry on our whitelist :tada: 
",Externals,4,True,en
3284,"This pull request implements [@bkeepers' idea](https://github.com/github/linguist/pull/3247#issuecomment-252083158), generating the `language_id` from the hash of the language's name. I also added a test to check that all language ids are unsigned 32bit integers.
Supersedes #3247. Fixes #3211.

The `language_id` is the SHA256 hash of the language name modulo-ed to an unsigned 32bit integer:

``` ruby
Digest::SHA256.hexdigest(language).to_i(16) % (2**30 - 1)
```

Therefore, as long as the language names are different, the probability of collision is of 0.009561175% if we reach 1,000 languages [1]. This is important as we might not always be able to detect a collision. For instance, if a language entry is removed from Linguist and we later add a new language id that conflicts with the older removed language, the tests won't help detecting it.

The choice to generate the language id from the language name is based on the idea that we probably want two entries with the same name to have the same id (if we remove a language and add it back later). If we do not want that, I could simply change the pull request to generate random ids, which would give us the same collision probability.

I think it's important that we discuss this thoroughly, as we probably want to avoid changing the strategy to generate language ids too often (it's already our second system :stuck_out_tongue_closed_eyes: ).
/cc @bkeepers @arfon @Alhadis @TwP 

[1] - ![ql_15e041ca4f6190549ca56982ef8053e1_l3](https://cloud.githubusercontent.com/assets/1764210/19452966/665f7ad0-94b3-11e6-84fa-8ffe5e7b1855.png) - Details at [preshing.com](http://preshing.com/20110504/hash-collision-probabilities/). I took into consideration the fact that we already have 422 fixed language ids.
",Externals,123,False,en
3280,"This removes the color attribute from all languages with a group attribute.  Also updates the test which checks for unused color attributes.

Sorry @Alhadis, the Apollo Guidance System is one of the causualities.

Bonus perk: Removes the redundant `ColdFusion` group from the `ColdFusion` language.
",Externals,0,True,en
3279,"CodeMirror bundles two modes for [ASCII PGP keys](https://codemirror.net/mode/asciiarmor/index.html) and [mIRC logs](https://codemirror.net/mode/mirc/index.html), which currently aren't listed in `languages.yml`.

It also includes a mode for [GAS/Unix Assembly](https://codemirror.net/mode/gas/index.html), but the [source file](https://github.com/codemirror/CodeMirror/blob/master/mode/gas/gas.js) doesn't declare the `text/x-gas` MIME type that the mode's page says it does. Ergo, the tests failed due to an undefined mode-type.
",Externals,0,True,en
3278,"Thanks to the stellar work of @chrismwendt and @TwP it's now possible to rename languages on GitHub 🎉 

This is a work-in-progress PR to rename languages that we know are incorrect.

/ cc @pchaigno @larsbrinkhoff @Alhadis as they all seem to have better memories than I :grin:
",Internals,0,True,en
3277,"**[Pic](https://en.wikipedia.org/wiki/Pic_language)** is a procedural DSL to generate simple drawings in Roff or TeX, such as flowcharts and diagrams. The language is closely tied with Roff, but its syntax and semantics are very different. Pic is also equipped with Turing-complete programming facilities, such as loops, conditionals, variables and macro definitions, making it a decidedly complex language.

**Extensions:**
- [`.pic`](https://github.com/Alhadis/Linguist-Silo/tree/pic): [21,862 results](https://github.com/search?q=extension%3Apic+NOT+nothack&type=Code)
- [`.chem`](https://github.com/Alhadis/Linguist-Silo/tree/chem): [2,547 results](https://github.com/search?q=extension%3Achem+NOT+nothack&type=Code)

Understandably, most results for `.pic` were binary files. Of the 3,000 files I collated from search results, 43% of the text files were Pic source (the remainder being project-languages or files with weird extensions).
",Externals,17,True,en
3272,"This pull request changes the documentation on how to add a new language to explicitly say that the `language_id` should be set by `./script/set-language-ids` and not manually.
",Externals,0,True,en
3268,"Follow-up of #3267 and #2662, both of which concern the misclassification of Sublime Text's configuration files as ""JavaScript"". These files are most certainly not JavaScript... the only thing distinguishing them from JSON is support for JS comments.

Because many of them _do_ contain comments, using the JSON grammar to provide highlighting will produce a lot of incorrect, messy highlighting. I've added a separate entry to group them under JSON, but use the JavaScript grammar for highlighting.

Linguist's submodules have a healthy abundance of Sublime configs already, so the samples I added were simply copied from `vendor/grammars`.

With @keplersj's help, I was able to collate a list of normative references for each documented format. Some were undocumented altogether; presumably deprecated filenames supported in older versions.

**EDIT:** [Relevant PR for CSON that still needs reviewing](https://github.com/github/linguist/pull/3175)

| File extension | Format | Results:          358,824 |
| --- | --- | --: |
| `.sublime-build` | [JSON + Comments](http://docs.sublimetext.info/en/latest/reference/build_systems/basics.html#file-format-of-sublime-build-files) | [11,601](https://github.com/search?q=extension%3Asublime-build+NOT+nothack&type=Code) |
| `.sublime-commands` | [JSON + Comments](http://docs.sublimetext.info/en/latest/reference/command_palette.html#file-format-of-sublime-commands-files) | [25,177](https://github.com/search?q=extension%3Asublime-commands+NOT+nothack&type=Code) |
| `.sublime-completions` | [JSON](http://docs.sublimetext.info/en/latest/reference/completions.html#file-format) | [9,659](https://github.com/search?q=extension%3Asublime-completions+NOT+nothack&type=Code) |
| `.sublime-keymap` | [JSON](http://docs.sublimetext.info/en/latest/customization/key_bindings.html) | [56,300](https://github.com/search?q=extension%3Asublime-keymap+NOT+nothack&type=Code) |
| `.sublime-macro` | [JSON](http://docs.sublimetext.info/en/latest/extensibility/macros.html?highlight=JSON) | [8,639](https://github.com/search?q=extension%3Asublime-macro+NOT+nothack&type=Code) |
| `.sublime-menu` | [JSON + Comments](http://docs.sublimetext.info/en/latest/customization/menus.html#file-format) | [38,843](https://github.com/search?q=extension%3Asublime-menu+NOT+nothack&type=Code) |
| `.sublime-mousemap` | JSON - Undocumented | [5,479](https://github.com/search?q=extension%3Asublime-mousemap+NOT+nothack&type=Code) |
| `.sublime-project` | [JSON](http://docs.sublimetext.info/en/latest/file_management/file_management.html#projects) | [53,241](https://github.com/search?q=extension%3Asublime-project+NOT+nothack&type=Code) |
| `.sublime-settings` | [JSON](http://docs.sublimetext.info/en/latest/customization/settings.html#format) | [98,640](https://github.com/search?q=extension%3Asublime-settings+NOT+nothack&type=Code) |
| `.sublime-theme` | JSON - Undocumented | [5,896](https://github.com/search?q=extension%3Asublime-theme+NOT+nothack&type=Code) |
| `.sublime-workspace` | [JSON](http://docs.sublimetext.info/en/latest/file_management/file_management.html#projects) | [44,000](https://github.com/search?q=extension%3Asublime-workspace+NOT+nothack&type=Code) |
| `.sublime_metrics` | JSON - Undocumented | [ 121](https://github.com/search?q=extension%3Asublime_metrics+NOT+nothack&type=Code) |
| `.sublime_session` | [JSON](http://www.bigjason.com/blog/cleaning-up-sublime-text-2-recent-projects#step-3-remove-unwanted-projects) - Undocumented | [1,228](https://github.com/search?q=extension%3Asublime_session+NOT+nothack&type=Code) |
",Externals,91,True,en
3266,"I'm not sure how we missed [this one](https://github.com/search?p=1&q=extension%3Amake+NOT+nothack&type=Code)...

<img src=""https://cloud.githubusercontent.com/assets/2346707/19110208/7e26218c-8b44-11e6-8ed1-b7fce000bd4b.png"" width=""397"" alt=""Yes, the pixillation is ironic"" />

Source of the example `.make` file [is my own](https://github.com/Alhadis/FileIcons/blob/master/Makefile). I noticed I haven't yet added a license file to the repository, so I'll be remedying that shortly... bit disappointed in myself, really. Heh.

**EDIT:** Done in Alhadis/FileIcons@05402ed874faf106b9e4e69d238c22e76ac903cf.
",Externals,64,True,en
3264,"There are at least [7 interpreters](http://www.rexxinfo.org/html/rexxinfo2.html#Download-Rexx) for running REXX, 3 of which run on POSIX systems:
- [BRexx](https://github.com/vlachoudis/brexx/blob/master/doc/running.html)
- [Rexx/imc](http://www.cs.ox.ac.uk/people/ian.collier/Rexx/rexximc.html)
- [Regina](http://regina-rexx.sourceforge.net/)

[BRexx](https://github.com/vlachoudis/brexx/blob/master/doc/running.html#L22) and [Rexx/imc](http://web.archive.org/web/20060107071407/http://users.comlab.ox.ac.uk/ian.collier/distribution/rexx-imc-1.76/rexx.ref) both use `rexx` as the interpreter name. [Regina](https://foicica.com/lists/code/201510/2725.html) uses `regina`, but I couldn't find any other possible variations.

I don't know how different Rexx dialects like [Object Rexx](http://www.oorexx.org/) are from plain Rexx, so I've purposefully omitted any interpreters that're dialect-specific.
",Externals,32,False,en
3259,"This slipped in unnoticed. Since ASN.1 is classified as ""data"", there's no reason for it to have a colour assigned.

Should we add a test for this to stop this happening again...?
",Externals,1,True,en
3258,"""TI Program"" is an umbrella name for programs/apps written for the Texas Instruments 83+/84 graphing calculator, which has multiple sublanguages such as TI-BASIC, Axe, and Assembly, all possessing the same file extension. This pull request enables recognition of these previously unknown programs.

[Example Programs](https://github.com/search?utf8=%E2%9C%93&q=extension%3A8xp+NOT+nothack&type=Code&ref=searchresults)
",Externals,11,True,en
3255,"Possibly also other HTML tags?

EDIT: Changed to just `</` and also include empty files.

Fixes #3172.
",Externals,4,True,en
3254,,Externals,0,False,en
3253,"This pull request adds two tests to make sure the hash and project whitelists remain up-to-date.

I also updated submodules during my tests and was able to remove 1 entry from the hash whitelist and 2 from the project whitelist.
",Externals,2,True,en
3251,"This pull request implements several changes to strengthen our mechanism to detect/recognize licenses. I broke it down into three commits:
1. Enable the recognition of licenses in READMEs using Licensee with `detect_readme: true`.
2. Use hashes to uniquely identify unrecognized licenses. This way we will be notified for any change in a license text.
3. Remove our own license classification code and rely solely on Licensee's. Our classification code sometimes recognizes the wrong license (e.g., [atom/language-csharp](https://github.com/atom/language-csharp/blob/db4468545a8a1a5e76518e0ae2f6697dc21bf686/LICENSE.md) is detected as GPL), which is something we clearly do not want to happen.

/cc @arfon @aroben @benbalter
",Externals,29,False,en
3249,"This pull request updates our [`season`](https://github.com/atom/season) package version to fix some issues with CSON parsing.

Fixes the Travis build failures.
",Externals,0,True,en
3246,"This pull request fixes the incorrect recognition of [this file](https://github.com/glfw/glfw/search?l=mathematica)'s language, reported recently in #2197.

This file is currently recognized as Mathematica because of our Mathematica heuristic (`^\s*\(\*`), which matches [this line](https://github.com/glfw/glfw/blob/3d62c9ed9d1ba4c6c285248d839c17bc5c5028f7/src/cocoa_monitor.m#L334). This is not such an uncommon construct in Objective-C/C/C++ languages. I think an easy fix is to use the closing of Mathematica comments (`*)`) instead of the opening (`(*`).

This pull request implements this, as well as other changes in tests, in three commits:
- First commit adds tests for our `.m` heuristic rules.
- Second commit enables testing the absence of a heuristic result with `assert_heuristics()`, which I use in the third commit to implement the test for the `cocoa_monitor.m` file.
- Third commit contains the new heuristic rule.

/cc @revolter @elmindreda @hrothgar @tbodt
",Externals,32,True,en
3245,"(Issue: https://github.com/github/linguist/issues/3244)
",Externals,4,True,en
3243,"Turns out the mode name alone isn't really enough, convert to using mimetypes.
",Externals,0,True,en
3242,"Eg [this](https://github.com/JoshCheek/language-sampler-for-fullpath/blob/b766dcdbd249ec63516f491390a75315e78cba95/julia/fullpath#L1) file is not currently highlighted.
",Externals,27,True,en
3240,"Changes since last release: https://github.com/github/linguist/compare/v4.8.13...b4035a3
",Internals,9,True,en
3238,"Changes since last release: https://github.com/github/linguist/compare/v4.8.12...ecd4ae3
",Internals,6,True,en
3237,"Replaces https://github.com/github/linguist/pull/3227

/ cc @Alhadis 
",Internals,4,True,en
3236,"The recently Licensee update has increased the confidence threshold required to detect a license. This means that three of the grammars we use now fail our license check.

This PR temporarily whitelists these build failures but we need to find a better long term fix here. Perhaps we could make use of the `curated: true` check that we have in `licenses/grammar/...` files?

/ cc @mlinksva @pchaigno

/ cc https://github.com/github/linguist/issues/3225
",Internals,4,True,en
3235,"This PR adds codemirror (https://codemirror.net/) modes to languages that have them.

/cc @arfon @josh 
",Externals,0,True,en
3223,"[You guys know the drill](https://github.com/Alhadis/linguist/commit/dad3331600ccc6f72faf64dcc33053db44d01eba).

This grammar wasn't mine to begin with, BTW... it was transferred to me by its author, who originally ported it from a TextMate bundle (which is also what the current grammar was derived from, I believe).

I also [wrote a script](https://github.com/Alhadis/language-viml/blob/master/tools/update-keywords.js) to keep the grammar updated with keywords pulled from Vim's [own syntax file](https://github.com/vim/vim/blob/master/runtime/syntax/vim.vim) for Vimscript. So it'll stay nice and updated. =)

**Files depicted in preview:**
- [Images 1-2](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2FW5nEtzWm&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fvim%2Fvim%2Fblob%2Fmaster%2Fruntime%2Fsyntax%2Fvim.vim&code=)
- [Image 3](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2FW5nEtzWm&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Faltercation%2Fsolarized%2Fblob%2Fmaster%2Fvim-colors-solarized%2Fautoload%2Ftogglebg.vim&code=)
",Externals,66,True,en
3221,"Goal is for

``` golang
func AFunction() error {
  return nil
}
```

to work like

``` go
func AFunction() error {
  return nil
}
```
",Externals,0,True,en
3219,"While digging through Emacs's source, I noticed Emacs Lisp mode is activated by [three filenames](https://github.com/emacs-mirror/emacs/blob/ec12c6705f91106c4f4c53e76447dafa21e12f9f/lisp/files.el#L2529-L2532) I'd not seen before. Searching for them on GitHub shows a non-trivial number of each:
- [`.gnus`](https://github.com/search?q=filename%3A.gnus+NOT+nothack&type=Code) (23,212 results)
- [`.viper`](https://github.com/search?q=filename%3A.viper+NOT+nothack&type=Code) (92,058 results)
- [`Project.ede`](https://github.com/search?utf8=%E2%9C%93&q=filename%3AProject.ede+NOT+nothack&type=Code&ref=searchresults) (15,983 results)

@larsbrinkhoff Regarding the `.eld` extension, I don't think [there's enough](https://github.com/search?q=extension%3Aeld+NOT+nothack&type=Code) usage on GitHub to warrant listing it. The extension also seems to be an auto-generated filetype for storing program data (`.eld`: _""Emacs Lisp Data""_...?)
## Questions
1. [`abbrev_defs`](https://github.com/search?q=filename%3A.abbrev_defs+NOT+nothack&type=Code) is another auto-generated file used by Emacs to store user abbreviations (which is like an autocomplete feature, I'm guessing). ~1,342 results probably aren't enough to add the filename to Linguist, I'm guessing, but these files are most definitely auto-generated. ~~Should it be added as such?~~<br>**UPDATE:** Added as both `.abbrev_defs` and `abbrev_defs`.
2. Emacs has a package manager called **ELPA** ([Emacs Lisp Package Archive](https://www.emacswiki.org/emacs/ELPA_)), which installs Lisp packages to one's user directory: `~/.emacs.d/elpa/`. Users who host their dotfiles on GitHub [mightn't always](https://github.com/haipengliu/my.emacs.d/tree/796abad212e127f99a3f6fddc1e1873681ea859c/elpa) remember to add `elpa/` to `.gitignore`, so this should be marked as a vendored path.<br><br>I don't know how many users on GitHub _have_ added these packages to their repository, however, because I don't know how to search files by their containing directory's name, as opposed to their filenames only. Somebody help?
",Externals,88,False,en
3218,"Add the Fortran `data` keyword to the `.f` and `.for` heuristics.

Fixes misclassification of https://github.com/jbuonagurio/RHTDP.
",Externals,0,True,en
3215,"Changes since last release: https://github.com/github/linguist/compare/v4.8.11...600115a
",Internals,10,True,en
3214,"This pull request removes support for `.sublime-syntax` grammar files in `convert-grammars` until we find a better solution.
",Externals,0,True,en
3213,"Add heuristic for `.inc` files: the `#declare` keyword seems to be unique to POV-Ray.

Fixes #3150.
",Externals,4,True,en
3212,"Changes since last release: https://github.com/github/linguist/compare/v4.8.9...6841b4d25994bfc5b8cd638a64867ecfa0401a8d

Fixes #3204 
",Internals,32,True,en
3208,"Fixes #3070 by locking the version of the three grammars in forks:
- github-linguist/awk-sublime
- github-linguist/NSIS
- github-linguist/sublime-sourcepawn

For all three grammars, the issue is that the authors removed one of the files we were using for parsing (usually `.tmLanguages` files).
#3079 should have fixed the issue with two of the three grammars. It allows `convert-grammars` to parse YAML files. It unfortunately does not work (see [`.nsi` files](https://github.com/search?p=5&q=extension%3Ansi+if&ref=searchresults&type=Code&utf8=%E2%9C%93) and [`.awk` files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aawk+if&type=Code&ref=searchresults)). I'll open another issue to explain why I think it fails and possible solutions.

On the shorter term, I think the best would be to lock the versions.
",Externals,21,False,en
3207,"A new test for #3205 to check that language ids are unique. With this test I'm hoping to catch some of the incorrect additions of `language_id`s without using `script/set-language-ids`.
",Externals,4,True,en
3206,"Elm grammar repository contains several YAML files with a `source.elm` scope ([Preferences/Metadata.YAML-tmLanguage](https://github.com/elm-community/Elm.tmLanguage/blob/master/Preferences/Metadata.YAML-tmLanguage) and [Syntaxes/Elm.YAML-tmLanguage](https://github.com/elm-community/Elm.tmLanguage/blob/master/Syntaxes/Elm.YAML-tmLanguage)).
We need to restrict the path to the Syntaxes directory to make sure we select the appropriate YAML file.

I'm not sure how we could test this for subsequent pull requests...

Fixes #3204.

/cc @arfon 
",Externals,4,False,en
3205,"Currently it's not possible to change the name of a language on GitHub 😞 

This PR adds:
- A `language_id` field to every language known to Linguist (all 422 of them)
- A script (`script/set-language-ids`) to add (and update) `language_id` fields
- Some tests to raise hell if anyone ever tries to change these.

**Rationale**

Currently we can't update a language name as the language name (e.g. `Ruby`) is actually _in_ the GitHub search index. This PR adds a `language_id` field to all of the languages defined in `languages.yml` so that this field can be used in the search indexes instead. We'll then add some view-layer transformations to turn the `language_id` back into a language (with human-readable name) on GitHub.com.

Please note, once this is merged (and shipped on GitHub), modifying these `language_id` fields would be very bad news unless we were planning on re-indexing all of the code on GitHub. As such, I've added some tests for the expected `language_id` value for a few known languages. There's also a `script/set-language-ids --update` which is what contributors adding a new language should use to set the `language_id` value for their new language.

I'd like to get this merged :soon: as we're looking at doing a major re-index of GitHub shortly. That said, a review from any/all of @pchaigno @larsbrinkhoff @Alhadis would be very welcome.

/ cc @TwP 
",Internals,3,True,en
3203,"Changes since last release: https://github.com/github/linguist/compare/v4.8.9...fdec52c
",Internals,5,True,en
3201,"Same as #3091, except this time we use our own fork to make sure we don't update it again by mistake. Fixes #3178.
",Externals,8,True,en
3198,"Every now and then a [new repo pops up that's misclassified as Forth](https://github.com/search?q=language%3Aforth+fxmark).  After some research, I found out that these `.f` files are written in the [Filebench Workload Model Language](https://github.com/filebench/filebench/wiki/Workload-model-language).

There seem to be at least [1700 files](https://github.com/search?q=extension%3Af+flowop+OR+fileset).  (Recent changes in GitHub code search makes it harder to estimate number of repositories.)
",Externals,6,True,en
3197,"I rewrote the Vim expressions from scratch after [recent testing](https://github.com/atom/language-perl/pull/76) of a pull request exposed some errors with their handling of certain cases. Specifically, filetypes wouldn't be matched after a boolean option:

```
vim: noexpandtab: ft=javascript:
```

[Version-specific modelines](http://vimdoc.sourceforge.net/htmldoc/options.html#modeline-version) were also unaccounted for:

```
vim600: set foldmethod=marker ft=javascript:   # >= Vim 6.0
vim<600: set ft=javascript:                    # <  Vim 6.0
```

I found backslashes weren't considered either, though this is probably a non-issue. I fixed it anyway:

```
vim: titlestring=foo\ ft=notperl ft=javascript:
```

Preceding whitespace isn't being checked, either. Vim's [documentation states](http://vimdoc.sourceforge.net/htmldoc/options.html#modeline) that a preceding blank is required before `vim` or `vi`:

> The white space before `{vi:|vim:|ex:}` is required.  This minimises the chance that a normal word like `lex:` is caught.  There is one exception: `vi:` and `vim:` can also be at the start of the line (for compatibility with version 3.0). Using `ex:` at the start of the line will be ignored (this could be short for `example:`).

Which means something like this isn't a valid modeline, yet Linguist detects it as one:

```
novim: ft=perl
```

The extent of my research/testing can be [seen here](https://github.com/atom/language-perl/pull/76/files#diff-8825cccf1f3f704520d28628a83f2ec8R688).

@chrisarcand You were the last one to modify the previous expressions, and you're probably more familiar with Vim than I am. It'd be nice if you could review this and tell me if there's anything I've missed. :)
",Externals,40,True,en
3195,"Enhances the `.r` heuristic to recognise R comments at the start of a line.

Fixes #3190.
",Externals,4,True,en
3193,"The current procedure for adding or replacing grammars is fiddly and error-prone, and definitely not contributor-friendly. So I wrote a script to automate the process:

``` bash
script/add-grammar https://github.com/JaneSmith/MyGrammar
script/add-grammar --replace old.tmbundle https://github.com/JaneSmith/NewBundle
```

The script attempts to be idiot-proof: it accepts a variety of URL syntaxes, resolving them all to an HTTPS link:

``` bash
script/add-grammar https://Alhadis@bitbucket.org/Alhadis/language-roff
script/add-grammar git@github.com:Alhadis/language-roff.git
script/add-grammar Alhadis/language-roff
script/add-grammar http://github.com/Alhadis/language-roff.git
script/add-grammar github.com/Alhadis/language-roff.git
```

To replace an existing grammar, the argument for `--replace` is the name of the unwanted submodule, without or without a leading `vendor/grammars/` attached:

``` bash
script/add-grammar --replace vendor/grammars/old.tmbundle
script/add-grammar --replace old.tmbundle
```

Both resolve to the same thing. If the resolved name doesn't match a path in the `vendor/grammars` directory, it barks at the user and exits.
",Externals,0,True,en
3189,"After starting [work on this](https://github.com/github/linguist/issues/3186#issuecomment-244612496), I noticed some oddities in the grammar/submodule lists:
- There're two grammars that were accidentally commited to this repository after they were partially removed in favour of other grammars:
  - [`less.tmbundle`](https://github.com/github/linguist/tree/master/vendor/grammars/less.tmbundle)
  - [`Sublime-Inform`](https://github.com/github/linguist/tree/master/vendor/grammars/Sublime-Inform)
  
  <br/>Evidently, the submodules were deregistered without their corresponding contents removed from the working tree. So they were erroneously included in the next commit.
- Batchfile highlighting is provided by an [abandoned bundle](https://github.com/ericzou/ebundles) of grammars that hasn't been updated in 8 years. The grammar is buggy and unmaintained, and has [highlighting issues](https://github.com/github/linguist/issues/2748) that'll never be noticed by the author. I've found a [fresh, healthy replacement](https://github.com/mmims/language-batchfile) that [fixes the issues](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fmmims%2Flanguage-batchfile%2Fblob%2Fmaster%2Fgrammars%2Fbatchfile.cson&grammar_text=&code_source=from-text&code_url=&code=%40echo+off%0D%0Arem+this+text+should+be+green%0D%0Aecho+hello+world) previously reported.

Other than the egregious cases, I did some assorted tidy-up that would've been too trivial to warrant a separate pull request.
",Externals,38,False,en
3183,"Update `languages.yml` and add three public domain sample documents.

[""In-the-wild"" examples](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asch+schematron). The `.sch` extension is currently shared in Linguist by Eagle and KiCad, both of which already have example files.

If a heuristic is necessary, some potential options:
1. Find ""schematron"", which is likely (but not guaranteed) to appear in an XML namespace declaration.
2. Find the top-level element `<schema>` and/or a subset of other common (but optional) elements (e.g. `<rule>`, `<assert>`, `<pattern>`, `<phase>`, `<report>`), each of which may appear with various attributes and namespace prefixes.

Thanks for maintaining this valuable project.
",Externals,8,True,en
3182,"It is listed in a lot of .gitignore files, if this is any indicator that it should not be checked: https://github.com/search?utf8=%E2%9C%93&q=dist+filename%3Agitignore&type=Code&ref=searchresults
",Externals,6,True,en
3176,"Supersedes the everloving hell out of #3166.
",Externals,4,True,en
3175,"**CSON** stands for **C**offee**S**cript **O**bject **N**otation. From that name alone, you'd correctly guess that it holds the same relation to CoffeeScript as JSON does to JavaScript. [It's a data format](https://github.com/bevry/cson#what-is-cson) that uses the same syntax and semantics as its namesake, but without the ability to include arbitrary commands.

From [`cson-parser`'s description](https://www.npmjs.com/package/cson-parser#why-not-just-use-coffeescript-directly):

> **Why not just use CoffeeScript directly?**
> You don't want data files being able to run arbitrary code. Even when ran in a proper sandbox, `while(true)` is still possible.

My [Emacs Lisp repo](https://github.com/Alhadis/language-emacs-lisp) is a good representation of why data formats are filtered from the stats-bar; the only chunk of programming code is a JavaScript file, and it's being misrepresented as 5.1% of the codebase.

On a lighter note, I actually couldn't find any CSON files in the wild that _weren't_ Atom-related, so it's tempting to stick ""Atom JavaScript"" in as an alias for CoffeeScript (in reference to Emacs Lisp...).

**Origin of the samples:**
- [`base.cson`](https://github.com/atom/atom/blob/master/keymaps/base.cson): Atom
- [`config.cson`](https://github.com/DanBrooker/file-icons/blob/v2/config.cson): Truncated version of File-Icons v2's config file
- [`ff-sfd.cson`](https://github.com/Alhadis/language-fontforge): Taken from a grammar repo I slapped together last night for a DSL
- [`wercker-status.cson`](https://github.com/felipefdl/wercker-status/blob/c0e6f8332e247f04637633b578676558fbc8df5d/menus/wercker-status.cson): Some dude's package, [it's MIT-licensed](https://github.com/felipefdl/wercker-status/blob/c0e6f8332e247f04637633b578676558fbc8df5d/package.json#L7)
",Externals,61,True,en
3174,"**I HAVE A PATHOLOGICAL OBSESSION WITH WRITING LANGUAGE GRAMMARS, _SOMEBODY PLEASE MAKE IT STOP!!!!!_**

Ahem. Seriously though, [this turned out well](https://github.com/Alhadis/language-emacs-lisp#emacs-lisp-support), and makes a number of noticeable improvements to Emacs Lisp files (particularly where function names contain keywords, like `list` or `load`).

[Lightshow preview is here](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2FW5nEtzWm&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2FAlhadis%2F.files%2Fblob%2Fmaster%2F.emacs.d%2Finit.el&code=), and there's a scrubbable [before-and-after here](https://github.com/Alhadis/linguist/commit/cc5b37c8610a94ce736fc6e5e07c3c63b69d6d6d). Scroll to the bottom and click **Swipe**, and you'll be able to drag the slider to see the improvements to highlighting yourself.

And now to conclude a Lisp-related-anything with the proper footer:

))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
",Externals,43,True,en
3173,"Okay, let's [try this again](https://github.com/github/linguist/pull/3160#issuecomment-242977022).

<img src=""https://cloud.githubusercontent.com/assets/2346707/18034462/00aa7248-6d81-11e6-8374-90f783fdc14d.jpg"" width=""256"" alt=""TAKE TWO"" align=""left"" />

---

Fixes #3121.

Despite having a generic-looking extension, searching for [`.spec`](https://github.com/search?q=extension%3Aspec+NOT+nothack&type=Code) files yields strangely consistent results.
#### Sources:
- [`manos.spec`](https://github.com/jacksonh/manos/blob/300450cd5c8a146cdf5e9cbaa837ecccfd8ab951/release/manos.spec), [`spec.linux.spec`](https://github.com/caiguanhao/portablizer/blob/04f27664f6788814bfc63646c765985560b7fe00/spec.linux.spec): MIT/X11
- [`erlang-erlydtl.spec`](https://github.com/icheishvili/rpms/blob/6f88d5ee39ce3696b58563d8e3aac16c796a0c9f/erlang-erlydtl.spec)
- [`apache.spec`](https://github.com/sergiomb2/Apache-1.3_mod_perl/blob/496dbd64774ab4937a382fc49f87e75d2bbbd98e/rpmbuild/SPECS/apache.spec)
- [`any.spec`](https://github.com/datagraph/spira/blob/0c7d14e2fc5b0a4a7e3a1ea56c6c5243eb9cf9da/spec/types/any.spec): Unlicense
",Externals,183,True,en
3171,"This pull request fixes #3170.

When analyzing repositories, we use LazyBlob, which has a [limit on the maximum number of lines analyzed in a file](https://github.com/github/linguist/blob/master/lib/linguist/lazy_blob.rb#L17). Thus, with large files, the last lines might not be used by Linguist (neither for the classifier, nor for the heuristic rules).
I recently modified the `.ts` heuristic to fix another issue (#3098). I changed it to use the closing TS tag (which is usually found at the end of the file) instead of the opening tag. Because of that, large `.ts` files do not match the heuristic anymore.
This pull request changes the `.ts` heuristic to use the opening TS tag again with a slight variation compared to the initial heuristic (no space after `<TS`).
",Externals,10,True,en
3165,"Changes since last release: https://github.com/github/linguist/compare/v4.8.8...cb5bc91
",Internals,6,True,en
3162,"REXX support was added recently in #3124, but the grammar didn't have a permissive license at the time. It now has an MIT license, so we can use it.
",Externals,4,True,en
3152,"https://github.com/search?utf8=✓&q=ASN.1+extension%3Aasn+extension%3Aasn1&type=Code&ref=advsearch&l=&l=

I'd opened a pull request previously (#3148) but was having a hard time rebasing and ultimately had to open a new one because it was easier to create a fresh repo. 
",Externals,9,True,en
3147,"#3146 reminded me the [Atom package](https://github.com/atom-haskell/language-haskell/issues/80) for Haskell support is frequently updated and well-maintained.

Surely enough, it fixes [the highlighting issue](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom-haskell%2Flanguage-haskell%2Fblob%2Fmaster%2Fgrammars%2Fhaskell.cson&grammar_text=&code_source=from-text&code_url=&code=--+Highlighted+as+comment%0D%0Aclass+X+y%0D%0A--+Not+highlighted+correctly) and probably others we don't know about, too.
",Externals,24,True,en
3145,"- properly recongnize dtrace probes
- recongnize \ in Makefile paths
- recongnize single line `file.ext : dep.ext` make targets
- recognize D module, import, function, and unittest declarations
- add more representative D samples

`rake benchmark:compare`
D changed from 31.2% to 28.1%
DTrace changed from 33.5% to 32.5%
Makefile changed from 35.3% to 39.4%

diff of `rake benchmark:generate`
https://gist.github.com/MartinNowak/6fba5aed9401dba4d4bfd7969a168c61 (URLs relative to github.com/)
- no misclassifications except for 2 /etc/init.d shell scripts

see https://gist.github.com/MartinNowak/fda24fdef64f2dbb05c5a5ceabf22bd3 for the scraper used to get test corpora for D, DTrace, and Makefile with `extension:d`.
- corpus had ~276K lines (~22MiB) from 3K files
- had to filter out lots of .d files from the binutils testsuite (apparently references file diff tests)",Externals,54,False,en
3142,"- Text: ← filenames: FONTLOG http://scripts.sil.org/cms/scripts/page.php?item_id=OFL-FAQ_web#43cecb44
- OpenType: ← extensions: .fea https://www.adobe.com/devnet/opentype/afdko/topic_feature_file_syntax.html
- Spline Font: ← extensions: .sfd http://fontforge.github.io/en-US/documentation/developers/sfdformat/
",Externals,4,False,ps
3141,"Second crack at what I tried doing a [couple months ago](https://github.com/github/linguist/pull/3069). This PR sets the colour of PostScript to [PANTONE 485 C](https://www.pantone.com/color-finder/485-C), as per the language's branding. And if there's ANY language whose colours deserve to retain their tonal integrity, it's the language that pretty much pioneered the whole world of desktop publishing.

The conflicting colours (Scala and, uhm, ""Red"") were pushed apart somewhat. Red was made redder, and Scala was given a desaturated darker shade of red. Scala's change is a bit more noticeable than Red's, but it was [too close to HTML's colour](https://github.com/guardian/membership-frontend) anyway.

I'd show you a ""before-and-after"", but my Internet connection decided to die as I was looking for a repository that'd show a Red/HTML comparison. I've had to copy+paste this PR message to my phone to post it using my data. Whoever said Australia is the ""lucky country"" clearly wasn't talking about our fucking Internet.
",Externals,10,True,en
3126,"This PR's doing quite a few things, so I'll try to keep my explanations terse for readability.
## Roff
#### Improved syntax highlighting

Currently, the site uses an [absurdly-limited grammar](https://github.com/carsonoid/sublime_man_page_support) to highlight roff files:
- **[rustdoc.1](https://github.com/rust-lang/rust/blob/master/man/rustdoc.1)**: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=text.groff&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Frust-lang%2Frust%2Fblob%2Fmaster%2Fman%2Frustdoc.1&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flanguage-roff%2Fblob%2Fstatic%2Froff.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Frust-lang%2Frust%2Fblob%2Fmaster%2Fman%2Frustdoc.1&code=)
- **[aha.1](https://github.com/theZiz/aha/blob/master/aha.1)**: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=text.groff&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2FtheZiz%2Faha%2Fblob%2Fmaster%2Faha.1&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flanguage-roff%2Fblob%2Fstatic%2Froff.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2FtheZiz%2Faha%2Fblob%2Fmaster%2Faha.1&code=)
- **[node.1](https://raw.githubusercontent.com/nodejs/node/master/doc/node.1)**: [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=text.groff&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fnodejs%2Fnode%2Fmaster%2Fdoc%2Fnode.1&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flanguage-roff%2Fblob%2Fstatic%2Froff.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fnodejs%2Fnode%2Fmaster%2Fdoc%2Fnode.1&code=) (lol, noticed they got their syntax wrong. [I let 'em know](https://github.com/nodejs/node/commit/f9e6191f8582e0ec6f1ff64da454988423e0cb89#commitcomment-18330687))
- **[pdffonts.1](https://github.com/wash/yum-poppler/blob/0ccae767114324466973bddafe37d3aff1c4148c/utils/pdffonts.1)** [Before](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=text.groff&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fwash%2Fyum-poppler%2Fblob%2F0ccae767114324466973bddafe37d3aff1c4148c%2Futils%2Fpdffonts.1&code=) → [After](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flanguage-roff%2Fblob%2Fstatic%2Froff.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fwash%2Fyum-poppler%2Fblob%2F0ccae767114324466973bddafe37d3aff1c4148c%2Futils%2Fpdffonts.1&code=)

You can probably see what I mean.
#### Extra extensions

I've added a few extra file extensions for Roff:
- [`.tmac`](https://github.com/search?q=extension%3Atmac+NOT+nothack&type=Code): Troff macros. Refers to the standard macro bundles distributed with Groff and Troff.
- [`mmn`](https://github.com/search?q=filename%3Ammn+NOT+nothack&type=Code), [`mmt`](https://github.com/search?q=filename%3Ammt+NOT+nothack&type=Code): Nroff and Troff macros, respectively.
  Mostly distributed with the Plan 9 OS, but possibly in other distros too.
#### Sample licenses

The `.tmac` sample is from GNU Groff, but it's not GPL-licensed.  
To quote [**groff_man**(7)](http://man7.org/linux/man-pages/man7/groff_man.7.html#FILES):

> It is written in classic troff, and released for free re-use, and not copylefted; manual  page  authors  concerned about portability to legacy Unix systems are encouraged to copy these definitions into their pages, and maintainers of troff or its workalikes are encouraged to re-use them.

I'm not sure about the license of Plan 9, but I'm assuming that _is_ copylefted. Hence the reason I didn't include sample files for `mmn` and `mmt` (unless their contents don't count?)
## RUNOFF

The grandfather of _roff_, and indeed of all modern typesetting. I've added it primarily to help disambiguate the `.rno` extension, which is also used by some manpages.

Considering the antiquity of RUNOFF, it's not surprising the language doesn't command a widespread presence on GitHub. You're looking at something developed in the early 1960s... that's even older than the moon landing. However, at least two extensions see modest (albeit limited) distribution:
- [`.rno`](https://github.com/search?q=extension%3Arno+NOT+nothack&type=Code) (980 results)
- [`.rnh`](https://github.com/search?q=extension%3Arnh+NOT+nothack&type=Code) (574 results)

RUNOFF used [several other](https://github.com/Alhadis/language-roff/blob/master/grammars/runoff.cson#L1-L17) file extensions too, especially `.run`. I've left those out, for obvious reasons. My main motivation is to separate RUNOFF's classification from Roff's. The two languages are only superficially similar.
#### Colour choice

I chose a rusty brown to represent the language, the colour of a bronze typewriter.
#### Sample licenses / Highlighting preview
- **[VMS_ZIP.RNH](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flanguage-roff%2Fblob%2Fstatic%2Frunoff.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fwwivbbs%2Fwwiv%2Fblob%2F296bccdc2edb4c541622c7fe7d5f4303010a1584%2Fdeps%2Finfozip%2Fzip30%2Fvms%2FVMS_ZIP.RNH&code=)**: This describes Zip documentation for VMS systems. I believe the [license](https://github.com/wwivbbs/wwiv/blob/296bccdc2edb4c541622c7fe7d5f4303010a1584/deps/infozip/zip30/vms/VMS_ZIP.RNH#L1378-L1433) is okay, but I'd prefer somebody better versed in legelese to check.
- **[mcp_help.rnh](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flanguage-roff%2Fblob%2Fstatic%2Frunoff.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fendlesssoftware%2Fmx%2Fblob%2F28e2721712b4b712851c2ac2d1afd72514b20168%2Fmcp%2Fmcp_help.rnh%23L3-L35&code=)**: Is [this license](https://github.com/endlesssoftware/mx/blob/28e2721712b4b712851c2ac2d1afd72514b20168/mcp/mcp_help.rnh#L3-L35) okay?? Not sure.
- **[longlib.rno](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flanguage-roff%2Fblob%2Fstatic%2Frunoff.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fnappij%2Fnasa-cosmic%2Fblob%2F0c37c3bdb17170e930b1138864c39ceee621440d%2Fnpo-17443%2Fdl%2Fgraphics%2Flonglib%2Flonglib.rno&code=)**: Taken from a [NASA COSMIC project](https://code.google.com/archive/p/nasa-cosmic/), which was released into the public domain. Not sure why the old Google site says ""GPL v2"", though.
- **[contributing.rnh](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flanguage-roff%2Fblob%2Fstatic%2Frunoff.json&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2FAlhadis%2Flinguist%2Fblob%2Froff%2Fsamples%2FRUNOFF%2Fcontributing.rnh&code=)**: Painstakingly written by yours truly, using this repo's contribution notes, [Saltzer's original publications](http://web.mit.edu/Saltzer/www/publications/florence.run) as reference, and a [cheatsheat](http://web.mit.edu/multics-history/source/Multics/doc/info_segments/runoff.info).
",Externals,542,False,en
3124,"Fixes and supercedes #3110.
",Externals,4,True,en
3123,"Added [trace_futexes.d](https://github.com/bycn82/freebsd/blob/12a4a4a008eac3cfa71e496b33eaeaf426c374c1/sys/compat/linux/trace_futexes.d)
",Externals,24,True,en
3116,"Updates since last release: https://github.com/github/linguist/compare/v4.8.7...5076539df51a752d048ab22ff81e586420782dd1
",Internals,32,True,en
3115,"Replaces #3112 
",Internals,4,True,en
3113," @arfon wrote:

> We can probably remove Markdown's colour safely.
",Externals,0,True,en
3108," Because it was deleted in upstream.  Changed to `text`.  
",Externals,0,True,en
3105,"Ping @Alhadis.
",Externals,0,True,pt
3102,"- Added `basis_ssntype.sats` [Source](https://github.com/githwxi/ATS-Postiats-contrib/blob/201d635062d0ea64ff5ba5457a4ea0bb4d5ae202/contrib/libats-/hwxi/teaching/mysession-g/SATS/basis_ssntype.sats)
- Added `csv_parse.hats` [Source](https://github.com/githwxi/ATS-Postiats-contrib/blob/0f26aa0df8542d2ae21df9be1e13208f66f571d6/contrib/libats-/hwxi/teaching/mygrading/HATS/csv_parse.hats)
- Added `intinf_vt.dats` [Source](https://github.com/githwxi/ATS-Postiats-contrib/blob/04a984d9c08c1831f7dda8a05ce356db01f81850/contrib/libats-/hwxi/intinf/DATS/intinf_vt.dats)

[License](https://github.com/githwxi/ATS-Postiats-contrib/blob/master/LICENSE) for all of these files
",Externals,74,False,en
3098,"This pull request improves the `.ts` heuristic rule. It's generally better to use the closing TS tag as it cannot contain parameters. I added a sample file to test this change as well.

Fixes #3097.
",Externals,4,True,en
3095,"The `.md` file extension is used not only for markdown files, but also GCC machine descriptions.  There are about [111000](https://github.com/search?q=extension%3Amd+insn) of those, so this language should qualify for addition.

The syntax is a Lisp-like variation of RTL, Register Transfer Language.

My intention is to open this issue for discussion, and later turn it into a PR if there are no objections.
",Externals,7,True,en
3092,"This pull request adds Python console highlighting, as discussed in #1939.

The goal is to enable Python console highlighting in Markdown documents and comments with the `pycon` identifier. Thus, the entry in `languages.yml` doesn't define extensions or filenames.

[Here is an example of the result in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom%2Flanguage-python%2Fblob%2Fmaster%2Fgrammars%2Fpython-console.cson&grammar_text=&code_source=from-text&code_url=&code=%3E%3E%3E++try%3A%0D%0A...+++++from+io+import+StringIO%0D%0A...+except+ImportError%3A%0D%0A...+++++from+StringIO+import+StringIO).
",Externals,29,True,en
3091,"Issue https://github.com/github/linguist/issues/3044

@arfon @gandm

`language-babel` was refactored to use back-reference notation on <s>`v.2.25.x`</s> v2.23.0, which the Linguist regex engine couldn't handle. 

If I understand git submodules correctly, this PR locks `language-babel` to <s>`v2.24.4` or commit `d14329f2d3c0a1154c50f668e0a58122ca97854a`</s> `v2.22.0` or commit `0d093e8ffeaa80602c6f3ae86fade6a3b5f56e4d`, which should be able to handle JSX imports and exports.

<s>Refers to https://github.com/gandm/language-babel/releases/tag/v2.22.4 aka https://github.com/gandm/language-babel/tree/d14329f2d3c0a1154c50f668e0a58122ca97854a</s>
Refers to https://github.com/gandm/language-babel/releases/tag/v2.22.0 aka https://github.com/gandm/language-babel/tree/0d093e8ffeaa80602c6f3ae86fade6a3b5f56e4d
",Externals,123,True,en
3090,"This pull request adds support for GDB command files, as discussed in #2730.
There are around [31,700 `.gdb`](https://github.com/search?utf8=%E2%9C%93&q=extension%3Agdb+NOT+dkfjdkfdnkd&type=Code&ref=searchresults) and [48,000 `.gdbinit`](https://github.com/search?utf8=%E2%9C%93&q=extension%3Agdbinit+NOT+jfhdkfndnf) files on github.com. GDB seems to be the only language using these file extensions.
",Externals,26,False,en
3088,"Removed all GPL licensed .gml samples.

Sources of all added files are mentioned in the first line of every file.

@arfon Please have a look :smile: 
",Externals,0,True,en
3087,"This pull request adds a few new interpreters:
- [`dart`](https://github.com/search?utf8=%E2%9C%93&q=usr+bin+env+dart+extension%3Adart&type=Code&ref=searchresults) for Dart
- [`io`](https://github.com/search?utf8=%E2%9C%93&q=usr+bin+env+io+extension%3Aio&type=Code&ref=searchresults) for Io
- [`rune`](https://github.com/search?utf8=%E2%9C%93&q=usr+bin+env+rune+extension%3Ae&type=Code&ref=searchresults) for E
- [`runhaskell`](https://github.com/search?utf8=%E2%9C%93&q=usr+bin+env+runhaskell+extension%3Ahs&type=Code&ref=searchresults) for Haskell
- [`instantfpc`](https://github.com/search?utf8=%E2%9C%93&q=usr+bin+env+instantfpc+extension%3Apas&type=Code&ref=searchresults) for Pascal
- [`ocamlscript`](https://github.com/search?utf8=%E2%9C%93&q=%22bin%2Fenv+ocamlscript%22&type=Code&ref=searchresults) for OCaml
",Externals,40,False,en
3086,"This pull request adds support for the EQ programming language with the `.eq` file extension.
I found [around 3,360 EQ files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aeq+class+OR+var+OR+public+OR+String). There are also many binary files and a few CSV-like files (although, I couldn't find enough to justify adding the extension to CSV) with the `.eq` extension.

Addresses #3081.
",Externals,14,False,en
3085,"@arfon Please have a look :smile: 
- Added `PackageInfoParser.cpp` [Source](https://github.com/haiku/haiku/blob/73e180c9b965aaeb034055453e153bc3adf47917/src/kits/package/PackageInfoParser.cpp)
- Added `crypter.cpp` [Source](https://github.com/Bradfrogger/Marvelous/blob/master/src/crypter.cpp)
- Added `graphics.cpp` [License](https://github.com/TurtleP/Flask/blob/master/LICENSE)
- Added `json_reader.cpp` [Source](https://github.com/Ij888/ApacheCordovaRecipes/blob/6e8a2c1d9de7302f74bc3dbac54a021f0499bbb3/jqmsandbox/plugins/cordova-plugin-globalization/src/blackberry10/native/public/json_reader.cpp)
- Added `json_writer.cpp` [Source](https://github.com/Ij888/ApacheCordovaRecipes/blob/6e8a2c1d9de7302f74bc3dbac54a021f0499bbb3/jqmsandbox/plugins/cordova-plugin-globalization/src/blackberry10/native/public/json_writer.cpp)
- Added `srs_app_ingest.cpp` [Source](https://github.com/REN-I/srs/blob/3aae7854702a37955bce706fcd8122b02ac07f53/trunk/src/app/srs_app_ingest.cpp)
- Added `Arduino.cats` [Source](https://github.com/githwxi/ATS-Postiats-contrib/blob/master/contrib/arduino/CATS/Arduino.cats)
",Externals,107,False,en
3082,"This pull request adds the `.pascal` file extension to Pascal. I found only [133 repositories owned by 124 users](https://github.com/search?utf8=%E2%9C%93&q=extension%3Apascal+NOT+djhfdkjfhjbffjhdejdbnsjd&type=Code&ref=searchresults) but the risk of collision with another language is low.
",Externals,12,True,en
3080,"This pull request adds three new interpreters for Scheme:
- [`cis`](https://github.com/search?utf8=%E2%9C%93&q=usr+bin+env+csi+extension%3Ascm&type=Code&ref=searchresults)
- [`gosh`](https://github.com/search?utf8=%E2%9C%93&q=usr+bin+env+gosh+extension%3Ascm&type=Code&ref=searchresults)
- [`r6rs`](https://github.com/search?utf8=%E2%9C%93&q=r6rs+extension%3Ascm&type=Code&ref=searchresults)

Not sure if there's a requirement of in-the-wild adoption for interpreters (in which case, `cis` might be just).
",Externals,20,False,en
3079,"This pull request partially fixes the issue at #3070.

The scopes for `vendor/grammars/NSIS` and `vendor/grammars/awk-sublime` were not recognized because the Sublime Text XML files were recently removed. The authors only kept the YAML files from which the XML files are generated.

Thus, this pull request adds support for YAML syntax definitions in `script/convert-grammars`.
A few new scopes were detected via `.YAML-tmLanguage` files. I added them in `grammars.yml`.

:warning: Of course, for this to work, GitHub backend for syntax highlighting must also recognize YAML grammar files.
",Externals,4,True,en
3078,"I am submitting this PR to make sure I keep getting feedback while I am making the changes. Please let me know if I am doing anything wrong.
- Updated samples for C language

I removed two large sample files containing 700+ lines and haven't added any file with approx same number of lines. Is that an issue? Should I add new samples files of approximately same size as the ones that I remove?

[EDIT]
- Added `fudge_node.c` [Source](https://github.com/jezze/fudge/blob/master/src/modules/pipe/main.c) | [License](https://github.com/jezze/fudge/blob/master/LICENCE)
- Added `array.c` [Source](https://github.com/Lodifice/array/blob/master/array.c) | [License](https://github.com/Lodifice/array/blob/master/LICENSE)
- Added `array.h` [Source](https://github.com/Lodifice/array/blob/master/array.h) | [License](https://github.com/Lodifice/array/blob/master/LICENSE)
- Added `custom_extensions.c` [Source](https://github.com/thewintersun/boringssl/blob/master/ssl/custom_extensions.c) | License (mentioned at the top of the file)

/cc @arfon @pchaigno 
",Externals,3,False,en
3077,"Copying search results from [here](https://github.com/github/linguist/issues/3014#issuecomment-228120275) in #3014 -
- PBL (Library files) [3,100 results](https://github.com/search?utf8=%E2%9C%93&q=NOT+nothack+extension%3Apbl&type=Code&ref=searchresults)
- PBT (Target files) [576 results](https://github.com/search?utf8=%E2%9C%93&q=NOT+nothack+extension%3Apbt&type=Code&ref=searchresults)
- SRW (Window source files) [1,500 results](https://github.com/search?utf8=%E2%9C%93&q=NOT+nothack+extension%3Asrw&type=Code&ref=searchresults)
- SRU (Custom user object source files) [2,460 results](https://github.com/search?utf8=%E2%9C%93&q=NOT+nothack+extension%3Asru&type=Code&ref=searchresults)
- SRP (Data pipeline source files) [6,500 results](https://github.com/search?utf8=%E2%9C%93&q=NOT+nothack+extension%3Asrp&type=Code&ref=searchresults)
- SRA (Application files) [663 results](https://github.com/search?utf8=%E2%9C%93&q=NOT+nothack+extension%3Asra&type=Code&ref=searchresults)
- SRJ (Project files) [1,200 results](https://github.com/search?utf8=%E2%9C%93&q=NOT+nothack+extension%3Asrj&type=Code&ref=searchresults)

I have been following the contributions guide available, but I have been able to add only the language to `languages.yml`. I am confused about adding grammar for a language. I need help in going ahead with this.

/cc @arfon @pchaigno 
",Externals,85,False,en
3076,"Currently, there is only one Arduino sample. This proposal has much more common Arduino functions, like pinMode(), digitalRead(), digitalWrite(), LOW, HIGH, INPUT,OUTPUT, and delay(). This will allow Linguist to more accurately find Arduino files, in case they don't have the .ino extension.
",Externals,0,True,en
3071,"Changes since last release: https://github.com/github/linguist/compare/v4.8.6...81f9079f43c2d4fd5eb40421ef2c212cdf6b7d69
",Internals,27,True,en
3069,"This PR adds a colour for Roff (incorrectly named ""Groff"" on GitHub):

<img src=""https://cloud.githubusercontent.com/assets/2346707/16231640/7366bec4-380a-11e6-8577-f4ed8242cced.png"" width=""128"" alt=""Figure 1"" />

I chose a colour to match the look of aged paper, which symbolises both the language's longevity and its importance in authoring documentation/manuals. No canonical implementation of Roff exists which has any branding with distinguishable colours... so I fell back on natural sources as my inspiration.

---

This PR also attempted to add a colour for the PostScript language, which was the same [PANTONE red](https://www.pantone.com/color-finder/485-C) used in Adobe's official branding. [Example](https://www.adobe.com/products/postscript/pdfs/ps3datasheet.pdf):

<img width=""612"" alt=""Figure 2"" src=""https://cloud.githubusercontent.com/assets/2346707/16231929/c4a51384-380b-11e6-9f4c-56b10d7e0e45.png"">

However, the colour-proximity test was blocking every attempt at picking a close enough colour... and even shades that were noticeably different were being rejected. Here's a comparison of the conflicting colours, with the attempted PostScript shades on the right:

<img src=""https://cloud.githubusercontent.com/assets/2346707/16232006/19e82d86-380c-11e6-82f5-7b81cb134177.png"" width=""500"" alt=""Figure 3"" />

This might be attributed to my colour-blindness, but I fail to see how the bottom-right colour could possibly be confused with any of the other shades depicted here.
",Externals,127,True,en
3068,"- Added fontello.css with all it's possible(known) variants
- Added corresponding exhaustive tests
",Externals,0,False,en
3066,"This pull request removes the `pragma` keyword from the PLSQL heuristic rule. The `pragma` keyword is not specific to PLSQL and [can be found in other SQL languages](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asql+mysql+pragma).

Fixes #3063.
",Externals,10,True,en
3061,"- Added ace-build folder to vendor.yml
- Added corresponding test blobs
",Externals,0,False,en
3054,"There are two types of `.srt` files, both totalling almost [103,000 search results](https://github.com/search?p=1&q=extension%3Asrt+NOT+nothack&type=Code) on GitHub:
1. [**SRecode .SRT files**](http://cedet.sourceforge.net/srecode.shtml)<br/> A templating engine of sorts ~~written using~~ _written in_ Emacs Lisp with some Handlebars-like template tags. The [sample I've added](https://github.com/Alhadis/linguist/blob/d0370a3b4cfbe18cea0ce17fb58ea03355737a40/samples/Emacs%20Lisp/linguist.srt) was written by hand while referencing a boilerplate file in [CEDET's](https://sourceforge.net/projects/cedet/files/cedet/cedet-1.1.tar.gz/download) tarball - the entire project is GPLed to hell and back, with derived results in the wild being released under a similar license.<br/><br/>**EDIT:** I've moved this to its own language entry, rather than leaving it classified as a type of Emacs Lisp file. See the discussion between @larsbrinkhoff and myself below.<br/><br/>The colour I've picked for SRecode Templates is sampled from the CEDET project's [logotype](http://cedet.sourceforge.net/img-gen/cedet-logo-left.png). I had to bump the luminosity a notch, because the shade of green was too close to C#'s colour.
2. [**SubRip Text**](https://en.wikipedia.org/wiki/SubRip#SubRip_text_file_format)<br/> `.srt` files would appear to be one of the most widely-spread subtitle formats, and while I can't foresee GitHub ever being inundated by them, they did turn up in search results ([this](https://github.com/lgautrot/translations/blob/ce9c42723e3dcc45c289447b3441ab74671e79de/subtitles/cockleshell_heroes-fr.srt) and [this](https://github.com/matthewfu/TheBibleSubChinese/blob/990e175c75884d0c2d9dda6d1ed81c5d735f2cfe/%E8%81%96%E7%B6%93%E5%BD%B1%E9%9B%86.The.Bible.S01E01.1080p.BluRay.x264.cht%26eng.utf8.srt), for example). The [sample I added](https://github.com/Alhadis/linguist/blob/d0370a3b4cfbe18cea0ce17fb58ea03355737a40/samples/SubRip%20Text/Adding.NCL.Language.S01E01.1080p.BluRay.x264.srt) is #2440 transcribed into a cinematic format.
",Externals,155,False,en
3053,"I was clearly too busy cracking witty puns in #3052 to notice [I'd forgotten](https://github.com/github/linguist/pull/3052#issuecomment-226008610) to include the `tm_scope` attribute for Turing (thanks @pchaigno. I've had smoother moments).
",Externals,17,True,en
3052,"[Turing](https://en.wikipedia.org/wiki/Turing_%28programming_language%29) doesn't have a grammar, [so I wrote one](https://github.com/Alhadis/language-turing).

I've also changed the language's colour from a bright, garish green to a more suitable red:

<img src=""https://cloud.githubusercontent.com/assets/2346707/16048751/9a390c72-3298-11e6-9c9a-21a5b0aaa147.png"" alt=""Figure 1"" width=""320"" /> <img src=""https://cloud.githubusercontent.com/assets/2346707/16048765/a7fff564-3298-11e6-8a92-a779c73454df.png"" alt=""Figure 2"" width=""320"" />

**Rationale:** Red is the colour used in [Turing's logo](https://en.wikipedia.org/wiki/File:Turing_logo.gif), and it also reflects the language's Canadian heritage. The shade of red I picked is the same one used by the [flag of Ontario](https://upload.wikimedia.org/wikipedia/commons/8/88/Flag_of_Ontario.svg), the state where the Turing language was conceived (and continues to be taught).

<img src=""https://cloud.githubusercontent.com/assets/2346707/16048966/5b3e66ce-3299-11e6-9356-4f4fe4403dd6.png"" alt=""Do I get a Turing award for this?"" />
",Externals,126,True,en
3051,"/ cc @pchaigno @larsbrinkhoff @bkeepers 
",Internals,0,True,en
3049,"After running Linguist a few times on Turing repositories in the wild (such as [this one](https://github.com/jbrick/highschool_turing)), I feel it could still benefit from an additional heuristic, even if #3040 greatly improved Linguist's classification of Turing from Perl6.

Turing and Perl6 both use different styles of line-comments (`%` versus `#`, respectively), so the heuristic was easy to add. [Surprisingly](http://i.imgur.com/9Fxm1eT.png), I managed to get Perl6 running to test if `%` was invalid syntax at the start of a line. A glaring error message confirmed that it was indeed invalid syntax:

<img src=""https://cloud.githubusercontent.com/assets/2346707/15985281/91dd4d6e-302b-11e6-9728-98d3999a3d09.png"" width=""432"" alt=""Figure 1"" />

Turing's heuristic also checks for `var {name} : {type}`-like patterns, where `{name}` and `{type}` are sequences of word-characters (`\w`). These lines are unlikely to manifest in Perl 6, which retains Perl 5's method of initialising variables ([`my $a = accum 5;`](https://github.com/perl6/perl6-examples/blob/master/categories/best-of-rosettacode/accumulator-factory.pl#L84)).
",Externals,58,True,en
3048,"This file is generated by the `npm shrinkwrap` command. It's large, generated, and has a noisy diff. One example of a similar file - php composer lock files, is already ignored as generated.

Resolves https://github.com/github/linguist/issues/3045.
",Externals,4,True,en
3046,"/ cc @tenderlove 
",Internals,0,True,de
3040,"Improved the Turing sample code with commands including graphics, audio, conditionals, if statements, etc. This is a follow up from [here.](https://github.com/github/linguist/issues/2940)
",Externals,4,True,en
3038,"Linguist currently uses [TextMate's bundle for reStructuredText](https://github.com/textmate/restructuredtext.tmbundle), which hasn't been updated in nearly 1.5 years. [The grammar](https://github.com/Lukasa/language-restructuredtext) I've recently submitted a few fixes to was converted from the same bundle, which inherited the same problems I addressed.

Admittedly, this isn't _too_ much of a big deal, since GitHub renders reStructuredText files as full HTML. However, the errors are still visible in embedded rST:

``` rst
.. code::

.. py:class:: Test
```

That particular example was taken from [an issue](https://github.com/Lukasa/language-restructuredtext/issues/13) submitted to the package's repo.

As for the specific improvements over TextMate's grammar, well, the majority of them can be reviewed in pull requests I submitted:
- Lukasa/language-restructuredtext#41
- Lukasa/language-restructuredtext#38
",Externals,8,True,en
3037,"A [language package](https://github.com/timjs/atom-language-clean) for the [Clean programming language](http://clean.cs.ru.nl/) was published to Atom.io earlier tonight. The package is in the hands of one of the language's maintainers, which makes it an obvious choice, even if the site already had highlighting for Clean (which it doesn't).
",Externals,0,True,en
3035,"[Changes since last release](https://github.com/github/linguist/compare/v4.8.5...f4af4727a1bb20181d08fb104a8cddb84f13f2e5) https://github.com/github/linguist/compare/v4.8.5...f4af4727a1bb20181d08fb104a8cddb84f13f2e5
",Internals,52,True,en
3034,"Replaces #3020 
",Internals,4,True,en
3033,"Replaces #3027
",Internals,4,True,en
3030,"The site's currently using Scheme's grammar to highlight [Nu code](https://en.wikipedia.org/wiki/Nu_%28programming_language%29), which is a decent approximation. However, an [official TextMate grammar exists](https://github.com/jsallis/nu.tmbundle), which I believe was originally authored by Nu's creator, @timburks.
",Externals,4,True,en
3029,"Currently, Linguist doesn't recognise APL or J scripts without file extensions.
### APL

Imagine there's a file named `hashbang` written to run under GNU APL:

``` shell
#!/usr/local/bin/apl --script
```

Output of `linguist hashbang`:

```
hashbang: 8 lines (7 sloc)
  type:      Text
  mime type: text/plain
  language:  
```

I'm unsure if [Dyalog](http://dyalog.com/) or [APLX](https://en.wikipedia.org/wiki/APLX) actually allow APL scripts to be run as executables from command-line, but since both programs are commercial and closed source, I'm too poor to fork out the dough to find out... vultures.

The fixture I added for the APL hashbang is a [webserver script](https://github.com/Alhadis/Snippets/commit/b686026f4993) I wrote while wired on energy drinks at some fucked up hour of the morning without sleep.
### J

The language's [Wikipedia page](https://en.wikipedia.org/wiki/J_%28programming_language%29#Examples) lists this as an example script for a Unix-like system:

``` shell
#!/bin/jc
echo 'Hello, world!'
exit ''
```

I downloaded the [J installer](http://www.jsoftware.com/download/j804/install/) and found the name of the interpreter is actually `jconsole`. Which I'm guessing is what `jc` in Wikipedia's example erroneously refers to.
",Externals,19,False,en
3028,"That's really [what it is](https://github.com/github/linguist/blob/master/lib/linguist/languages.yml#L704).

<img src=""https://cloud.githubusercontent.com/assets/2346707/15656161/be884e06-26e7-11e6-95f6-673708a3a576.png"" width=""257"" alt=""Figure 1"" />

I actually bothered to do a Google search, just to see if there was some oddly-named variant or something. Judging from the lack of meaningful results, however, I'd say it's an honest misspelling...
",Externals,46,True,en
3019,"Hi,

There is such a thing as Jade template engine that has been recently renamed to Pug due to copyright reasons: https://github.com/pugjs/pug/issues/2184

GitHub perfectly supports syntax highlighting of `.jade` files, but due to this rename the new recommended extension is `.pug`. This patch is a quick fix to support both `.jade` and `.pug`.
",Externals,4,True,en
3010,"Fairly trivial addition: [there're many readme files](https://github.com/search?q=filename%3AREADME.1st+NOT+nothack&type=Code) using `.1st` as a file extension (to the surprise of nobody). Adding `.1st` as an extension was tempting, but I did find [some](https://github.com/gatesvp/UltimatePsionics/blob/ca037de77cbf16a31f17c6908c734033de10a054/PFRPG_Psionics_Unleashed_Tags.1st) [files](https://github.com/jgshort/jgshort.github.io/blob/be374cfbfad173762d08a73d6d393e3755ccde76/downloads/code/wordptr/fnptrs/test.1st) that obviously weren't pure text, so I've added it as a filename instead.

The contents of the sample are randomly-generated excerpts of [Lorem Ipsum](http://lipsum.com/feed/html) translated into French for the amusement of @pchaigno.
",Externals,55,True,en
3009,"[COLLADA](https://en.wikipedia.org/wiki/COLLADA) is a [standardised](http://www.iso.org/iso/catalogue_detail.htm?csnumber=59902) 3D format that uses an XML-based schema for exchanging 3D assets between software packages. They're essentially just an XML file the same way an SVG is, and use the `.dae` (Digital Asset Exchange) file extension.

[Searching for `.dae` files](https://github.com/search?q=extension%3Adae+NOT+nothack&type=Code) yields around 163,200 results, so the format certainly has relevance on GitHub. Heck, [the project itself](https://github.com/khronosGroup/OpenCOLLADA) is hosted here.

I've omitted samples simply because I've moved house, and all my 3D software is on my desktop computer that's not been set back up yet. And, erm, as a 3D artist, it'd be a faux pas to use anybody else's work to demonstrate an example... just saying. Sure you understand.
",Externals,16,True,en
3007,"Vendored files _are_ displayed in diffs on github.com, so I removed the line that said the opposite.

The **Generated file detection** section is restored from a previous version of the readme (with ""unlike vendored and documentation files"" added as a clarification). I'm not sure why it was originally removed -- perhaps related to the confusion over diffs on vendored files -- but it's still relevant and useful (e.g., the section is linked to at http://stackoverflow.com/a/24382933/278488, and that link is now broken).
",Externals,14,True,en
3005,"This pull request adds grammars and supporting files for [Csound](https://csound.github.io) languages.

Here are links to GitHub search results showing in-the-wild usage.
- [Csound orchestra (.orc) files containing `nchnls`](https://github.com/search?utf8=✓&q=extension%3Aorc+nchnls&type=Code&ref=searchresults), 2,000+ code results. Searching for [just the extension](https://github.com/search?utf8=✓&q=extension%3Aorc+NOT+nothack&type=Code&ref=searchresults) shows many results that seem to be related to an [Oil Runtime Compiler](https://github.com/bistromath/orc), about which I know very little. 
- [Csound user-defined opcode (.udo) files containing `opcode`](https://github.com/search?utf8=✓&q=extension%3Audo+opcode&type=Code&ref=searchresults), 188 repositories. The [.udo extension](https://github.com/search?utf8=✓&q=extension%3Audo+NOT+nothack&type=Code&ref=searchresults) seems to mean a “user-defined object” file in many contexts.
- [Csound document (.csd) files containing `CsoundSynthesizer`](https://github.com/search?utf8=✓&q=extension%3Acsd+CsoundSynthesizer&type=Code&ref=searchresults), 10,000+ code results. The [.csd extension](https://github.com/search?utf8=✓&q=extension%3Acsd+NOT+nothack&type=Code&ref=searchresults) also appears to be associated with [Cocos Studio](http://www.cocos2d-x.org/wiki/Cocos_Studio) files.
- [Csound score (.sco) files containing `i1`](https://github.com/search?utf8=✓&q=extension%3Asco+i1&type=Code&ref=searchresults), 3,000+ repositories. The [.sco extension](https://github.com/search?utf8=✓&q=extension%3Asco+NOT+nothack&type=Code&ref=searchresults) also seems to be associated with [SCO UNIX](https://en.wikipedia.org/wiki/OpenServer) and “scene object” files, apparently used in game development.

If additional sample files are needed, I can add more from the [User-Defined Opcode Database](http://www.csounds.com/udo/) and the [Csound manual repository](https://github.com/csound/manual/tree/master/examples).
",Externals,35,True,en
3001,"#1451 added the `.lock` extension to the JSON language, as a result of an existing test for `composer.lock` added in #818.

`.lock` is used for many purposes, the most common of which being lock files. JSON does not appear to be a common format for `.lock` files.

This PR removes `.lock` from the JSON language, and updates a test and sample for `composer.lock`, which remains JSON (which itself was added in #790)

[This](https://github.com/search?utf8=%E2%9C%93&q=extension%3Alock+lock&type=Code&ref=searchresults) search returns a number of examples of `.lock` files that should not be classified as JSON.
",Internals,16,True,en
2999,"/ cc https://github.com/github/linguist/issues/2885
",Internals,4,True,en
2998,"`GAS` code currently isn't syntax-highlighted but it should be. This PR fixes that.
",Internals,0,True,en
2996,,Externals,0,False,en
2995,"Fixes #2913
",Internals,4,True,en
2994,"[Changes since last release](https://github.com/github/linguist/compare/v4.8.4...HEAD) https://github.com/github/linguist/compare/v4.8.4...HEAD
",Internals,6,True,en
2993,"Replaces #2912
",Internals,4,True,en
2992,"Replaces #2945
",Internals,4,True,en
2991,"This pull request adds back the grammar for CLIPS since it's now under MIT license.
The grammar was removed in #2884.

/cc psicomante/CLIPS-sublime#2
",Externals,5,False,en
2990,"Replaces https://github.com/github/linguist/pull/2981 because of duplicate entry for `TLA` in languages.ym
",Internals,4,True,en
2986,"This PR is addressing two different languages, so forgive me if this should've been handled in two different pull requests.

| Filename/type | URL | Added as… | Usage | Origin of sample |
| --- | --- | --- | --- | --- |
| `.arcconfig` | [:link:](https://secure.phabricator.com/book/phabricator/article/arcanist_new_project/) | JSON | [+3,455 results](https://github.com/search?utf8=%E2%9C%93&q=filename%3A.arcconfig+NOT+nothack&type=Code&ref=searchresults) | Hand-written [with reference](https://github.com/yunxing/Hive_optimization/blob/master/.arcconfig) |
| `.JSON‑tmLanguage` | [:link:](https://forum.sublimetext.com/t/creating-a-new-syntax-definition-stock/5204) | JSON | [+3,120 results](https://github.com/search?q=extension%3A.JSON-tmLanguage+NOT+nothack&type=Code) | [`sublime-text-git`](https://github.com/kemayo/sublime-text-git/blob/master/syntax/Git%20Commit%20Message.JSON-tmLanguage) ([MIT‑licensed](https://github.com/kemayo/sublime-text-git/blob/master/LICENSE)) |
| `BSDmakefile` | n/a | Makefile | [+2,350 results](https://github.com/search?p=1&q=filename%3ABSDmakefile+NOT+nothack&ref=searchresults&type=Code&utf8=%E2%9C%93) | [NodeJS source](https://github.com/nodejs/node/blob/master/BSDmakefile) |

Anything I've missed, please let me know.
",Externals,34,True,en
2984,"This covers compile-to-JavaScript languages other than CoffeeScript. E.g. it come up in one of our projects for files with JSX code that were compiled to ""plain JavaScript"" using babel. If the file has a source map reference, it's pretty much by definition generated from another file. :)

This also adds an additional check to the other `generated?` tests. Previously it was possible to comment out the `minified_files? ||` and the tests would still happily pass.
",Externals,0,True,en
2980,"This pull request adds a heuristic rule for `.inc` PHP files, as discussed in #2972.

| Files | PHP | C++ | SourcePawn |
| --- | --- | --- | --- |
| [2,879 files previously detected as C++](https://github.com/search?l=cpp&q=extension%3Ainc+NOT+dkfjdkjkg&ref=searchresults&type=Code&utf8=%E2%9C%93) | 92.22% | 7.78% | 0% |
| [2,891 files previously detected as SourcePawn](https://github.com/search?l=sourcepawn&q=extension%3Ainc+NOT+dkfjdkjkg&ref=searchresults&type=Code&utf8=%E2%9C%93) | 86.13% | 0.01% | 13.86% |
",Externals,43,True,en
2976,"This pull request removes Terra from the Lua group, as discussed in #2975. Although closely related, Terra and Lua are two separate languages.
",Externals,4,True,en
2973,"[Changes since last release](https://github.com/github/linguist/compare/v4.8.3...HEAD)

**Merged pull requests:**
- Makefile.frag as a Makefile filename [#2969](https://github.com/github/linguist/pull/2969) ([pchaigno](https://github.com/pchaigno))
- Update doc: new step required when adding a grammar [#2966](https://github.com/github/linguist/pull/2966) ([pchaigno](https://github.com/pchaigno))
- Add .app.src as Erlang extension. [#2964](https://github.com/github/linguist/pull/2964) ([thwg](https://github.com/thwg))
- Grammar for AutoIt from Sublime Text package [#2961](https://github.com/github/linguist/pull/2961) ([pchaigno](https://github.com/pchaigno))
- Verify licenses on CI [#2955](https://github.com/github/linguist/pull/2955) ([bkeepers](https://github.com/bkeepers))
- Classify builds, pkgproj, resx and sfproj as XML [#2954](https://github.com/github/linguist/pull/2954) ([jasonwilliams200OK](https://github.com/jasonwilliams200OK))
- Added GLSL extensions .vsh & .fsh [#2951](https://github.com/github/linguist/pull/2951) ([BruceKnowsHow](https://github.com/BruceKnowsHow))
- Add Forge Mod Loader Mod Info file as JSON [#2941](https://github.com/github/linguist/pull/2941) ([keplersj](https://github.com/keplersj))
- Add gradlew and a few other filenames to Shell [#2910](https://github.com/github/linguist/pull/2910) ([Dominator008](https://github.com/Dominator008))
",Internals,87,True,en
2971,"I'm less interested in [the data format](http://wow.gamepedia.com/TOC_format) than I am fixing its widespread misclassification: searching for [`.toc`](https://github.com/search?q=extension%3Atoc+NOT+nothack&type=Code) files tosses up an impressive number of results: most of them WoW-related.

This misclassification sharply skews TeX's usage statistics, so it's worth addressing. As usual, I collated public `.toc` files from extension search results to test classification accuracy; the [results are here](https://github.com/Alhadis/Linguist-Heuristics/blob/toc/results.log). Since I've classified WoW's addon data as... well, data, it doesn't show up in the breakdown graph. Which I'm guessing is the expected behaviour, really.
",Externals,1,True,en
2969,"This pull request adds `Makefile.frag` as a Makefile filename, as discussed in #2968.
There are [around 3,800 `Makefile.frag` files](https://github.com/search?utf8=%E2%9C%93&q=filename%3AMakefile.frag) on GitHub.
",Externals,14,False,en
2967,"This pull request limits the scope of the modeline search on files, as discussed in #2942.
It now only matches the first and last 5 lines against the modeline regular expressions.

Fixes #2942.
",Externals,9,False,en
2966,"This pull request updates the `CONTRIBUTING.md` doc with the new step required when adding a grammar, as discussed in #2961.
",Externals,4,True,en
2964,"*.app.src is a convention that modern build tools use as input to describe an Erlang application.

In-the-wild search doesn't pull up any results, I think due to the period in the extension, but it should be popular among Erlang projects.
",Externals,0,True,en
2961,"This pull request adds a grammar for AutoIt ([demonstration on Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FAutoIt%2FSublimeAutoItScript%2Fblob%2Fmaster%2FAutoIt.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2FTheDcoder%2FIRC-Bot-Base-for-AutoIt%2Fblob%2Fmaster%2FBot.au3&code=)).

/cc @TheDCoder
",Externals,22,True,en
2955,"- Run `script/licensed verify` as part of CI
- Removes licenses for rubygem dependencies, with logic in 9289704
",Internals,7,False,en
2954,"- `.builds` (MSBuild): https://github.com/search?utf8=%E2%9C%93&q=extension%3Abuilds+xml&type=Code&ref=searchresults
- `.pkgproj` (Nuget): https://github.com/search?utf8=%E2%9C%93&q=extension%3Apkgproj+xml&type=Code&ref=searchresults
- `.resx` (Resource): https://github.com/search?utf8=%E2%9C%93&q=extension%3Aresx+xml&type=Code&ref=searchresults
- `.sfproj` (Azure Service Fabric): https://github.com/search?utf8=%E2%9C%93&q=extension%3Asfproj+xml&type=Code&ref=searchresults
",Externals,24,False,en
2951,"[.vsh usage](https://github.com/search?utf8=%E2%9C%93&q=extension%3Avsh+NOT+nothack&type=Code&ref=searchresults)

[.fsh usage](https://github.com/search?utf8=%E2%9C%93&q=extension%3Afsh+NOT+nothack&type=Code&ref=searchresults)
",Externals,12,True,en
2950,"Changes since last release: https://github.com/github/linguist/compare/v4.8.2...HEAD

**Merged pull requests:**
- Add support for GraphQL [#2947](https://github.com/github/linguist/pull/2947) ([gjtorikian](https://github.com/gjtorikian))
- Add ""mkfile"" as a recognised Makefile name [#2938](https://github.com/github/linguist/pull/2938) ([Alhadis](https://github.com/Alhadis))
- Switch grammar used for APL highlighting [#2937](https://github.com/github/linguist/pull/2937) ([Alhadis](https://github.com/Alhadis))
- Idris [#2936](https://github.com/github/linguist/pull/2936) ([arfon](https://github.com/arfon))
- Adds proper grammar for the DM language. [#2928](https://github.com/github/linguist/pull/2928) ([PJB3005](https://github.com/PJB3005))
- Add ISC to license whitelist [#2927](https://github.com/github/linguist/pull/2927) ([Alhadis](https://github.com/Alhadis))
",Internals,59,True,en
2947,"Closes https://github.com/github/linguist/issues/2637.

I noticed @charliesome mentioned wanting support for this. Seems like a good idea!
",Internals,4,True,en
2941,"Minecraft Mods written using Forge Mod Loader use a JSON file to include basic information about the mod.

[This file is included in many GitHub projects.](https://github.com/search?utf8=%E2%9C%93&q=filename%3Amcmod.info+NOT+nothack&type=Code&ref=searchresults)
",Externals,6,True,en
2938,"Some older Unix-like systems used the name `mkfile` for their system's Makefiles - most notably [Plan 9](https://github.com/codesrxxx/plan9_source/blob/master/sys/src/mkfile). A search result for `mkfile` yields a whooping [+32k results](https://github.com/search?utf8=%E2%9C%93&q=filename%3Amkfile&type=Code&ref=searchresults), many of which are probably copies of distributed source code.

There're also about [~116 matches](https://github.com/search?q=extension%3Amkfile+NOT+nothack&type=Code) for `mkfile` in GitHub's file extension search, so it probably warrants inclusion as a file extension addition too.

People seemed rather laid-back about file extensions in those days...
",Externals,14,True,en
2937,"I'm not sure if the differences are glaring enough to make switching this a clear-cut decision, but I figure I'd try anyway. I was hesitant to propose switching grammars, because the one being switched to is mine, [which I wrote for Atom](https://atom.io/packages/language-apl).

Anyway... the grammar being used to highlight APL on this site is... okay, but it leaves out a lot. It highlights symbols only, ignoring their context. For example, `⍵` and `⍶` only have significance when used inside the body of a user-defined function or operator, but the grammar highlights them irrespective of where they're used.

Its coverage of the APL alphabet is also incomplete:
- [Current grammar](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.apl&grammar_url=&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fsymbols.apl&code=text+%E2%86%90+%E2%8E%95INP+%22END-OF-HTML%22%0D%0A%3Cheader+id%3D%22top%22%3E%E2%8D%9D+Heading+%E2%8D%9D%3C%2Fheader%3E%0D%0Aasfdwger%3D%3D%3D%3D%3D+END-OF-HTML+%3D%3D%3D%3Dq3ewrfd..%3F)
- [New grammar](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2F5X7kA5D0&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fsymbols.apl&code=text+%E2%86%90+%E2%8E%95INP+%22END-OF-HTML%22%0D%0A%3Cheader+id%3D%22top%22%3E%E2%8D%9D+Heading+%E2%8D%9D%3C%2Fheader%3E%0D%0Aasfdwger%3D%3D%3D%3D%3D+END-OF-HTML+%3D%3D%3D%3Dq3ewrfd..%3F)

**NOTE:** The symbols categorised as ""Unused"" in the above example are defined by the APL standard, but aren't recognised as functions in many interpreters. They may be implemented as functions by interpreters I'm unfamiliar with, though.
## Comparisons

Note the comments in the rendered examples aren't related to the comparisons being made: they're simply reminiscent of the [fixture I wrote](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2F5X7kA5D0&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fvarious.apl&code=) while testing the grammar.
### 1. Variable highlighting / Scientific notation

The current grammar doesn't properly highlight variables which contain numbers, and doesn't recognise exponential notation, either:

<a href=""https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2F5X7kA5D0&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fvarious.apl&code=%E2%8D%9D+Scientific+notation%0D%0A29.e%C2%AF2%0D%0A29e2%0D%0A2.9e2%0D%0A2.9e%C2%AF2%0D%0A%0D%0A%E2%8D%9D+NOT+scientific+notation%0D%0A29e-2%0D%0A2.+DModel%0D%0A2.5DModel%0D%0A3DModel%0D%0A33.333%28DModel%29%0D%0AAnother3DModel+%E2%86%90+Mesh""><img width=""497"" src=""https://cloud.githubusercontent.com/assets/2346707/14310322/ab4977c2-fc24-11e5-817a-6256b9921786.png"" alt=""Figure 1"" /></a>

**Note:** `""3dModel""` would be interpreted in APL as two values: a literal number, followed by a named reference. Equivalent to `[3, dModel]` in JavaScript.
### 2. Support for `)SYSTEM` or `]USER` commands

The new grammar properly recognises interpreter-specific command sequences:

<a href=""https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2F5X7kA5D0&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fvarious.apl&code=%E2%8D%9D+Space+before+comments%0D%0A%5Dsampleb+xyz+-TZ%3D123+%E2%8D%9DCOMMENT%0D%0A%5DCOLOR+OFF%0D%0A%29LIST+vars+%E2%8D%9DCOMMENT%0D%0A%0D%0A%E2%8D%9D+No+whitespace%0D%0A%5Dsampleb+23+-TZ%3D123%E2%8D%9DCOMMENT%0D%0A%5DCOLOR+OFF%0D%0A%29LIST+vars%E2%8D%9DCOMMENT""><img width=""576"" src=""https://cloud.githubusercontent.com/assets/2346707/14310326/b0aae5b6-fc24-11e5-865f-45b48e552d43.png"" alt=""Figure 2"" /></a>
### 3. Function/operator highlighting

The current grammar has virtually no recognition of user-defined functions or operators. Conversely, the new grammar does - and also highlights invalid arguments/operands:

<a href=""https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2F5X7kA5D0&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fvarious.apl&code=%E2%8D%9D+Operator%3A+Valid%0D%0A%E2%88%87R+%E2%86%90+X+%28LOP+OPERATOR+ROP%29+Y+%3BA%3BB%0D%0A%09R+%E2%86%90+X+%2B+Y%0D%0A%E2%88%87%0D%0A%0D%0A%E2%88%87R+%E2%86%90+%28LOP+OPERATOR+ROP%29+X+%3BA%3BB%0D%0A%09R+%E2%86%90+X+%2B+Y%0D%0A%E2%88%87%0D%0A%0D%0A%E2%8D%9D+Operator%3A+Invalid%0D%0A%E2%88%87R+%E2%86%90+X+%28LOP+OPERATOR+ROP%29+Y+%3BA%3BB%3B%0D%0A%09R+%E2%86%90+X+%2B+Y%0D%0A%E2%88%87%0D%0A%0D%0A%E2%88%87R+%E2%86%90+%28LOP+OPERATOR+ROP%29+Y+Invalid%3BB%3BR%3BU%3BH%3B%0D%0A%09R+%E2%86%90+X+%2B+Y%0D%0A%E2%88%87%0D%0A%0D%0A%E2%8D%9D+Axis+operators%0D%0A%E2%88%87+FUNCTION+%5BAXIS%5D+right%3BX%3BY%0D%0A%09%E2%8E%95%E2%86%90input%0D%0A%E2%88%87%0D%0A%0D%0A%E2%88%87+left+FUNCTION%5BAXIS+INVALID%5D+right%0D%0A%09%E2%8E%95%E2%86%90input%0D%0A%E2%88%87""><img width=""670"" src=""https://cloud.githubusercontent.com/assets/2346707/14310331/b3b70960-fc24-11e5-92fb-3f6d4ab82ec2.png"" alt=""Figure 3"" /></a>

You'll need to know APL to understand why they're being marked as invalid, but [here's a basic primer](http://help.dyalog.com/14.1/Content/Language/Defined%20Functions%20and%20Operators/Model%20Syntax.htm).
### 4. EOF sequences

GNU APL allows arbitrary content to be added after the terminating `)OFF` or `]NEXTFILE` commands, similar to Perl's `__END__` sequence. Anything following an EOF command shouldn't be highlighted as APL:

<a href=""https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2F5X7kA5D0&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fvarious.apl&code=%29OFF+%E2%8D%9D+End+of+APL+code%0D%0A%0D%0A%E2%8D%9D+Comment%0D%0A%E2%8E%95%E2%86%90%7B%E2%8D%B5%2F%E2%8D%A8~%7B%E2%8D%B5%E2%88%A8%E2%89%A0%5C%E2%8D%B5%7D%E2%8D%B5%E2%88%8A%27%3C%3E%27%7Dtxt%0D%0Alife%E2%86%90%7B%E2%86%911+%E2%8D%B5%E2%88%A8.%E2%88%A73+4%3D%2B%2F%2C%C2%AF1+0+1%E2%88%98.%E2%8A%96%C2%AF1+0+1%E2%88%98.%E2%8C%BD%E2%8A%82%E2%8D%B5%7D""><img width=""628"" src=""https://cloud.githubusercontent.com/assets/2346707/14310333/b6c230d0-fc24-11e5-8753-ad8d0868382e.png"" alt=""Figure 4"" /></a>

This is often used to include [licensing info](https://github.com/Alhadis/language-apl/blob/master/tests/toronto-toolkit.apl#L10350) or additional documentation with APL scripts.
### 5. Heredocs

GNU APL also allows [heredocs](https://github.com/search?utf8=%E2%9C%93&q=%E2%8E%95INP+language%3AAPL&type=Code&ref=searchresults) with arbitrary terminators, ideal for embedding HTML in CGI scripts:

<a href=""https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2F5X7kA5D0&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fheredocs.apl&code=text+%E2%86%90+%E2%8E%95INP+%22END-OF-HTML%22%0D%0A%3Cheader+id%3D%22top%22%3E%E2%8D%9D+Heading+%E2%8D%9D%3C%2Fheader%3E%0D%0Aasfdwger%3D%3D%3D%3D%3D+END-OF-HTML+%3D%3D%3D%3Dq3ewrfd..%3F""><img width=""632"" src=""https://cloud.githubusercontent.com/assets/2346707/14310337/ba6507bc-fc24-11e5-8063-fac4fc120b4f.png"" alt=""Figure 5"" /></a>

[Here're some examples](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=http%3A%2F%2Fpastebin.com%2Fraw%2F5X7kA5D0&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FAlhadis%2Flanguage-apl%2Fmaster%2Ftests%2Fheredocs.apl&code=text+%E2%86%90+%E2%8E%95INP+%22END-OF-HTML%22%0D%0A%3Cheader+id%3D%22top%22%3E%E2%8D%9D+Heading+%E2%8D%9D%3C%2Fheader%3E%0D%0Aasfdwger%3D%3D%3D%3D%3D+END-OF-HTML+%3D%3D%3D%3Dq3ewrfd..%3F) of heredocs enclosing various languages.
",Externals,1068,True,en
2936,"This returns Idris highlighting to GitHub.

/ cc https://github.com/idris-hackers/idris-sublime/issues/5
/ cc #2885 
",Internals,5,True,en
2935,,Externals,0,False,en
2934,"APKBUILD is a file containing ""recipes"" on how something should be built/compiled. It's used by APK, the Alpine Linux package manager.

/cc @ncopa
",Externals,0,True,en
2928,"The DM language has been in Linguist for a long time, but always used the C++ lexer.

@seiyria
",Externals,0,True,en
2927,"I asked about the license's inclusion in a [line note](https://github.com/github/linguist/commit/16a6d680c423b177787f58980d5241f3d6e83129#commitcomment-16910733), but it's probably more relevant to bring it up in the form of a pull request.

The [ISC license](https://en.wikipedia.org/wiki/ISC_license) is a permissive, OSI-approved free software license that's functionally identical to the MIT/Expat license. The only ""difference"" is the ISC license excludes legal clauses that're already covered by the [Berne Convention](https://en.wikipedia.org/wiki/Berne_Convention).

The ISC license is [recommended by OpenBSD](http://www.openbsd.org/policy.html), and is also the default license type of newly-created NPM modules. The terseness and straightforwardness of the clauses make it (in my opinion, anyway) a preferable alternative to the decidedly long-winded MIT license.

---

**TL;DR:** [Same](http://choosealicense.com/licenses/isc/) [shit](http://choosealicense.com/licenses/mit/), different TLA.

Basically, I was surprised when Linguist's tests rejected the addition of a grammar addition, stating that ISC wasn't on the license whitelist.
",Externals,39,True,en
2922,"Changelog: https://github.com/github/linguist/compare/v4.8.1...48828db8a9886f32acf35525f26bf0e103d184af

**Merged pull requests:**
- Fix protocol of Nix submodule's URL [#2921](https://github.com/github/linguist/pull/2921) ([@Alhadis](https://github.com/Alhadis))
- Add "".es"" to recognised ECMAScript extensions [#2920](https://github.com/github/linguist/pull/2920) ([@Alhadis](https://github.com/Alhadis))
- Adding back nix grammar [#2914](https://github.com/github/linguist/pull/2914) ([@arfon](https://github.com/arfon))
",Internals,53,True,en
2921,"While working on #2920, I noticed the [tests were failing](http://pastebin.com/VcwcrgVF) because one of the submodules didn't have a URL that used the HTTPS protocol. I checked the repository's recent commit history, and noticed [this was the culprit](https://github.com/github/linguist/commit/bd0f4f6f78).
",Externals,9,True,en
2920,"The usage of `.es` as a JavaScript file extension has grown in recent times, undoubtedly due to the influx of transpilers. However, GitHub currently misclassifies these files as Erlang scripts; this PR remedies that.
## The heuristic

I don't know a single word of Erlang, but it appears that `.es` files (""Erlang scripts"") are an interpreted form of the language which requires an author to define a routine named `main` in the source. From the [official documentation](http://erlang.org/doc/man/escript.html):

> An Erlang script file must always contain the function **main/1**. When the script is run, the `main/1` function will be called with a list of strings representing the arguments given to the script (not changed or interpreted in any way).

I deduced that Erlang scripts could be identified by `main([]) ->`, which is also illegal JavaScript.

I extended the heuristic to check for lines beginning with `%%`. While Erlang uses `%` to initiate a comment, the doubled form is also abundant. It's also the required form of passing arguments to the emulator. To quote the docs I linked to above:

> Such an argument line must start with `%%!` and the rest of the line will interpreted as arguments to the emulator.

While it's unlikely a JavaScript file would have a modulus operator at the start of a line, it isn't invalid syntax. For instance, this is legal JavaScript (albeit really weird):

``` js
let a = 2
% 1;
```
## Results

Not surprisingly, most search results for `.es` yielded files [localised](https://github.com/Alhadis/Linguist-Heuristics/tree/es/fixtures/Unrelated/Espa%C3%B1ol) in Spanish (esto es un buen lingüista, jajaja). All but two of the ~2,777 files collected from [search results](https://github.com/search?q=extension%3Aes+NOT+nothack&type=Code) were [correctly identified](https://github.com/Alhadis/Linguist-Heuristics/blob/es/results.txt) as either ECMAScript or Erlang:

**[App.2.es:](https://raw.githubusercontent.com/embedthis/ejscript/f85405f5c25a3335a9bf4f4a249e5f3eaf225081/samples/web/mvc-blog/blog/src/App.es)**

``` js
module App {
}
```

**[locale.js.es:](https://github.com/delsovalle/prometeus/blob/d79577ff8aee2b14053e3be9f18497363fe37d30/synoman/phpsrc/web/js/locale.js.es)**

```
_={""a"":""No se encuentra la página"",""b"":""Lo sentimos, no se encuentra la página que está buscando."",""c"":""Anterior""};
```

I don't think those two edge cases are really worth the trouble of bloating the heuristic for. For a start, the first one isn't even real JavaScript (but a mutated superset called [Embedthis Ejscript](https://github.com/embedthis/ejscript/)). As for the second, well, I'd be lying if I said I see something like that every day.
",Externals,64,False,en
2914,"/ cc #2885 
",Internals,4,True,en
2911,"Changelog: https://github.com/github/linguist/compare/v4.8.0...7501b82df1c2890822a74afa3a9ea3730db4d0dc

**Merged pull requests:**
- Adding grace grammar back in. [#2908](https://github.com/github/linguist/pull/2908) ([arfon](https://github.com/arfon))
- Add .clang-format as a YAML file [#2907](https://github.com/github/linguist/pull/2907) ([keplersj](https://github.com/keplersj))
- Add .vssettings to the list of XML files [#2906](https://github.com/github/linguist/pull/2906) ([jamesqo](https://github.com/jamesqo))
- Adding ATS grammar [#2905](https://github.com/github/linguist/pull/2905) ([arfon](https://github.com/arfon))
- Adding nest grammar back [#2903](https://github.com/github/linguist/pull/2903) ([arfon](https://github.com/arfon))
- Add App.config + NuGet.config to the XML file list [#2902](https://github.com/github/linguist/pull/2902) ([jamesqo](https://github.com/jamesqo))
- Adding back GDScript grammar [#2900](https://github.com/github/linguist/pull/2900) ([arfon](https://github.com/arfon))
- Add ReSharper's .dotsettings to the list of XML files [#2899](https://github.com/github/linguist/pull/2899) ([jamesqo](https://github.com/jamesqo))
- Adding back sourcepawn [#2898](https://github.com/github/linguist/pull/2898) ([arfon](https://github.com/arfon))
- Adding back Pig Latin grammar [#2897](https://github.com/github/linguist/pull/2897) ([arfon](https://github.com/arfon))
- Adding Logos grammar. [#2896](https://github.com/github/linguist/pull/2896) ([arfon](https://github.com/arfon))
- Adding back boo [#2895](https://github.com/github/linguist/pull/2895) ([arfon](https://github.com/arfon))
- Fix warnings [#2894](https://github.com/github/linguist/pull/2894) ([pchaigno](https://github.com/pchaigno))
- Adding back assembly grammar for object dumps [#2893](https://github.com/github/linguist/pull/2893) ([arfon](https://github.com/arfon))
- Bringing Monkey grammar back under MIT license [#2892](https://github.com/github/linguist/pull/2892) ([arfon](https://github.com/arfon))
- MIT license in package.json [#2891](https://github.com/github/linguist/pull/2891) ([pchaigno](https://github.com/pchaigno))
- Bringing back Assembly highlighting [#2887](https://github.com/github/linguist/pull/2887) ([arfon](https://github.com/arfon))
- Adding replacement grammar for Puppet [#2886](https://github.com/github/linguist/pull/2886) ([arfon](https://github.com/arfon))
- [WIP] extracting license information [#2884](https://github.com/github/linguist/pull/2884) ([arfon](https://github.com/arfon))
- Fix regex in .rpy disambiguate [#2883](https://github.com/github/linguist/pull/2883) ([williamd1k0](https://github.com/williamd1k0))
- Pawn TextMate-compatible grammar (take 2) [#2882](https://github.com/github/linguist/pull/2882) ([arfon](https://github.com/arfon))
- Add Terra support [#2875](https://github.com/github/linguist/pull/2875) ([arfon](https://github.com/arfon))
",Internals,208,True,en
2910,,Externals,0,False,en
2908,"/ cc #2885 
",Internals,4,True,en
2907,"According to [clang-format documentation](http://clang.llvm.org/docs/ClangFormatStyleOptions.html) the .clang-format file is a YAML file.

[Site-wide usage](https://github.com/search?utf8=%E2%9C%93&q=filename%3A.clang-format+NOT+nothack&type=Code&ref=searchresults)
",Externals,6,True,en
2906,"Yet another PR to add an XML file extension :smile:

Here's an example of a file that would benefit from this in [corefxlab](https://github.com/dotnet/corefxlab/blob/master/corefx.vssettings).

cc @arfon
",Externals,0,True,en
2905,"/ cc #2885
",Internals,4,True,en
2903,"/ cc #2885 
",Internals,4,True,en
2902,"#### Changes
- Files named `App.config` and `NuGet.config` have been added to the list of XML files.
#### Rationale
- There are [virtually no](https://github.com/search?utf8=%E2%9C%93&q=filename%3ANuGet.config+NOT+xml+NOT+config+NOT+settings+NOT+configuration+NOT+solution&type=Code&ref=searchresults) files on GitHub named `NuGet.config` that aren't XML.
- There are about [32k](https://github.com/search?utf8=%E2%9C%93&q=filename%3AApp.config+NOT+xml+NOT+version+NOT+configuration&type=Code&ref=searchresults) files named `App.config` that aren't related to .NET projects, and approximately [926k](https://github.com/search?utf8=%E2%9C%93&q=filename%3AApp.config&type=Code&ref=searchresults) that are.

cc: @arfon (sorry if I spammed your inbox haha :smile:)
",Externals,23,False,en
2900,"/ cc #2885
",Internals,4,True,en
2899,"Examples of where this would be useful: https://github.com/search?p=1&q=extension%3ADotSettings+xml&type=Code&utf8=%E2%9C%93
",Externals,7,True,en
2898,"/ cc #2885 
",Internals,4,True,en
2897,"/ cc #2885
",Internals,4,True,en
2896,"/ cc #2885
",Internals,4,True,en
2895,"/ cc #2885 
",Internals,4,True,en
2894,"This pull request fixes many warnings in tests.
Examples of these warnings can be seen in [recent Travis builds](https://travis-ci.org/github/linguist/jobs/117110750).

There are still a couple warnings I wasn't able to fix. In particular, `warning: setting Encoding.default_external` requires us to pass the external string encoding as an argument when calling Ruby. I'm not sure how to do that in tests.
",Externals,9,False,en
2893,"/ cc #2885 
",Internals,4,True,en
2892,"/ cc #2885 
",Internals,4,True,en
2891,"This pull request adds a `license` field in `package.json` to remove the npm warning in tests:
`npm WARN linguist No license field.`
",Externals,0,False,en
2887,"- [Example of highlighting](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FNessphoro%2Fsublimeassembly%2Fblob%2Fmaster%2FAssembly%2520x86.JSON-tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fgithub%2Flinguist%2Fblob%2Fmaster%2Fsamples%2FAssembly%2Flib.inc&code=)

/ cc https://github.com/github/linguist/issues/2885
",Internals,33,True,en
2886,"- [Lightshow example](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FrussCloak%2FSublimePuppet%2Fblob%2Fmaster%2FSyntaxes%2FPuppet.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Felastic%2Fpuppet-elasticsearch%2Fblob%2Fmaster%2Fmanifests%2Fconfig.pp&code=)

/ cc https://github.com/github/linguist/issues/2885
",Internals,27,True,en
2884,"This Pull Request is mainly an exercise in documentation - we're using the `Licensed` gem to 
extract the licenses of the grammars that Linguist depends upon and place them in 
`vendor/license/grammar/...`

Unfortunately as a result of this audit we've had to remove a number of grammars that don't 
have a permissive license that's compatible with Linguist including:
- https://github.com/Cykey/Sublime-Logos
- https://github.com/Red-Nova-Technologies/autoitv3-tmbundle
- https://github.com/Shammah/boo-sublime
- https://github.com/austinwagner/sublime-sourcepawn
- https://github.com/cdwilson/nesC.tmbundle
- https://github.com/gingerbeardman/monkey.tmbundle
- https://github.com/laughedelic/sublime-idris
- https://github.com/lunixbochs/x86-assembly-textmate-bundle
- https://github.com/nanoant/assembly.tmbundle
- https://github.com/puppet-textmate-bundle/puppet-textmate-bundle
- https://github.com/wmertens/sublime-nix
- https://github.com/steinwaywhw/ats-mode-sublimetext
- https://github.com/psicomante/CLIPS-sublime
- https://github.com/Siddley/Creole
- https://github.com/beefsack/GDScript-sublime
- https://github.com/zmthy/grace-tmbundle
- https://github.com/idleberg/InnoSetup-Sublime-Text
- https://github.com/mulander/oracle.tmbundle.git
- https://github.com/goblindegook/sublime-text-pig-latin
- https://github.com/tbuser/openscad.tmbundle
",Internals,3,False,en
2883,"I wrote the regex wrongly, matching `define` (which is not python) and not only `def`.
I'm sorry for the mistake. :pensive:
",Externals,0,False,en
2882,"Replaces #2512 
",Internals,4,True,en
2880,"[Full Changelog](https://github.com/github/linguist/compare/v4.7.6...HEAD)

**Merged pull requests:**
- Fix PLpgSQL heuristic rule [#2877](https://github.com/github/linguist/pull/2877) ([pchaigno](https://github.com/pchaigno))
- git-linguist: Print PWD [#2876](https://github.com/github/linguist/pull/2876) ([vmg](https://github.com/vmg))
- 2427 local [#2873](https://github.com/github/linguist/pull/2873) ([arfon](https://github.com/arfon))
- make .hlsl the primary extension for HLSL [#2870](https://github.com/github/linguist/pull/2870) ([kusma](https://github.com/kusma))
- Support for YAML .sublime-syntax extension [#2869](https://github.com/github/linguist/pull/2869) ([pchaigno](https://github.com/pchaigno))
- 2603 local [#2868](https://github.com/github/linguist/pull/2868) ([arfon](https://github.com/arfon))
- Classification of props file [#2866](https://github.com/github/linguist/pull/2866) ([jasonwilliams200OK](https://github.com/jasonwilliams200OK))
- Recognizing Jenkinsfile as Groovy source [#2861](https://github.com/github/linguist/pull/2861) ([jglick](https://github.com/jglick))
- Fix ""Ren'Py being detected as Python"" #2849 [#2858](https://github.com/github/linguist/pull/2858) ([williamd1k0](https://github.com/williamd1k0))
- Add BUCK filename to Python in languages.yml [#2857](https://github.com/github/linguist/pull/2857) ([Dominator008](https://github.com/Dominator008))
- Add support for HLSL [#2842](https://github.com/github/linguist/pull/2842) ([kusma](https://github.com/kusma))
- Move Linguist::Language.detect to Linguist.detect [#2341](https://github.com/github/linguist/pull/2341) ([bkeepers](https://github.com/bkeepers))
- Support for two Norwegian text extensions [#2146](https://github.com/github/linguist/pull/2146) ([pchaigno](https://github.com/pchaigno))
- Merge github-linguist-grammars into github-linguist [#1965](https://github.com/github/linguist/pull/1965) ([aroben](https://github.com/aroben))
",Internals,143,True,en
2877,"Fixes the PLpgSQL heuristic rule as discussed in #2384.
",Externals,4,True,en
2876,"Print the current directory when `git-linguist` is being ran outside of a Git directory.

We'll pick this up on the next release.

cc @arfon
",Internals,0,True,en
2875,"Replaces #2821
",Internals,4,True,en
2873,"Replaces #2427
",Internals,4,True,en
2870,"When I submitted the HLSL-language, I accidentally missed that the
first extension was the primary one (as is documented in the source
code, which I unfortunately missed), and instead alphabetized the
whole list.

The primary extension should be .hlsl, so let's remedy this.
",Externals,0,False,en
2869,"This pull request adds support for the YAML extension `.sublime-syntax` as discussed in #2850.
",Externals,4,True,en
2868,"Replaces #2603
",Internals,4,True,en
2866,"- Initially treat as XML
- Disambiguate from ini (key-value pair style with `=`)
- If the file is neither XML-style nor INI, classify as SQL

Fix #2852
",Externals,4,False,en
2861,"`Jenkinsfile` is the conventional name for a Groovy-syntax script containing build instructions for the Jenkins continuous integration server using the Pipeline feature. [Details](https://github.com/jenkinsci/workflow-plugin/blob/7d2004ea482418f84c3f221d3f55dff20e8ada44/TUTORIAL.md#creating-multibranch-projects) and [context](https://issues.jenkins-ci.org/browse/JENKINS-31152).

Look to be about a couple hundred [known files](https://github.com/search?utf8=%E2%9C%93&q=Jenkinsfile+in%3Apath&type=Code&ref=searchresults) out there. To date the trick for getting syntax highlighting has been to use `#!groovy` as [here](https://github.com/jenkinsci/pipeline-examples/blob/0a7aa6180e14fd17901a514c5e6bb356e416f41f/global-library-examples/global-function/Jenkinsfile#L1).

For my colleagues: @reviewbybees esp. @kohsuke who selected this filename.
",Externals,63,True,en
2858,"Fix issue #2849 
- Remove Ren'Py from Python group
- Add `.rpy` to Python + sample
- Add `.rpy` to `heuristics.rb`
- Fix in Ren'Py sample
",Externals,4,False,en
2857,"BUCK is the filename for the build files of the Facebook Buck build system. BUCK files are valid Python files.

Eg.:
  https://github.com/GerritCodeReview/gerrit/blob/master/BUCK

Also add a missing sample for Pants / Bazel BUILD files. They are also valid Python files.
",Externals,0,True,en
2856,"Changes since last release: https://github.com/github/linguist/compare/v4.7.5...54fab9eb4ed6a3a9bfa36d1c28aaff2aaeea51a8

**Merged pull requests:**
- Add .yap ext and yap interpreter for Prolog lang [#2851](https://github.com/github/linguist/pull/2851) ([@edechter](https://github.com/edechter))
- Add .bzl extension to Python in languages.yml [#2846](https://github.com/github/linguist/pull/2846) ([@Dominator008](https://github.com/Dominator008))
- add support for Uno [#2845](https://github.com/github/linguist/pull/2845) ([@kusma](https://github.com/kusma))
- Move HACKING.rst.txt to sample directory [#2844](https://github.com/github/linguist/pull/2844) ([@pchaigno](https://github.com/pchaigno))
- Makefile: Add Makefile.am and Makefile.in filenames [#2838](https://github.com/github/linguist/pull/2838) ([@scop](https://github.com/scop))
- Shell: Add shell-script alias for recognizing Emacs modelines [#2837](https://github.com/github/linguist/pull/2837) ([@scop](https://github.com/scop))
- Add CSV as data type to languages.yml [#2831](https://github.com/github/linguist/pull/2831) ([@FarbodSalamat-Zadeh](https://github.com/FarbodSalamat-Zadeh))
- Added support for the POV-Ray Scene Description Language. [#2803](https://github.com/github/linguist/pull/2803) ([@c-lipka](https://github.com/c-lipka))
",Internals,89,True,en
2851,"Support .yap extension commonly used with the YAP prolog compiler. Corresponding search results [here](https://github.com/search?utf8=%E2%9C%93&q=extension%3Ayap+NOT+notyap&type=Code&ref=searchresults)
",Externals,6,True,en
2846,".bzl is the extension for Skylark, a subset of Python that is used
to define build extensions for the Bazel build system.

Eg:
  https://github.com/bazelbuild/bazel/blob/master/tools/build_rules/closure/closure_js_binary.bzl
",Externals,0,False,en
2845,"Uno is a fast, native dialect of C#, that includes a lot of
specialized functionality for graphics programming.

https://www.fusetools.com/learn/uno
",Externals,0,False,en
2844,"This PR moves the sample file where it belongs :-)

/cc @arfon
",Externals,0,True,en
2843,"This is an update to https://github.com/github/linguist/pull/2620 that only treats `.go` files in `vendor` as generated.

I'm not a gopher, so one question I have about go 1.6: does it vendor non-`.go` files as well? If it does, then this won't work.

/cc @kr @rakyll @cespare @parkr @arfon 
",Internals,6,True,en
2842,"This adds support for DirectX HLSL language. Fixes issue #2841 
",Externals,4,True,en
2838,,Externals,0,False,en
2837,"Bunch of files that would benefit from this here: https://github.com/scop/bash-completion/tree/master/completions
",Externals,0,True,en
2836,"Changes since last release: https://github.com/github/linguist/compare/v4.7.4...bd95ac0beb4acfb68a505f0a1a5a40b6f00585ad

**Merged pull requests:**
- New grammar for Less [#2833](https://github.com/github/linguist/pull/2833) ([@pchaigno](https://github.com/pchaigno))
- Adding Perl6-specific grammar. [#2832](https://github.com/github/linguist/pull/2832) ([@arfon](https://github.com/arfon))
- Support for the YANG modeling language [#2827](https://github.com/github/linguist/pull/2827) ([@pchaigno](https://github.com/pchaigno))
- Add detection of GrammarKit-generated files [#2822](https://github.com/github/linguist/pull/2822) ([@AbigailBuccaneer](https://github.com/AbigailBuccaneer))
- Improved vim modeline detection [#2812](https://github.com/github/linguist/pull/2812) ([@chrisarcand](https://github.com/chrisarcand))
- Heuristic for Pod vs. Perl [#2811](https://github.com/github/linguist/pull/2811) ([@pchaigno](https://github.com/pchaigno))
- HTTPS links for submodules [#2808](https://github.com/github/linguist/pull/2808) ([@pchaigno](https://github.com/pchaigno))
- Add .xproj to list of XML file extensions [#2805](https://github.com/github/linguist/pull/2805) ([@jamesqo](https://github.com/jamesqo))
- support for leex (.xrl) / yecc (.yrl) files [#2797](https://github.com/github/linguist/pull/2797) ([@lpil](https://github.com/lpil))
- Add colors for some languages. [#2613](https://github.com/github/linguist/pull/2613) ([@ismailarilik](https://github.com/ismailarilik))
",Internals,104,True,en
2833,"Following the discussion in #2829, this pull request changes the grammar for Less.
- [Example in Lightshow with old grammar](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.css.less&grammar_url=&grammar_text=&code_source=from-text&code_url=&code=%40import+%28reference%29+%22theme%22%3B%0D%0Ahtml%0D%0A%7B%0D%0A++++font-family%3A+%22Source+Sans+pro%22%2C+courier%2C+serif%3B%0D%0A++++text-overflow%3A+ellipsis%3B%0D%0A++++background%3A+%230F0F0F+url%28%22%40%7Bvariable%7D%2Ftest.png%22%29%3B%0D%0A%7D%0D%0Acircle%0D%0A%7B%0D%0A++++fill%3A+white%3B%0D%0A++++stroke%3A+%40blue-light%3B%0D%0A++++background%3A+rgba%280%2C+0%2C+0%2C+1%29%3B%0D%0A++++border%3A+5px+solid+currentColor%3B%0D%0A%7D%0D%0Aspan%3Afirst-of-type%0D%0A%7B%0D%0A++++font-weight%3A+bold%3B%0D%0A%0D%0A++++custom-element%3Ahover+a%2C%0D%0A++++custom-element%3Ahover+%7E+a%3Afirst-child%2C%0D%0A++++span%3Afirst-of-type%0D%0A++++%7B%0D%0A++++++++font-weight%3A+bold%3B%0D%0A++++++++span%3Afirst-of-type%0D%0A++++++++%7B%0D%0A++++++++++++font-weight%3A+bold%3B%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A++++h5%3Afirst-of-type%0D%0A++++%7B%0D%0A++++++++font-weight%3A+bold%3B%0D%0A++++%7D%0D%0A%7D)
- [Example in Lightshow with new grammar](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fatom%2Flanguage-less%2Fmaster%2Fgrammars%2Fless.cson&grammar_text=&code_source=from-text&code_url=&code=%40import+%28reference%29+%22theme%22%3B%0D%0Ahtml%0D%0A%7B%0D%0A++++font-family%3A+%22Source+Sans+pro%22%2C+courier%2C+serif%3B%0D%0A++++text-overflow%3A+ellipsis%3B%0D%0A++++background%3A+%230F0F0F+url%28%22%40%7Bvariable%7D%2Ftest.png%22%29%3B%0D%0A%7D%0D%0Acircle%0D%0A%7B%0D%0A++++fill%3A+white%3B%0D%0A++++stroke%3A+%40blue-light%3B%0D%0A++++background%3A+rgba%280%2C+0%2C+0%2C+1%29%3B%0D%0A++++border%3A+5px+solid+currentColor%3B%0D%0A%7D%0D%0Aspan%3Afirst-of-type%0D%0A%7B%0D%0A++++font-weight%3A+bold%3B%0D%0A%0D%0A++++custom-element%3Ahover+a%2C%0D%0A++++custom-element%3Ahover+%7E+a%3Afirst-child%2C%0D%0A++++span%3Afirst-of-type%0D%0A++++%7B%0D%0A++++++++font-weight%3A+bold%3B%0D%0A++++++++span%3Afirst-of-type%0D%0A++++++++%7B%0D%0A++++++++++++font-weight%3A+bold%3B%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A++++h5%3Afirst-of-type%0D%0A++++%7B%0D%0A++++++++font-weight%3A+bold%3B%0D%0A++++%7D%0D%0A%7D)

Thanks @50Wliu!
",Externals,340,False,en
2832,"This Pull Request adds a Perl6-specific grammar (https://github.com/MadcapJake/language-perl6fe) to hopefully fix https://github.com/github/linguist/issues/2830.
",Internals,6,True,en
2831,"I've added CSV as a 'language' with the type `data`. I think it should be shown when searching files, as I'm sure others also find themselves searching for a particular string that may be in a CSV file. I've added CSV with the primary extension `.csv`, but also `.txt`.
",Externals,0,True,en
2827,"This pull request adds support for the YANG modeling language.
There are [around 11,600 `.yang` files on GitHub](https://github.com/search?o=desc&q=extension%3Ayang+NOT+dkfjdkfdkfn&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93).
I used [DzonyKalafut/language-yang](https://github.com/DzonyKalafut/language-yang) as the grammar. [Here is an example of the result in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FDzonyKalafut%2Flanguage-yang%2Fblob%2Fmaster%2Fgrammars%2Fyang.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fopendaylight%2Fsfc%2Fblob%2F98b276a1a125067e0223ae53ef846a4e399d1de3%2Fsfclisp%2Fsrc%2Fmain%2Fyang%2Fsfc-lisp-impl.yang&code=).
",Externals,64,False,en
2822,"GrammarKit is a plugin by JetBrains for creating custom language plugins for JetBrains IDEs (such as IntelliJ, RubyMine, CLion and more). It defines a BNF parser language which can be used to generate a parser in Java, and it also integrates JFLex for generating a lexer in Java.

Both of these generated Java files can be recognised by a comment on the first line of the file, and so classifying them as generated is trivial.
",Externals,0,True,en
2812,"TLDR: This greatly increases the flexibility of vim modeline detection to manually set the language of a file.

Fixes #2789. In vim there are two forms of modelines:

```
[text]{white}{vi:|vim:|ex:}[white]{options}
examples: 'vim: syntax=perl', 'ex: filetype=ruby'
```

-and-

```
[text]{white}{vi:|vim:|Vim:|ex:}[white]se[t] {options}:[text]
examples: 'vim set syntax=perl:', 'Vim: se ft=ruby:'
```

As you can see, there are many combinations. These changes should allow most combinations to be used. The two most important additions are the use of the keyword 'syntax', as well as the addition of the first form (you now no longer need to use the keyword 'set' with a colon at the end). The use of first form with 'syntax' is [very, very common across GitHub](https://github.com/search?l=ruby&q=vim%3A+syntax%3D&ref=searchresults&type=Code&utf8=%E2%9C%93)
",Externals,11,True,en
2811,"Currently, all `.pod` are rendered via [markup](https://github.com/github/markup) as Pod files. [Most of them](https://github.com/search?utf8=%E2%9C%93&q=extension%3Apod+NOT+dfdgfgfvffg) are, however, (incorrectly) recognized as Perl by Linguist. With github/markup#537 Markup will rely on Linguist to detect the language of files to render and this situation will become problematic.

This pull request adds a new heuristic rule for `.pod` files. If they contain any Pod syntax they are directly classified as Pod files. Files without any Pod syntax are classified as Perl files.
- `.pod` files without any Pod syntax will be highlighted as Perl and counted in statistics.
- Other `.pod` files will be rendered via Markup and won't be counted in statistics.

An alternate solution would be to recognize all `.pod` files as Pod (since they're not supposed to contain executable code but only documentation). I chose to keep `.pod` as a Perl extension because there are still [`.pod` files with only Perl code](https://github.com/search?p=1&q=extension%3Apod+use+strict&type=Code&utf8=%E2%9C%93).
",Externals,16,True,en
2809,"Changes since last release https://github.com/github/linguist/compare/v4.7.3...HEAD

**Merged pull requests:**
- Support .rs.in as a file extension for Rust files. [#2807](https://github.com/github/linguist/pull/2807) ([mrmonday](https://github.com/mrmonday))
- [UPDATED] Switch to a different (and better) grammar for Inform 7 source code [#2800](https://github.com/github/linguist/pull/2800) ([arfon](https://github.com/arfon))
- MagicPython [#2796](https://github.com/github/linguist/pull/2796) ([arfon](https://github.com/arfon))
- Updated copyright to 2016 [#2792](https://github.com/github/linguist/pull/2792) ([aqnouch](https://github.com/aqnouch))
- Update PureScript submodule (moved repo, grammar tweak) [#2788](https://github.com/github/linguist/pull/2788) ([nwolverson](https://github.com/nwolverson))
- Add stan extension [#2783](https://github.com/github/linguist/pull/2783) ([jrnold](https://github.com/jrnold))
- Reorder Perl heuristic rules [#2782](https://github.com/github/linguist/pull/2782) ([pchaigno](https://github.com/pchaigno))
- New extensions for consistency with Markup [#2778](https://github.com/github/linguist/pull/2778) ([pchaigno](https://github.com/pchaigno))
- minor code improvements [#2776](https://github.com/github/linguist/pull/2776) ([humzashah](https://github.com/humzashah))
- Remove copypasta artifact. [#2772](https://github.com/github/linguist/pull/2772) ([ibnfirnas](https://github.com/ibnfirnas))
- Add mathematica unit test file extension [#2771](https://github.com/github/linguist/pull/2771) ([ibnfirnas](https://github.com/ibnfirnas))
- Add Ren'Py language and grammars [#2768](https://github.com/github/linguist/pull/2768) ([williamd1k0](https://github.com/williamd1k0))
- Catch `ENOENT` in `clear\_cache` [#2766](https://github.com/github/linguist/pull/2766) ([piki](https://github.com/piki))
",Internals,116,True,en
2808,"This pull request changes three links to submodules that were previously using SSH links.
As reported in #2801, users without an SSH key registered on GitHub will fail to clone submodules with an SSH link.

~~This is still missing a test to make sure we don't add submodules with SSH links again.~~
Working on that.
",Externals,4,False,en
2807,"When using syntax extensions in stable or beta Rust channels using the syntex package, it is common to use the file extension .rs.in for the source file, and .rs for the generated file.
",Externals,0,True,en
2805,"- `.props` is a VS property file that's formatted in XML. [Sample](https://github.com/dotnet/corefx/blob/master/dir.props).
- `.xproj` is the new ASP.NET 5/DNX file that's used to manage a project (similar to csproj). [Sample](https://github.com/ufcpp/UfcppSample/blob/master/Chapters/Resource/ClassOrStruct/ClassOrStruct.xproj).
",Externals,1,False,en
2803,"The POV-Ray Scene Description Language, or POV-Ray SDL for short, is the scripting language used to describe scenes for the POV-Ray raytracer.

Scenes written in this language are traditionally stored across multiple files, with a main file carrying the `.pov` extension referencing multiple _include files_ carrying the `.inc` extension.

Repositories using POV-Ray SDL already number in the tens of thousands for both extensions:

https://github.com/search?utf8=%E2%9C%93&q=mesh+OR+mesh2+OR+sphere+OR+object+OR+texture+extension%3Apov&type=Code&ref=searchresults

https://github.com/search?utf8=%E2%9C%93&q=mesh+OR+mesh2+OR+sphere+OR+object+OR+texture+extension%3Ainc&type=Code&ref=searchresults

The use of the `.pov` extension for POV-Ray SDL is currently uncontested.

The use of the `.inc` extension for POV-Ray SDL clashes with its use for the following languages:
- Assembly
- C++
- HTML
- Makefile (`Makefile.inc`)
- PHP
- Pascal
- SQL
- SourcePawn

From a cursory examination of random files reported by the above query for `.inc` files, about 3.0 million POV-Ray SDL files are currently misclassified as PHP, and a further 0.1 million as C++. Misclassification as SourcePawn, Assembly, Pascal or HTML can be demonstrated, but is rare. So far there are no indications of misclassification as Makefile or SQL, the few corresponding files matching the query seem to be properly classified.

As for the testing of the Bayesian classifier required by the contribution guidelines, I would appreciate any assistance you can give, as I am unfamiliar with the linguist project.
",Externals,18,True,en
2800,"Replaces #2794
",Internals,4,True,en
2797,"leex (http://www.erlang.org/doc/man/leex.html) is a regular expression based
lexical analyzer generator for Erlang, similar to lex or flex.

yecc (http://www.erlang.org/doc/man/yecc.html) is an LALR-1 parser generator
for Erlang, similar to yacc. Takes a BNF grammar definition as input, and
produces Erlang code for a parser.

It'd be great to have these understood by github. Is there anything else I need
to do ? :)
",Externals,1,False,en
2796,"Replaces https://github.com/github/linguist/pull/2703
",Internals,4,True,en
2794,"The current grammar for Inform 7 source (https://github.com/PogiNate/Sublime-Inform) has some bugs. I've just posted a new grammar (https://github.com/erkyrath/language-inform7) which fixes nearly all of these.

I've extended the files in ""samples/Inform 7"" to show off the new capabilities. Notable fixes: handles nested comments correctly; handles Inform 6 inclusions; handles the documentation block at the end of an .i7x file.

This pull request covers the updated sample files and switching to the new grammar.
",Externals,5,True,en
2792,,Externals,0,False,en
2788,"Updated grammar to support triple-quoted strings properly:
https://github.com/purescript-contrib/atom-language-purescript/commit/0c53f8162e40f2942d3df53c928c8ce597be3e12

atom-language-purescript repo has been moved to purescript-contrib org,
update the URL.
",Externals,26,False,en
2783,"Add support to recognize Stan model files (extension `.stan`). [Stan](https://github.com/stan-dev/stan/) is a probabilistic programming language. The extension `.stan` does not conflict with any existing extensions in `languages.yml`. Here is the relevant search: https://github.com/search?utf8=%E2%9C%93&q=extension%3Astan+NOT+nothack&type=Code&ref=searchresults
",Externals,6,True,en
2782,"This pull request fixes #2781 and mitigate the issue of Perl miss-detections.
I reordered heuristic rules by accuracy. Because of the `if/elsif` structure, I think it makes sense to place the rule in which we are most confident first.
",Externals,4,False,en
2778,"This pull request adds the `.wiki` file extension to Mediawiki.
There are [around 373,000 `.wiki` files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Awiki+NOT+dkfjkfdjkd).

These files are [already recognized and rendered](https://github.com/github/markup#markups) as Mediawiki files by github/markup. This change would make Linguist consistent with Markup (in order to [use Linguist as the detection engine for Markup](https://github.com/github/markup/pull/537) in a second time).

EDIT: I added `.rst.txt` and `.rest.txt` for reStructuredText since they follow the same logic, ie. they're already recognized by github/markup.
",Externals,15,False,en
2776,"Improved an instance of `if/else` conditions and removed usage of `attr` as a variable.
",Externals,0,True,en
2773,"Hi there!

I would like to add 1C:Enterprise 8 (BSL) language.
1C:Enterprise is a very commonly used platform for automating a company’s financial and wider operational activities in CIS.  
Official site (english version): http://1c-dn.com/1c_enterprise/what_is_1c_enterprise/
Russian version: http://v8.1c.ru/

As a grammar i used [this](https://github.com/xDrivenDevelopment/atom-language-1c-bsl) Atom package developed by me as a part of [xDrivenDevelopment community](https://github.com/xDrivenDevelopment).

1C:Enterprise uses many file extensions. The main ones are `.bsl` for modules and `.xml` for metadata and config-stuff (actually it's an XML files). Those extensions were introdused this autumn, so it's not so much search results (so far) [link](https://github.com/search?l=&q=%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D0%B0+extension%3A.bsl&ref=advsearch&type=Code&utf8=%E2%9C%93), but the number of repos will grow fast.

`.os` extenstion used by external scripts written in 1C (BSL) language as part of `OneScript` project (no english link, sorry. [russian one](http://oscript.io/)). 

Samples are included for bsl and os.
",Externals,37,True,en
2772,,Externals,0,False,en
2771,"#### Usage in the wild
- GitHub search: https://github.com/search?utf8=%E2%9C%93&q=%22Test%5B%22+OR+%22TestSuite%5B%22+extension%3Amt&type=Code&ref=advsearch&l=&l=
- Google search of GitHub.com: https://www.google.im/search?q=%22Test%5B%22+OR+%22TestSuite%5B%22+filetype:mt+site:github.com
",Externals,26,False,en
2768,"Hi! I would like to add the _Ren'Py_ language, a programming language derived from Python utilized by a game engine with the same name. _Official site: http://www.renpy.org/_
At first i just wanted to ask to add the `.rpy` extension to Python's scope, but as there are some notable differences i decided to add the grammars file too, that i made myself.
I have some questions before merging:
- I left the language in the Python group (`group: Python`), but it has a different scope so i am not sure if i it should left it that way.
- I would like to know if the changes are sufficient for the language to show on Github's repository detector.

Link of the search using the extension `.rpy`: https://github.com/search?utf8=%E2%9C%93&q=extension%3Arpy+NOT+nothack

I hope everything is under the parameters of ""CONTRIBUTING.md"", thanks! :laughing: 
",Externals,6,False,en
2766,"There's no need for `clear_cache` to fail if the cache doesn't exist,
either because we call `clear_cache` twice or because no cache was
previously written on this particular repo.

/cc @vmg, who wrote `bin/git-linguist`
",Internals,0,False,en
2765,"Changes since last release: https://github.com/github/linguist/compare/v4.7.2...d72114083bb64daf1c16202dc2daeb67643a435e
",Internals,28,True,en
2763,"Replaces #2746 

/ cc @marceloramires 
",Internals,4,True,en
2759,"[Click](http://www.read.cs.ucla.edu/click/docs/language) is a configuration language for the Click modular router.
There are [around 5,500 `.click` files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aclick+NOT+djfhdfhdkfj). I quickly went through these files and they all seem to be Click files. There are at least 138 users of the Click language with 170 repositories.

I used [this Atom grammar](https://github.com/stenverbois/language-click) for syntax highlighting. A possible alternative is [drbarrett/click-sublime](https://github.com/drbarrett/click-sublime):
- [stenverbois/language-click](https://github.com/stenverbois/language-click): [example in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fstenverbois%2Flanguage-click%2Fblob%2Fmaster%2Fgrammars%2Fclick.cson&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fpchaigno%2Flinguist%2Fblob%2Fclick%2Fsamples%2FClick%2Fthomer-nat.click&code=)
- [drbarrett/click-sublime](https://github.com/drbarrett/click-sublime): [example in Ligthshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fdrbarrett%2Fclick-sublime%2Fblob%2Fmaster%2Fclick.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fpchaigno%2Flinguist%2Fblob%2Fclick%2Fsamples%2FClick%2Fthomer-nat.click&code=)

The color comes from this logo (grey):
![Click modular router logo](http://read.cs.ucla.edu/click/_media/click-logo.gif)
",Externals,63,False,en
2758,"Replaces #2667 
",Internals,4,True,en
2757,"Since Octave is a clone of Matlab, the syntax is exactly the same
and hence it is desirable for highlighting to be exactly the same
as well.
Adding octave as an alias for Matlab will trivially provide support
for highlighting Octave code, and will ensure the two languages
always use the same syntax highlighting rules.

Here is [how much Octave code there is on GitHub](https://github.com/search?l=&q=octave+language%3AMatlab&ref=advsearch&type=Code&utf8=%E2%9C%93).
",Externals,6,False,en
2755,"Fixes https://github.com/github/linguist/issues/2754
",Internals,4,True,en
2749,"This PR adds support for MAXScript, the built-in scripting language for [3ds Max](https://en.wikipedia.org/wiki/Autodesk_3ds_Max).
## Usage

MAXScript isn't exactly kicking JavaScript in terms of popularity, to say the least, but there's enough in-the-wild usage to warrant the language's inclusion on GitHub:
- [extension:ms fn](https://github.com/search?q=extension%3Ams+fn) (~6,610 results)
- [extension:ms function](https://github.com/search?q=extension%3Ams+function) (~13,470 results)

[ScriptSpot](http://www.scriptspot.com/) has been a well-known and popular resource for MAXScripts since at [least 2000](http://www.scriptspot.com/3ds-max/plugins/maxscribe), although the site's maintenance appears to have declined sharply in recent years. It's probably as good a time as any to introduce formal support for MAXScript on GitHub, which may encourage more MAXScripters to upload/share their work.
## Heuristic modifications

MAXScript already offers a `move` function, so we can't rely on the current heuristic of identifying GAS by the presence of a `move` command.

My initial approach was to check for Assembly-like statements like the following, since it'd be a syntax error in MAXScript:

```
.LGCOMMAND
    .now
    .return
```

However, because of MAXScript's fluidity, it's unreasonable to assume lengthy statements won't be broken across multiple lines:

```
    value = colossal_plugin_struct_thing \
        .calculate this mumbo:#jumbo

    -- That has the same effect as writing this:
    value = colossal_plugin_struct_thing.calculate this mumbo:#jumbo
```

In other words, simply checking `\n\s*\.[A-Za-z]` isn't good enough; we need to account for things like escaped line-breaks and string literals/comments:

``` rb
data.gsub(/""([^\\""]|\\.)*""|'([^\\']|\\.)*'/, """").gsub(/\\\s*(?:--.*)?\n/, ""\n"")
```

This might be slight overkill, but it irons out any potential for misclassification.
## Performance

I took the time to analyse the performance of different heuristics when run against a [repository of considerable size](https://github.com/Alhadis/Linguist-Heuristics-MS) (15,609 files, 1.4 GiBs). I've averaged the speed results below, but the full stats can be [viewed here](http://pastebin.com/EmLwT0xU) for anybody who's curious.
### Original/Current `.ms` Heuristic

```
/((^|\s)move?[. ])|\.(include|globa?l)\s/.match(data)

Average speed (10 runs):
    real    39.8s
    user    38.9869s
    sys     0.8023s
```
### Amended Heuristic

```
/(?<!\S)\.(include|globa?l)\s/.match(data) || 
    /(?<!\/\*)(\A|\n)\s*\.[A-Za-z]/.match(data.gsub(/""([^\\""]|\\.)*""|'([^\\']|\\.)*'|\\\s*(?:--.*)?\n/, """"))

Average speed (10 runs):
    real    41.3077s
    user    40.3206s
    sys     0.9744s
```
### Earlier variations:

These are potentially slightly faster, but offer a little less accuracy:

```
/(?<!\S)\.(include|globa?l)\s/.match(data) ||
    /(?<!\/\*)(\A|\n)\s*\.[A-Za-z]/.match(data.sub(/""([^\\""]|\\.)*""|'([^\\']|\\.)*'/, """"))

Average speed (10 runs):
    real    40.0s
    user    39.1899s
    sys     0.7947s
```

```
/(?<!\S)\.(include|globa?l)\s/.match(data) || /(?<!\/\*)(\A|\n)\s*\.[A-Za-z]/.match(data)

Average speed (10 runs):
    real    38.9172s
    user    38.1532s
    sys     0.7561s
```
",Externals,96,False,en
2741,"Changes since last release: https://github.com/github/linguist/compare/v4.7.1...48dfdd2dfe55f6d2ce3b38b1f89666eca376a4bc

**Merged pull requests:**
- add jquery.fancybox.css to vendor list [#2736](https://github.com/github/linguist/pull/2736) ([@ppwwyyxx](https://github.com/ppwwyyxx))
- .cake [#2733](https://github.com/github/linguist/pull/2733) ([@arfon](https://github.com/arfon))
- Change Scala language color to Scala language's main color [#2731](https://github.com/github/linguist/pull/2731) ([@soc](https://github.com/soc))
- Recognise END statement in FORTRAN files. [#2729](https://github.com/github/linguist/pull/2729) (@[larsbrinkhoff](https://github.com/larsbrinkhoff))
- Add new .eam.fs sample for Formatted. [#2728](https://github.com/github/linguist/pull/2728) ([@larsbrinkhoff](https://github.com/larsbrinkhoff))
- Detect Pickle data dumps (.p, .pkl, .pickle) [#2655](https://github.com/github/linguist/pull/2655) ([@iblech](https://github.com/iblech))
",Internals,71,True,en
2736,"fancybox has both js and css
",Externals,0,True,en
2735,"I recently converted the Oracle text mate bundle [[1](https://github.com/mulander/oracle.tmbundle)] to an Atom grammar [[2](https://atom.io/packages/language-oracle)]. As such, I thought it would be good to also bring all the related extensions that have been introduced, into linguist, for the Oracle PL/SQL language.

Below is the list of extensions identified along with the number of results when searching that extension in GitHub with the string `create or replace` which is common in any database object.
- bdy - 732 entries [[3](https://github.com/search?p=1&q=%22create+or+replace%22+extension%3Abdy&ref=searchresults&type=Code&utf8=%E2%9C%93)]
- spc - 748 entries [[4](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Aspc&type=Code&ref=searchresults)]
- trg - 1489 entries [[5](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Atrg&type=Code&ref=searchresults)]
- tps - 193 entries [[6](https://github.com/search?p=19&q=%22create+or+replace%22+extension%3Atps&ref=searchresults&type=Code&utf8=%E2%9C%93)]
- vw - 1317 entries [[7](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Avw&type=Code&ref=searchresults)]
- fnc - 654 entries [[8](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Afnc&type=Code&ref=searchresults)]

The extensions `ddl` and `prc` both with an existing mapping to `SQL`, but I feel should also have cases where they are mapped to PL/SQL - it seems `create`, `replace` for example aren't syntax highlighted in the phrase `create or replace`. Example case - https://github.com/gordynor/Demo/blob/0ddb72599c26b935d5731cf2d5e9680f6ac73c5a/sql/test.prc
- ddl - 417 entries [[9](https://github.com/search?p=41&q=%22create+or+replace%22+extension%3Addl&ref=searchresults&type=Code&utf8=%E2%9C%93)].
- prc - 21777 entries [[10](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Aprc&type=Code&ref=searchresults)]

I added opposing samples in the samples directory for `prc` and `ddl` which contain a `create or replace` statement. https://github.com/tschf/linguist/tree/master/samples/PLSQL. Is this sufficient?

The other extension added to the grammar was `dml`. Upon searching with phrases like `create or replace` (only 5 code files - expected to be low, since it's DML) or `insert into` (still only 99 code entries). As such left this one out.

The contributing guide states that extensions should be in use in hundreds of repositories, so I'm not sure if the above analysis means the majority of these extensions fail that requirement or not.

Also, the contributing guidelines mention about testing the performance of the Bayesian classifier. I wasn't really sure where to begin with this?
",Externals,152,True,en
2733,"Replaces https://github.com/github/linguist/pull/2707
",Internals,4,True,en
2731,,Externals,0,False,en
2729,"This adds the `END` statement to the Fortran/Forth heuristic.

Also allows Fortran comments `CCC` as seen here: https://github.com/search?q=language%3Afortran+ccc&type=Code

Fixes bad detection of these files:
https://github.com/jeiros/FORTRAN_course/search?l=forth
",Externals,1,True,en
2728,"Apparently, there are many `.fs` files mostly filled with numbers.  Currently, they are detected as Forth.

https://github.com/lammps/lammps/search?q=extension%3Afs (plenty of [copies](https://github.com/search?q=%22LAMMPS+software%22+in%3Areadme))
https://github.com/lmhale99/iprPy/search?q=extension%3Afs

This adds a sample to the Formatted language, which corrects the language detection.
",Externals,9,True,en
2722,"Changes since `v4.7.0` https://github.com/github/linguist/compare/v4.7.0...01d05d1d4eba13a5b37762be607973aee31dd4b7

**Merged pull requests:**
- Fetch libicu via Travis, switch back to container-based [#2718](https://github.com/github/linguist/pull/2718) ([@meatballhat](https://github.com/meatballhat))
- Add SuperCollider grammar [#2717](https://github.com/github/linguist/pull/2717) ([@meatballhat](https://github.com/meatballhat))
- Use negative lookbehind when tokenizing string literals [#2716](https://github.com/github/linguist/pull/2716) ([@aroben](https://github.com/aroben))
- Remove mentions of treatment of vendored files in diffs [#2714](https://github.com/github/linguist/pull/2714) ([@aroben](https://github.com/aroben))
- Support for JSCAD files [#2712](https://github.com/github/linguist/pull/2712) ([@matiasinsaurralde](https://github.com/matiasinsaurralde))
- adding csl as an extension for XML, included sample [#2706](https://github.com/github/linguist/pull/2706) ([@redroot](https://github.com/redroot))
- Dropping support for Ruby 1.9.3 [#2702](https://github.com/github/linguist/pull/2702) ([@arfon](https://github.com/arfon))
- Django as an alias for HTML+Django [#2700](https://github.com/github/linguist/pull/2700) ([@pchaigno](https://github.com/pchaigno))
- Change D color to match the website [#2698](https://github.com/github/linguist/pull/2698) ([@phase](https://github.com/phase))
- Upgrade to licensee 6 [#2690](https://github.com/github/linguist/pull/2690) ([@bkeepers](https://github.com/bkeepers))
- Add Pony language [#2600](https://github.com/github/linguist/pull/2600) ([@manveru](https://github.com/manveru))
",Internals,122,True,en
2718,"This is a test.  I don't understand the details of how the `bundle config
build.charlock_holmes` bit works/fails, so the intent here is to get a PR posted
for purposes of getting feedback via the full Travis machinery.
",Externals,0,False,en
2717,"plus a few minor language support updates including:
- recognize `sclang` and `scsynth` interpreters
- set `tm_scope: source.supercollider`
- reorder extensions so that `.sc` is primary
",Externals,0,False,en
2716,"This can double the speed of tokenizing large RTF files that use `\'hh` escape sequences.

/cc @josh @vmg @github/linguist 
",Internals,0,True,en
2714,"Vendored files are treated just like any other files when diffing on github.com.

/cc @github/linguist 
",Internals,0,True,en
2712,"[Github search results](https://github.com/search?utf8=%E2%9C%93&q=extension%3Ajscad+NOT+qqqqqq&type=Code&ref=searchresults) for .jscad files.

More information:
http://openjscad.org/
",Externals,6,True,en
2706,"Examples in the wild: https://github.com/search?utf8=%E2%9C%93&q=extension%3Acsl+NOT+nothack&type=Code&ref=searchresults

Documentation: http://docs.citationstyles.org/en/stable/specification.html#xml-declaration

Any questions or if I haven't added enough please let me now
",Externals,6,True,en
2702,"Official support for Ruby 1.9.3 ended in [February this year](https://www.ruby-lang.org/en/news/2015/02/23/support-for-ruby-1-9-3-has-ended/) and some of our dependencies require [2.0.0 or greater](https://github.com/github/linguist/pull/2690).

Time to :wave: to Ruby 1.9.3 support.
",Internals,24,True,en
2700,"This pull request adds `django` as an alias for `HTML+Django`.
Discussed in #2695.
",Externals,4,False,en
2698,"The original yellow color doesn't fit D very well, and it looks an awful lot like the color for JavaScript. This changes it to the color used on the website's sidebar, a nice dark maroon: http://www.colorpicker.com/2e2324
",Externals,5,True,en
2696,"Changes since last release: https://github.com/github/linguist/compare/v4.6.4...5d08605aef5c7c24e9e7e2e6ce9444de6a636faf

Pull requests:
- Memory blob [#2694](https://github.com/github/linguist/pull/2694) ([arfon](https://github.com/arfon))
- Add FreeMarker syntax highlighting [#2689](https://github.com/github/linguist/pull/2689) ([edendramis](https://github.com/edendramis))
- Support for Metal language [#2686](https://github.com/github/linguist/pull/2686) ([pchaigno](https://github.com/pchaigno))
- Add EEx (Embedded Elixir) [#2684](https://github.com/github/linguist/pull/2684) ([jeffkreeftmeijer](https://github.com/jeffkreeftmeijer))
- Correct typo (""Any information you [c]an add"") [#2683](https://github.com/github/linguist/pull/2683) ([hipikat](https://github.com/hipikat))
- Add .brd extension for KiCad [#2681](https://github.com/github/linguist/pull/2681) ([miek](https://github.com/miek))
- The Crystal Grammar repository has moved. [#2680](https://github.com/github/linguist/pull/2680) ([kepler0](https://github.com/kepler0))
- Support for files generated by Racc. [#2676](https://github.com/github/linguist/pull/2676) ([lucky](https://github.com/lucky))
- Add .phps extension for PHP [#2675](https://github.com/github/linguist/pull/2675) ([fbonzon](https://github.com/fbonzon))
",Internals,99,True,en
2694,"Supersedes https://github.com/github/linguist/pull/2497 
",Internals,4,True,en
2690,"This upgrades to [licensee 6.0.0b1](https://github.com/benbalter/licensee/releases/tag/v6.0.0b1). The only change appears to be that the license of the factor grammar is now properly detected.

/cc @benbalter @vmg 
",Internals,8,True,en
2689,"FreeMarker is a very popular Java templating language. Here are some ""in the wild"" usages: https://github.com/search?q=%23ftl&ref=searchresults&type=Code&utf8=%E2%9C%93

FreeMarker docs: http://freemarker.org/docs/index.html

I'll be updating the TextMate bundle with the newest specs, but this should suffice for now.
",Externals,7,True,en
2686,"This pull request adds support for the Metal language as discussed in #2679.
There are [around 1,000 Metal files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Ametal+fragment+OR+vertex&type=Code&ref=searchresults) on GitHub.
",Externals,14,False,en
2684,"EEx is embedded Elixir: http://elixir-lang.org/docs/v1.0/eex/. Here's
some in-the-wild usage on Github: https://github.com/search?p=100&q=extension%3Aeex+NOT+nothack&ref=searchresults&type=Code&utf8=✓

This uses the ""html_elixir"" Ace mode, which was added in this pull
request on the Ace project: https://github.com/ajaxorg/ace/pull/2696.
",Externals,11,False,en
2683,,Externals,0,False,en
2681,"This adds the .brd extension used by older versions of KiCad's PCB layout application PcbNew.

The extension is also used by Eagle (which has a sample) and there are currently [~4300 misclassified KiCad files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Abrd+pcbnew&type=Code&ref=searchresults).
",Externals,10,True,en
2680,"And I'm kinda thinking about changing my GitHub name...
",Externals,0,True,en
2676,"This changeset includes a sample racc file from [this auto-generated
file](https://github.com/tenderlove/rjson/blob/44e9bf0440508b78b2bc3376da22df11abbb5483/lib/rjson/parser.rb)
(MIT-licensed).

[Racc](https://github.com/tenderlove/racc) Racc is an LALR(1) parser
generator. It is written in Ruby itself, and generates ruby programs.
",Externals,26,False,en
2675,"**.phps** stands for ""PHP Source""

Useful to show examples of PHP code. A properly-configured server will output a .phps file as is, with color-formated source code instead of the HTML that would normally be generated.

[Usage in GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aphps+NOT+nothack&type=Code)

[Source of example file](https://github.com/PHPMailer/PHPMailer/blob/master/examples/mail.phps)
",Externals,6,True,en
2672,"Changes since last release: https://github.com/github/linguist/compare/v4.6.3...d06860df37a9528c531c146c684419fa30a6d078

**Merged pull requests:**
- Change Stata grammar repo [#2671](https://github.com/github/linguist/pull/2671) ([pchaigno](https://github.com/pchaigno))
- Added .pck PLSQL file extension [#2648](https://github.com/github/linguist/pull/2648) ([jaredpetersen](https://github.com/jaredpetersen))
- Add new extension .tsx for TypeScript [#2640](https://github.com/github/linguist/pull/2640) ([wizawu](https://github.com/wizawu))
",Internals,56,True,en
2671,"Change the repository for the Stata grammar from [statatmbundle/Stata.tmbundle](https://github.com/statatmbundle/Stata.tmbundle) (fork) to [pschumm/Stata.tmbundle](https://github.com/pschumm/Stata.tmbundle) (original repo).
The two repository are identical so it probably make more sense to use the original one :-)
",Externals,0,False,en
2656,"While preparing a different, unrelated pull request I was confused that the test `extensions_are_sorted` failed, since the first extension is interpreted as the primary one (and therefore should not be sorted among the other, nonprimary extensions).

Turns out that the test (correctly) only checks that the nonprimary extensions are sorted. This pull request renames the test to `nonprimary_extensions_are_sorted`, thus better documenting its purpose, and adds a short comment to `languages.yml`.
",Externals,0,True,en
2655,"Some repositories, especially in the numerical/scientific Python community, include data dumps serialized with Pickle. Currently those are misclassified as OpenEdge APL. This pull request adds Pickle to the language list (with `type: data`), along with several samples. I hope, but wasn't able to test, that the Bayesian classifier will learn the difference to OpenEdge APL.

Examples (includes only Pickle files containing numpy arrays):
https://github.com/search?utf8=%E2%9C%93&q=numpy+extension%3Apkl&type=Code&ref=searchresults
https://github.com/search?utf8=%E2%9C%93&q=numpy+extension%3Ap&type=Code&ref=searchresults
https://github.com/search?utf8=%E2%9C%93&q=numpy+extension%3Apickle&type=Code&ref=searchresults
",Externals,18,True,en
2654,"1. Handle the given `$GIT_DIR` from git better
2. Do not try to scan repositories that are too large (over 100k files in the repo)

cc @github/linguist 
",Internals,5,False,en
2648,"Added the .pck file extension to PLSQL. Fixes issue #2645.

In-the-wild usage of the file extension:
https://github.com/search?l=&q=create+extension%3Apck&ref=advsearch&type=Code&utf8=%E2%9C%93
",Externals,10,True,en
2642,"The license should be distributed with the code.
",Internals,0,True,en
2641,"Bumps github-linguist-grammars version to pull in a syntax highlighting fix for JS: https://github.com/atom/language-javascript/pull/227

Fixes this from happening; an entire file could have gotten marked in red as an error:

<img width=""920"" alt=""screen shot 2015-09-21 at 5 48 52 pm"" src=""https://cloud.githubusercontent.com/assets/887/10002468/90cade0e-60a7-11e5-9aa1-02c90bab80b4.png"">

/cc @vmg I will still need rubygems permissions for ""github-linguist-grammars"", not ""github-linguist"", thanks :bow: 
",Internals,48,True,en
2640,"[TypeScript 1.6 has introduced a new .tsx file extension.](http://blogs.msdn.com/b/typescript/archive/2015/09/02/announcing-typescript-1-6-beta-react-jsx-better-error-checking-and-more.aspx)

Here is the [GitHub search result](https://github.com/search?utf8=%E2%9C%93&q=extension%3Atsx+React&type=Code&ref=searchresults).
",Externals,18,True,en
2636,"Small version bump. Fixes an issue when invocating `git-linguist` for commands that don't really require a commit to operate on (like disabling or clearing the language cache).

cc @github/linguist
",Internals,0,True,en
2630,"Here's a small release that reduces memory pressure when calculating languages (I ran memory benchmarks and fixed a couple trivial allocation spots that were _really_ showing up on the graphs). I also added a `git-linguist` helper that lets you run language statistics as a separate process spawned by git.

cc @github/linguist
",Internals,0,True,en
2625,"...because it probably should be. 

/ cc https://github.com/github/linguist/pull/2586
",Internals,4,True,en
2624,"A specific grammar is needed to highlight `.jsx` files.
Thus, these files are now grouped under a distinct language but still in the JavaScript group.
See discussion at atom/language-javascript#220 for background.

Current highlighting of JSX code:

``` js
'use strict';

const React = require('react')

module.exports = React.createClass({
  render: function() {
    let {feeds, log} = this.props;

    log.info(feeds);
    return <div className=""feed-list"">
      <h3>News Feed's</h3>
      <ul>
        {feeds.map(function(feed) {
          return <li key={feed.name} className={feed.fetched ? 'loaded' : 'loading'}>
            {feed.data && feed.data.length > 0 ?
              <span>{feed.name} <span className='light'>({feed.data.length})</span></span>
              : 'feed.name' }
          </li>
        })}
      </ul>
    </div>;
  }
});
```
",Externals,6,False,en
2622,"Clarified what the percentages in the Language bar are based on.
",Externals,0,True,en
2619,"This adds support for `generated?` Linguist overrides. The `generated?` check is what determines if a file is suppressed in a Pull Request view (or not).

Don't get too excited though, this currently won't change behaviour on GitHub.com but is part of a larger effort to bring first class support for Linguist Overrides throughout the GitHub experience :smile:
",Internals,0,True,en
2616,,Externals,0,False,en
2613,"These are effected languages and the reason behind the proposed colors:
- Ant Build System: The color of logo (http://ant.apache.org/images/project-logo.gif).
- AppleScript: AppleScript editor logo (https://en.wikipedia.org/wiki/AppleScript#/media/File:AppleScript_Editor_Logo.png).
- Batchfile: Batch file icon in Windows (https://en.wikipedia.org/wiki/Batch_file#/media/File:Batch_file_icon_in_Windows_Vista.png).
- Bison: A color taken from a bison (https://en.wikipedia.org/wiki/Bison#/media/File:Americanbison.jpg).
- Cucumber: Official logo color (https://cucumber.io/images/cucumber-logo.svg).
- Cuda: Nvidia(creator of CUDA) logo color (http://www.nvidia.com/content/includes/redesign2010/images/redesign10/nvidia_logo.png).
- Gradle: Official Gradle logo color (https://gradle.org/wp-content/uploads/2015/03/GradleLogoReg.png).
- Hack: Hack logo color (http://hacklang.org/wp-content/themes/hack/hack.png).
- Haml: Haml logo color (http://haml.info/images/haml.png).
- LLVM: Eye color of the dragon logo of LLVM (http://llvm.org/img/DragonMedium.png).
- Less: Less logo color (http://lesscss.org/public/img/logo.png).
- Markdown: The Daring Fireball logo color (http://daringfireball.net/graphics/logos/).
- Maven POM: The maven logo color (https://en.wikipedia.org/wiki/Apache_Maven#/media/File:Maven_logo.svg).
- Nginx: The nginx logo color (http://nginx.org/nginx.png).
- NumPy: The NumPy logo color (http://www.numpy.org/_static/numpy_logo.png).
- RDoc: I couldn'd find any logo, so have used the color of the name of RDoc in the official site (http://docs.seattlerb.org/rdoc/).
- SCSS: The Sass logo color (http://sass-lang.com/assets/img/logos/logo-b6e1ef6e.svg).
- Sass: The Sass logo color (http://sass-lang.com/assets/img/logos/logo-b6e1ef6e.svg).
- XML: A random color.
- XSLT: A random color.
- YAML: The color of the name of YAML in the official site (http://yaml.org/).
- Yacc: A random color.
- reStructuredText: The official logo color (http://docutils.sourceforge.net/rst.png).
",Externals,18,False,en
2612,"Changes since last release: https://github.com/github/linguist/compare/v4.5.14...13702451abaa0c6d5d20c4902534399240334184

**Merged pull requests:**
- Add color for the PL/SQL language. [#2610](https://github.com/github/linguist/pull/2610) ([ismail-arilik](https://github.com/ismail-arilik))
- Add .jsproj extension [#2606](https://github.com/github/linguist/pull/2606) ([thejameskyle](https://github.com/thejameskyle))
- Alphabetise heuristics. [#2604](https://github.com/github/linguist/pull/2604) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Add some additional help text to license test [#2594](https://github.com/github/linguist/pull/2594) ([benbalter](https://github.com/benbalter))
- Fix typo in Obj-C heuristic keyword [#2592](https://github.com/github/linguist/pull/2592) ([jtbandes](https://github.com/jtbandes))
- Vendored definitions for Xcode-related files [#2591](https://github.com/github/linguist/pull/2591) ([jtbandes](https://github.com/jtbandes))
- Add the X10 language. [#2589](https://github.com/github/linguist/pull/2589) ([mandel](https://github.com/mandel))
- Vendored JS files [#2582](https://github.com/github/linguist/pull/2582) ([pchaigno](https://github.com/pchaigno))
- add *.lslp as an additional extension for LSL (LindenScriptingLanguage) [#2580](https://github.com/github/linguist/pull/2580) ([LeonaMorro](https://github.com/LeonaMorro))
- Make RAML a markup language [#2578](https://github.com/github/linguist/pull/2578) ([blakeembrey](https://github.com/blakeembrey))
- Adding Perl/Perl6 heuristic for '.t' [#2574](https://github.com/github/linguist/pull/2574) ([arfon](https://github.com/arfon))
- relativize link in readme [#2573](https://github.com/github/linguist/pull/2573) ([a0viedo](https://github.com/a0viedo))
- TextMate scope for RMarkdown [#2572](https://github.com/github/linguist/pull/2572) ([pchaigno](https://github.com/pchaigno))
- New grammars for Prolog and ECLiPSe  [#2571](https://github.com/github/linguist/pull/2571) ([pchaigno](https://github.com/pchaigno))
- New grammar for Typescript [#2570](https://github.com/github/linguist/pull/2570) ([pchaigno](https://github.com/pchaigno))
- Use Licensee to classify submodule licenses [#2568](https://github.com/github/linguist/pull/2568) ([benbalter](https://github.com/benbalter))
- Recognize the Mozilla Public License for grammars [#2557](https://github.com/github/linguist/pull/2557) ([pchaigno](https://github.com/pchaigno))
",Internals,177,True,en
2610,"I have added color to the PL/SQL language: #dad8d8. I take this color from a window background which evokes the interface of the language. Also I searched for this color code in this file but I couldn't find any match.
",Externals,2,True,en
2607,"The `.geojson` extension is quite well-established on GitHub by now (measuring in around [~901,874 results](https://github.com/search?utf8=%E2%9C%93&q=extension%3Ageojson+NOT+nothack&type=Code&ref=searchresults)), but even with the site's cool [interactive handling of `.geojson` files](https://github.com/blog/1528-there-s-a-map-for-that), they're still not picked up as actual JSON.

For instance, observe the missing language statistics for [this repository](https://github.com/benbalter/dc-maps).
# 

**EDIT:** I've also fixed the wrongly-quoted colour of the `NCL` language, [which currently displays in grey](https://github.com/Alhadis/NCL-SyntaxColouring).
",Externals,16,True,en
2606,"https://github.com/search?utf8=✓&q=jsproj+extension:jsproj&type=Code&ref=searchresults=

Sample: https://github.com/MicrosoftEdge/JSBrowser/blob/master/JSBrowser/JSBrowser.jsproj
",Externals,1,True,en
2604,"Rearrange heuristics and their tests in alphabetical order.

Also added checks to keep them in order.
",Externals,0,True,en
2600,"https://github.com/search?utf8=%E2%9C%93&q=extension%3Apony+new&type=Code&ref=searchresults
",Externals,6,True,en
2594,"This pull request adds some additional help text to the license list, to make scenarios like the one in https://github.com/github/linguist/pull/2589 a bit friendlier for contributors.

It instructs users to add a LICENSE file, if none exists, and to add _the text_ of the license to the license file, if we can't detect the license from the license file.
",Internals,4,True,en
2592,"`synchronised` → `synchronized`
",Externals,0,True,ur
2591,"A couple Xcode project–related things that shouldn't count towards language stats.
",Externals,0,True,en
2589,"Add support for the [X10 language](https://en.wikipedia.org/wiki/X10_%28programming_language%29).

According to [this search](https://github.com/search?o=asc&p=1&q=class+extension%3Ax10&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93) there are a little bit less than 12,000 code results.
",Externals,22,True,en
2582,"A few libraries I found in [AtlasOfLivingAustralia's repositories](https://github.com/AtlasOfLivingAustralia) that were reported as incorrectly detected in #2579. 
",Externals,4,True,en
2580,"in-the-wild usage: https://github.com/search?utf8=%E2%9C%93&q=extension%3Alslp+NOT+nothack&type=Code&ref=searchresults
",Externals,6,True,en
2578,"RAML was originally merged as a data language, but this seems like an incorrect definition. I changed it to be markup instead, which will also result in RAML appearing in repo statistics.

For example, API Blueprint is another similar API definition language that was recently merged as `markup`. 
",Externals,0,True,en
2574,"Addresses some concerns outlined here: https://github.com/github/linguist/issues/2149#issuecomment-132538583

/ cc @zoffixznet 
",Internals,13,True,en
2573,"...so it could link properly in other branches and forks.
",Externals,0,True,en
2572,"Probably an edge case, but it can be useful for RMarkdown code snippets in Markdown documents.
",Externals,0,True,en
2571,"This pull request changes the grammar for Prolog.
It also dissociate ECLiPSe (`.ecl` files) from Prolog to apply a distinct grammar.

The new grammar for Prolog is slightly better than the old one in term of scopes:
[Old grammar in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.prolog&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Fsublimeprolog%2Fmaster%2Fsupport%2FProlog.tmLanguage&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FINSA-Rennes%2FTP-Prolog%2Fff94c3431d11e37bb4fba745e928a1e386f35a46%2FTP7%2Fbaseauto.pro&code=%25+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D+%0D%0A%25+SECTION+2%0D%0A%25+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D+%0D%0Afromcity%28City%2C+piece%28NumPiece%2C+Nom%2C+City%29%29%3A-%0D%0A%09piece%28NumPiece%2C+Nom%2C+City%29.%0D%0A%0D%0Ainfospieces%28Nom%2C+Lieu%29%3A-%0D%0A%09piece%28_%2C+Nom%2C+Lieu%29.%0D%0A%0D%0Ainter%28Nom%2C+Lieu%29%3A-%0D%0A%09demandeFournisseur%28Nom%2C+Lieu%29%2C%0D%0A%09fournisseurReference%28_%2C+Nom%2C+Lieu%29.%0D%0A%0D%0Aunion%28Nom%2C+Lieu%29%3A-%0D%0A%09demandeFournisseur%28Nom%2C+Lieu%29.%0D%0Aunion%28Nom%2C+Lieu%29%3A-%0D%0A%09fournisseurReference%28_%2C+Nom%2C+Lieu%29%2C%0D%0A%09not%28demandeFournisseur%28Nom%2C+Lieu%29%29.%0D%0A%0D%0Adiff%28Nom%2C+Lieu%29%3A-%0D%0A%09demandeFournisseur%28Nom%2C+Lieu%29%2C%0D%0A%09not%28fournisseurReference%28_%2C+Nom%2C+Lieu%29%29.%0D%0A%0D%0Aprodcart%28uplet%28NumFourn1%2C+Nom%2C+Ville%2C+NumFourn2%2C+Piece%2C+Quantite%29%29%3A-%0D%0A%09fournisseurReference%28NumFourn1%2C+Nom%2C+Ville%29%2C%0D%0A%09livraison%28NumFourn2%2C+Piece%2C+Quantite%29.%0D%0A%0D%0Ajointure%28uplet%28NumFourn%2C+Nom%2C+Ville%2C+Piece%2C+Quantite%29%29%3A-%0D%0A%09fournisseurReference%28NumFourn%2C+Nom%2C+Ville%29%2C%0D%0A%09livraison%28NumFourn%2C+Piece%2C+Quantite%29.%0D%0A%0D%0AjointureSelect%28uplet%28NumFourn%2C+Nom%2C+Ville%2C+Piece%2C+Quantite%29%29%3A-%0D%0A%09jointure%28uplet%28NumFourn%2C+Nom%2C+Ville%2C+Piece%2C+Quantite%29%29%2C%0D%0A%09Quantite+%3E+350.%0D%0A%0D%0AjointureSelect2%28uplet%28NumFourn%2C+Nom%2C+Ville%2C+Piece%2C+Quantite%29%29%3A-%0D%0A%09livraison%28NumFourn%2C+Piece%2C+Quantite%29%2C%0D%0A%09Quantite+%3E+350%2C%0D%0A%09fournisseurReference%28NumFourn%2C+Nom%2C+Ville%29.) - [New grammar in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Fsublimeprolog%2Fmaster%2Fsupport%2FProlog.tmLanguage&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FINSA-Rennes%2FTP-Prolog%2Fff94c3431d11e37bb4fba745e928a1e386f35a46%2FTP7%2Fbaseauto.pro&code=%25+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D+%0D%0A%25+SECTION+2%0D%0A%25+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D+%0D%0Afromcity%28City%2C+piece%28NumPiece%2C+Nom%2C+City%29%29%3A-%0D%0A%09piece%28NumPiece%2C+Nom%2C+City%29.%0D%0A%0D%0Ainfospieces%28Nom%2C+Lieu%29%3A-%0D%0A%09piece%28_%2C+Nom%2C+Lieu%29.%0D%0A%0D%0Ainter%28Nom%2C+Lieu%29%3A-%0D%0A%09demandeFournisseur%28Nom%2C+Lieu%29%2C%0D%0A%09fournisseurReference%28_%2C+Nom%2C+Lieu%29.%0D%0A%0D%0Aunion%28Nom%2C+Lieu%29%3A-%0D%0A%09demandeFournisseur%28Nom%2C+Lieu%29.%0D%0Aunion%28Nom%2C+Lieu%29%3A-%0D%0A%09fournisseurReference%28_%2C+Nom%2C+Lieu%29%2C%0D%0A%09not%28demandeFournisseur%28Nom%2C+Lieu%29%29.%0D%0A%0D%0Adiff%28Nom%2C+Lieu%29%3A-%0D%0A%09demandeFournisseur%28Nom%2C+Lieu%29%2C%0D%0A%09not%28fournisseurReference%28_%2C+Nom%2C+Lieu%29%29.%0D%0A%0D%0Aprodcart%28uplet%28NumFourn1%2C+Nom%2C+Ville%2C+NumFourn2%2C+Piece%2C+Quantite%29%29%3A-%0D%0A%09fournisseurReference%28NumFourn1%2C+Nom%2C+Ville%29%2C%0D%0A%09livraison%28NumFourn2%2C+Piece%2C+Quantite%29.%0D%0A%0D%0Ajointure%28uplet%28NumFourn%2C+Nom%2C+Ville%2C+Piece%2C+Quantite%29%29%3A-%0D%0A%09fournisseurReference%28NumFourn%2C+Nom%2C+Ville%29%2C%0D%0A%09livraison%28NumFourn%2C+Piece%2C+Quantite%29.%0D%0A%0D%0AjointureSelect%28uplet%28NumFourn%2C+Nom%2C+Ville%2C+Piece%2C+Quantite%29%29%3A-%0D%0A%09jointure%28uplet%28NumFourn%2C+Nom%2C+Ville%2C+Piece%2C+Quantite%29%29%2C%0D%0A%09Quantite+%3E+350.%0D%0A%0D%0AjointureSelect2%28uplet%28NumFourn%2C+Nom%2C+Ville%2C+Piece%2C+Quantite%29%29%3A-%0D%0A%09livraison%28NumFourn%2C+Piece%2C+Quantite%29%2C%0D%0A%09Quantite+%3E+350%2C%0D%0A%09fournisseurReference%28NumFourn%2C+Nom%2C+Ville%29.)

The new package also contains a grammar for ECLiPSe.
ECLiPSe is a superset of Prolog which adds a few new constructs and functions.
[ECLiPSe syntax with Prolog grammar in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Falnkpa%2Fsublimeprolog%2Fmaster%2Fsupport%2FProlog.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FProlog%2For-constraint.ecl&code=)
[ECLiPSe syntax with dedicated grammar in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Falnkpa%2Fsublimeprolog%2Fmaster%2Fsupport%2FECLiPSe%2520Prolog.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FProlog%2For-constraint.ecl&code=)
",Externals,1132,False,en
2570,"This pull request changes the grammar for Typescript.
As discussed in #2569, [the old grammar is deprecated](https://github.com/lavrton/sublime-better-typescript#overview).

[Example of the old grammar in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=source.ts&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FMicrosoft%2FTypeScript-Sublime-Plugin%2Fmaster%2FTypeScript.tmLanguage&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpalantir%2Fplottable%2FaxisAnnotations%2Fsrc%2Faxes%2Faxis.ts&code=protected+_drawAnnotations%28%29+{%0D%0A++++let+labelPadding+%3D+4%3B%0D%0A++++let+measurements+%3D+new+Utils.Map%3CD%2C+SVGTypewriter.Measurers.Dimensions%3E%28%29%3B%0D%0A++++let+annotatedTicks+%3D+this._annotatedTicksInDomain%28%29%3B%0D%0A++++annotatedTicks.forEach%28%28annotatedTick%29+%3D%3E+{%0D%0A++++++let+measurement+%3D+this._annotationMeasurer.measure%28this.annotationFormatter%28%29%28annotatedTick%29%29%3B%0D%0A++++++let+paddedMeasurement+%3D+{+width%3A+measurement.width+%2B+2+*+labelPadding%2C+height%3A+measurement.height+%2B+2+*+labelPadding+}%3B%0D%0A++++++measurements.set%28annotatedTick%2C+paddedMeasurement%29%3B%0D%0A++++}%29%3B%0D%0A%0D%0A++++let+tierHeight+%3D+this._annotationMeasurer.measure%28%29.height+%2B+2+*+labelPadding%3B%0D%0A%0D%0A++++let+annotationToTier+%3D+this._annotationToTier%28measurements%29%3B%0D%0A%0D%0A++++let+hiddenAnnotations+%3D+new+Utils.Set%3Cany%3E%28%29%3B%0D%0A++++let+numTiers+%3D+Math.floor%28this.margin%28%29+%2F+tierHeight%29%3B%0D%0A++++annotationToTier.forEach%28%28tier%2C+annotation%29+%3D%3E+{%0D%0A++++++if+%28tier+%3D%3D%3D+-1+||+tier+%3E%3D+numTiers%29+{%0D%0A++++++++hiddenAnnotations.add%28annotation%29%3B%0D%0A++++++}%0D%0A++++}%29%3B%0D%0A%0D%0A++++let+bindElements+%3D+%28selection%3A+d3.Selection%3Cany%3E%2C+elementName%3A+string%2C+className%3A+string%29+%3D%3E+{%0D%0A++++++let+elements+%3D+selection.selectAll%28%22.%22+%2B+className%29.data%28annotatedTicks%29%3B%0D%0A++++++elements.enter%28%29.append%28elementName%29.classed%28className%2C+true%29%3B%0D%0A++++++elements.exit%28%29.remove%28%29%3B%0D%0A++++++return+elements%3B%0D%0A++++}%3B%0D%0A++++let+axisHeight+%3D+this._isHorizontal%28%29+%3F+this.height%28%29+%3A+this.width%28%29%3B%0D%0A++++let+axisHeightWithoutMargin+%3D+this._axisSizeWithoutMargin%28%29%3B%0D%0A++++let+offsetF+%3D+%28d%3A+D%29+%3D%3E+{%0D%0A++++++switch+%28this.orientation%28%29%29+{%0D%0A++++++++case+%22bottom%22%3A%0D%0A++++++++case+%22right%22%3A%0D%0A++++++++++return+annotationToTier.get%28d%29+*+tierHeight+%2B+axisHeightWithoutMargin%3B%0D%0A++++++++case+%22top%22%3A%0D%0A++++++++case+%22left%22%3A%0D%0A++++++++++return+axisHeight+-+axisHeightWithoutMargin+-+annotationToTier.get%28d%29+*+tierHeight%3B%0D%0A++++++}%0D%0A++++}%3B%0D%0A++++let+positionF+%3D+%28d%3A+D%29+%3D%3E+this._scale.scale%28d%29%3B%0D%0A++++let+visibilityF+%3D+%28d%3A+D%29+%3D%3E+hiddenAnnotations.has%28d%29+%3F+%22hidden%22+%3A+%22visible%22%3B%0D%0A%0D%0A++++let+secondaryPosition%3A+number%3B%0D%0A++++switch+%28this.orientation%28%29%29+{%0D%0A++++++case+%22bottom%22%3A%0D%0A++++++case+%22right%22%3A%0D%0A++++++++secondaryPosition+%3D+0%3B%0D%0A++++++++break%3B%0D%0A++++++case+%22top%22%3A%0D%0A++++++++secondaryPosition+%3D+this.height%28%29%3B%0D%0A++++++++break%3B%0D%0A++++++case+%22left%22%3A%0D%0A++++++++secondaryPosition+%3D+this.width%28%29%3B%0D%0A++++++++break%3B%0D%0A++++}).
[Example of the new grammar in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FMicrosoft%2FTypeScript-Sublime-Plugin%2Fmaster%2FTypeScript.tmLanguage&grammar_text=&code_source=from-text&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpalantir%2Fplottable%2FaxisAnnotations%2Fsrc%2Faxes%2Faxis.ts&code=protected+_drawAnnotations%28%29+{%0D%0A++++let+labelPadding+%3D+4%3B%0D%0A++++let+measurements+%3D+new+Utils.Map%3CD%2C+SVGTypewriter.Measurers.Dimensions%3E%28%29%3B%0D%0A++++let+annotatedTicks+%3D+this._annotatedTicksInDomain%28%29%3B%0D%0A++++annotatedTicks.forEach%28%28annotatedTick%29+%3D%3E+{%0D%0A++++++let+measurement+%3D+this._annotationMeasurer.measure%28this.annotationFormatter%28%29%28annotatedTick%29%29%3B%0D%0A++++++let+paddedMeasurement+%3D+{+width%3A+measurement.width+%2B+2+*+labelPadding%2C+height%3A+measurement.height+%2B+2+*+labelPadding+}%3B%0D%0A++++++measurements.set%28annotatedTick%2C+paddedMeasurement%29%3B%0D%0A++++}%29%3B%0D%0A%0D%0A++++let+tierHeight+%3D+this._annotationMeasurer.measure%28%29.height+%2B+2+*+labelPadding%3B%0D%0A%0D%0A++++let+annotationToTier+%3D+this._annotationToTier%28measurements%29%3B%0D%0A%0D%0A++++let+hiddenAnnotations+%3D+new+Utils.Set%3Cany%3E%28%29%3B%0D%0A++++let+numTiers+%3D+Math.floor%28this.margin%28%29+%2F+tierHeight%29%3B%0D%0A++++annotationToTier.forEach%28%28tier%2C+annotation%29+%3D%3E+{%0D%0A++++++if+%28tier+%3D%3D%3D+-1+||+tier+%3E%3D+numTiers%29+{%0D%0A++++++++hiddenAnnotations.add%28annotation%29%3B%0D%0A++++++}%0D%0A++++}%29%3B%0D%0A%0D%0A++++let+bindElements+%3D+%28selection%3A+d3.Selection%3Cany%3E%2C+elementName%3A+string%2C+className%3A+string%29+%3D%3E+{%0D%0A++++++let+elements+%3D+selection.selectAll%28%22.%22+%2B+className%29.data%28annotatedTicks%29%3B%0D%0A++++++elements.enter%28%29.append%28elementName%29.classed%28className%2C+true%29%3B%0D%0A++++++elements.exit%28%29.remove%28%29%3B%0D%0A++++++return+elements%3B%0D%0A++++}%3B%0D%0A++++let+axisHeight+%3D+this._isHorizontal%28%29+%3F+this.height%28%29+%3A+this.width%28%29%3B%0D%0A++++let+axisHeightWithoutMargin+%3D+this._axisSizeWithoutMargin%28%29%3B%0D%0A++++let+offsetF+%3D+%28d%3A+D%29+%3D%3E+{%0D%0A++++++switch+%28this.orientation%28%29%29+{%0D%0A++++++++case+%22bottom%22%3A%0D%0A++++++++case+%22right%22%3A%0D%0A++++++++++return+annotationToTier.get%28d%29+*+tierHeight+%2B+axisHeightWithoutMargin%3B%0D%0A++++++++case+%22top%22%3A%0D%0A++++++++case+%22left%22%3A%0D%0A++++++++++return+axisHeight+-+axisHeightWithoutMargin+-+annotationToTier.get%28d%29+*+tierHeight%3B%0D%0A++++++}%0D%0A++++}%3B%0D%0A++++let+positionF+%3D+%28d%3A+D%29+%3D%3E+this._scale.scale%28d%29%3B%0D%0A++++let+visibilityF+%3D+%28d%3A+D%29+%3D%3E+hiddenAnnotations.has%28d%29+%3F+%22hidden%22+%3A+%22visible%22%3B%0D%0A%0D%0A++++let+secondaryPosition%3A+number%3B%0D%0A++++switch+%28this.orientation%28%29%29+{%0D%0A++++++case+%22bottom%22%3A%0D%0A++++++case+%22right%22%3A%0D%0A++++++++secondaryPosition+%3D+0%3B%0D%0A++++++++break%3B%0D%0A++++++case+%22top%22%3A%0D%0A++++++++secondaryPosition+%3D+this.height%28%29%3B%0D%0A++++++++break%3B%0D%0A++++++case+%22left%22%3A%0D%0A++++++++secondaryPosition+%3D+this.width%28%29%3B%0D%0A++++++++break%3B%0D%0A++++}).

/cc @bluong
",Externals,928,False,en
2568,"This pull requests updates the grammars test to lean on Licensee to do much of the license-detection heavy lifting. Specifically:
1. Look to Licensee first to see if it can detect a license
2. If licensee couldn't detect the license, but found a license file, use [Licensee's more nuanced license file detection](https://github.com/benbalter/licensee/blob/master/lib/licensee/project.rb#L37-L50), passing the license file to the existing license detection
3. If all else fails, look to the readme

Beyond the updated logic, rather than break things out into `:unlicensed` and `:unrecognized`, the test now contains an explicit whitelist of approved licenses which it compare the detected license, if any against. This allows for more descriptive failure messages (e.g., `the submodule FOO is licensed under the XYZ license, but the XYZ license isn't an approved license`). 

To implement this, I added a private `submodule_license` method to separate the license detection logic, and a private `submodule_licenses` which returns a hash containing each submodule and its license.
",Internals,7,False,en
2567,"Apple’s standard generated .h file for frameworks is incorrectly being identified as C++. This fix correctly identifies it as Objective-C.

The `#import` (as opposed to `#include`) directive is used by both Obj-C and Microsoft C++. However, the Microsoft version is [only for importing libraries](https://msdn.microsoft.com/en-us/library/8etzzkb6%28VS.71%29.aspx) and would never refer to a file with an `.h` extension. If we see `#import ""foo.h""` or `#import <foo.h>`, we can therefore conclude the file is Obj-C.

Helps with #1626.
",Externals,12,True,en
2566,"Changes since last release: https://github.com/github/linguist/compare/v4.5.13...6995fc28b65d543342991d3ca5fd11c330f0f283

**Merged pull requests:**
- Grammar for AspectJ [#2565](https://github.com/github/linguist/pull/2565) ([pchaigno](https://github.com/pchaigno))
- Highlight LabVIEW files as XML [#2561](https://github.com/github/linguist/pull/2561) ([pchaigno](https://github.com/pchaigno))
- Add .sexp to Common Lisp. [#2560](https://github.com/github/linguist/pull/2560) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Add .arpa to DNS Zone. [#2555](https://github.com/github/linguist/pull/2555) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- DNS Zone files [#2554](https://github.com/github/linguist/pull/2554) ([arfon](https://github.com/arfon))
- Reworking documentation paths [#2541](https://github.com/github/linguist/pull/2541) ([arfon](https://github.com/arfon))
- Tighten RenderScript/Rust disambiguation [#2448](https://github.com/github/linguist/pull/2448) ([chris-morgan](https://github.com/chris-morgan))
- highlight DNS zone (BIND) files [#2370](https://github.com/github/linguist/pull/2370) ([mcandre](https://github.com/mcandre))
",Internals,96,True,en
2565,"This pull request adds a grammar for AspectJ.
",Externals,0,True,en
2561,"LabVIEW files are [XML documents](https://github.com/search?utf8=%E2%9C%93&q=extension%3Alvproj+xml&type=Code&ref=searchresults).
",Externals,6,True,en
2560,"There are [21000](https://github.com/search?q=extension%3Asexp+NOT+slartibartfast) `.sexp` files.  They contain ""[Symbolic Expressions](https://en.wikipedia.org/wiki/S-expression)"", which is the syntax of Lisp.

Arguably, these files are not in any particular dialect of Lisp.  I had to choose one, so I picked Common Lisp.

This might be an opportunity to introduce a generic ""Lisp"" language, which was discussed in #1827 and #1837.
",Externals,14,True,en
2557,"This pull request adds support for grammars under Mozilla Public License.
(I couldn't change the grammar for Prolog because of this.)
",Externals,0,False,en
2555,"Addition to #2554.  There are [753](https://github.com/search?q=extension%3Aarpa+soa+OR+root+OR+CNAME) `.arpa` files which are zone files.

(There are also [1163](https://github.com/search?q=extension%3Aarpa+NOT+soa+NOT+root+NOT+CNAME) `.arpa` files with some other content.  This in on par with the `.zone` file extension: [2698](https://github.com/search?q=extension%3Azone+soa+OR+root+OR+CNAME) vs [4084](https://github.com/search?q=extension%3Azone+NOT+soa+NOT+root+NOT+CNAME).)
",Externals,23,True,en
2554,"Replaces https://github.com/github/linguist/pull/2370
",Internals,4,True,en
2552,"Changes since last release: https://github.com/github/linguist/compare/v4.5.11...d9509a1750cc87ce5a3b1e72028294bf5dbfa784

**Merged Pull Requests**
- Don't blow up if empty string/nil passed to alias methods (part deux) - https://github.com/github/linguist/pull/2551
- Don't blow up if empty string/nil passed to alias methods - https://github.com/github/linguist/pull/2549
- Grammar updates [#2547](https://github.com/github/linguist/pull/2547) ([arfon](https://github.com/arfon))
- Make regex for vim modeline more lenient [#2546](https://github.com/github/linguist/pull/2546) ([ammaraskar](https://github.com/ammaraskar))
- YAML extensions for TextMate and Sublime Text grammars [#2545](https://github.com/github/linguist/pull/2545) ([pchaigno](https://github.com/pchaigno))
- Highlight Brewfile as Ruby [#2542](https://github.com/github/linguist/pull/2542) ([josh](https://github.com/josh))
- Filename Makefile.inc for Makefile [#2540](https://github.com/github/linguist/pull/2540) ([pchaigno](https://github.com/pchaigno))
- Updates for the Puppet language [#2539](https://github.com/github/linguist/pull/2539) ([rji](https://github.com/rji))
- Add codemirror's demo directory [#2538](https://github.com/github/linguist/pull/2538) ([BerkeleyTrue](https://github.com/BerkeleyTrue))
- #2504 - xBase aliases and extension .prw [#2537](https://github.com/github/linguist/pull/2537) ([imsys](https://github.com/imsys))
- Adding Slim tm_scope [#2536](https://github.com/github/linguist/pull/2536) ([arfon](https://github.com/arfon))
- Case-insensitive extension match for heuristic rules [#2535](https://github.com/github/linguist/pull/2535) ([pchaigno](https://github.com/pchaigno))
- Split on comma in language name if no match is found [#2447](https://github.com/github/linguist/pull/2447) ([Ryman](https://github.com/Ryman))
",Internals,129,True,en
2551,"Related to https://github.com/github/linguist/pull/2549 - missed a code path.
",Internals,4,True,en
2549,"https://github.com/github/linguist/pull/2447 introduced a small issue that if `nil` or a blank string was passed to the `Language.find_by...` methods they would blow up.

This fix simply returns quickly if `nil` or an empty string are passed into either method.
",Internals,4,True,en
2547,"Grammars update
",Internals,0,True,sv
2546,"The current regex looks strictly for set lines containing only a filetype parameter. Unfortunately this doesn't play too well with files which also set additional vim settings. An example of such a file can be seen here: https://github.com/alliedmodders/sourcemod/blob/master/AMBuildScript

It'd be cool to have syntax highlighting on that file but currently that would involve making an additional line containing either the emacs style modeline or a vim modeline containing the `ft` exclusively. Both of these seem hacky.

I've also added two tests with more complex modelines and the filetype in different positions.
",Externals,0,True,en
2545,"This pull request adds the extensions `.YAML-tmLanguage` and `.syntax` to the YAML entry.
This extensions are used respectively for Sublime Text and TextMate grammars.

[`.syntax` files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asyntax+filetypes&type=Code&ref=searchresults).
I can't perform the same kind of search for `.YAML-tmLanguages` files because there's a bug with upper-case extensions (already reported). [This search](https://github.com/search?p=2&q=name+scopeName+fileTypes+uuid+---&ref=searchresults&type=Code&utf8=%E2%9C%93) shows a good number of `.YAML-tmLanguage` files though.
",Externals,12,False,en
2542,"Hey @arfon!

First time linguist contributor here! Does this look okay?
",Internals,0,True,en
2541,"Replaces #2164
",Internals,4,True,en
2540,"This pull request adds the filename `Makefile.inc` for Makefile.
It fixes the issue reported by @cperciva in [#2180 (comment)](https://github.com/github/linguist/pull/2180#issuecomment-128140488).

[In the wild examples](https://github.com/search?utf8=%E2%9C%93&q=filename%3AMakefile.inc).
",Externals,23,False,en
2539,"This PR resolves two issues with the Puppet language in Linguist:
- Updates the language color based on the [Puppet Labs style guide](https://puppetlabs.com/styleguide/brand#color)
- Adds an additional sample to prevent files containing only the line `hiera_include('classes')` from being categorized as Pascal

For an example of the Pascal mis-classification, please see https://github.com/garethr/puppet-mesos-example/search?l=pascal
",Externals,0,False,en
2538,"This accounts for about ~150 html files throwing off the statistics of one of my projects
",Externals,3,True,en
2537,"xBase is an umbrella term for all languages in this family, and that includes AdvPL that mainly uses the .prw extension:

AdvPL: 
https://github.com/search?utf8=%E2%9C%93&q=extension%3Aprw+function&type=Code&ref=searchresults

https://github.com/search?p=1&q=extension%3Aprw+advpl&ref=searchresults&type=Repositories&utf8=%E2%9C%93

FoxPro:
https://github.com/search?p=1&q=extension%3Aprg+foxpro&ref=searchresults&type=Repositories&utf8=%E2%9C%93

Clipper:
https://github.com/search?l=xbase&p=1&q=extension%3Aprg+clipper&ref=searchresults&type=Code&utf8=%E2%9C%93

https://en.wikipedia.org/wiki/XBase
",Externals,27,True,en
2536,"Fixes https://github.com/github/linguist/issues/2467
",Internals,4,True,en
2535,"This pull request makes the extension match for heuristic rules case-insensitive.
I didn't seem coherent since the detection by extension is case-insensitive (see #2533).

I noticed it wasn't with the [new heuristic](https://github.com/github/linguist/pull/2533/files#diff-e56a8d50b1a75fc4212ffb3504faa007R354) from @arfon.

[`samples/R/hello-r.R`](https://github.com/github/linguist/blob/master/samples/R/hello-r.R) is, indirectly, a test for this.
",Externals,30,False,en
2534,"Changes since last release: https://github.com/github/linguist/compare/v4.5.10...8ae32e1d479c72debd5dd28eadfb1c97d9b6d884

**Merged pull requests:**
- Adding back R/Rebol heuristics [#2533](https://github.com/github/linguist/pull/2533) ([arfon](https://github.com/arfon))
- Fixing up some new heuristics [#2532](https://github.com/github/linguist/pull/2532) ([arfon](https://github.com/arfon))
- Parse HCL as Ruby, not JavaScript [#2527](https://github.com/github/linguist/pull/2527) ([radeksimko](https://github.com/radeksimko))
- add syntax highlight for *.vue component files [#2513](https://github.com/github/linguist/pull/2513) ([yyx990803](https://github.com/yyx990803))
- Associate heuristic rules with file extensions [#2441](https://github.com/github/linguist/pull/2441) ([pchaigno](https://github.com/pchaigno))
",Internals,76,True,en
2533,"Fixes https://github.com/github/linguist/issues/2531
",Internals,4,True,en
2532,"To go along with https://github.com/github/linguist/pull/2441
",Internals,4,True,en
2527,"cc @sethvargo 

https://github.com/github/linguist/pull/1899

Before we get a proper HCL grammar, I believe it's much better to parse HCL as Ruby, so at least people don't see the annoying red background everywhere:

![screen shot 2015-07-30 at 11 32 25](https://cloud.githubusercontent.com/assets/287584/8981252/b672fb1e-36ae-11e5-80dc-32d6a692c942.png)
",Externals,51,True,en
2526,"Changes since last release: https://github.com/github/linguist/compare/v4.5.9...4b2abb2064787b7ff0321c43835014b33d5804bd

**Merged pull requests:**
- Grammars update [#2525](https://github.com/github/linguist/pull/2525) ([arfon](https://github.com/arfon))
- More encompassing number skips [#2524](https://github.com/github/linguist/pull/2524) ([arfon](https://github.com/arfon))
- xBase .ch [#2515](https://github.com/github/linguist/pull/2515) ([arfon](https://github.com/arfon))
- Add documentation categorization for CHANGELOG et. al. [#2510](https://github.com/github/linguist/pull/2510) ([joelparkerhenderson](https://github.com/joelparkerhenderson))
- Use a different grammar for PureScript [#2506](https://github.com/github/linguist/pull/2506) ([hdgarrood](https://github.com/hdgarrood))
- CONTRIBUTING.md: minor URL cleanups [#2502](https://github.com/github/linguist/pull/2502) ([vszakats](https://github.com/vszakats))
- add support for XPages [#2438](https://github.com/github/linguist/pull/2438) ([edm00se](https://github.com/edm00se))
- Add HCL to languages.yml [#1899](https://github.com/github/linguist/pull/1899) ([sethvargo](https://github.com/sethvargo))
- language-xbase: update grammar to latest [#2508](https://github.com/github/linguist/pull/2508) ([vszakats](https://github.com/vszakats))
- update language-xbase grammar [#2507](https://github.com/github/linguist/pull/2507) ([vszakats](https://github.com/vszakats))
- xBase: add .ch extension + sample [#2498](https://github.com/github/linguist/pull/2498) ([vszakats](https://github.com/vszakats))
- Changed tokenizer number literals to be more encompassing [#1027](https://github.com/github/linguist/pull/1027) ([ScrimpyCat](https://github.com/ScrimpyCat))
",Internals,131,True,en
2525,"Does what it says on the tin... :point_up: 
",Internals,0,True,en
2524,"Replaces https://github.com/github/linguist/pull/1027
",Internals,4,True,en
2515,"This is work in progress to replace #2498.
",Internals,4,True,en
2513,"This PR adds detection and highlighting for [Vue.js](https://github.com/yyx990803/vue) components with the `*.vue` extension, using [vue-syntax-highlight](https://github.com/vuejs/vue-syntax-highlight). Vue components encapsulate styles, template and JavaScript logic in a single file, and also support mixing different pre-processors in the same file.
- [*.vue files search result](https://github.com/search?utf8=%E2%9C%93&q=extension%3Avue+NOT+xml&type=Code&ref=searchresults)
- [Lightshow example](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue-syntax-highlight%2Fblob%2Fmaster%2Fvue.tmLanguage&grammar_text=&code_source=from-text&code_url=&code=%3Cstyle+lang%3D%22sass%22%3E%0D%0A%24font-stack%3A+Helvetica%2C+sans-serif%3B%0D%0A%24primary-color%3A+%23999%3B%0D%0Abody+%7B%0D%0A++font%3A+100%25+%24font-stack%3B%0D%0A++color%3A+%24primary-color%3B%0D%0A%7D%0D%0A%3C%2Fstyle%3E%0D%0A%0D%0A%3Ctemplate+lang%3D%22jade%22%3E%0D%0Adiv%0D%0A++h1+%7B%7Bmsg%7D%7D%0D%0A++comp-a%0D%0A++comp-b%0D%0A%3C%2Ftemplate%3E%0D%0A%0D%0A%3Cscript%3E%0D%0Aimport+compA+from+%27.%2Fcomponents%2Fa.vue%27%0D%0Aimport+compB+from+%27.%2Fcomponents%2Fb.vue%27%0D%0A%0D%0Aexport+default+%7B%0D%0A++data+%28%29+%7B%0D%0A++++return+%7B%0D%0A++++++msg%3A+%27Hello+from+Babel%21%27%0D%0A++++%7D%0D%0A++%7D%2C%0D%0A++components%3A+%7B%0D%0A++++%27comp-a%27%3A+compA%2C%0D%0A++++%27comp-b%27%3A+compB%0D%0A++%7D%0D%0A%7D%0D%0A%3C%2Fscript%3E%0D%0A)
  - demonstrates syntax highlighting of embedded pre-processor languages
",Externals,192,False,en
2510,"Enable Linguist to recognize these file name stems are documentation: CHANGE, CHANGES, CHANGELOG.
",Externals,0,True,en
2506,"Rather than using the Haskell grammar, use one specifically meant for PureScript - this should improve the syntax highlighting.
",Externals,0,True,en
2502,"use `https://` and `.svg`, follow a redirect.
",Externals,0,True,en
2500,"Changes since last release https://github.com/github/linguist/compare/v4.5.8...75f72578ad86ed2ac41a43c77affec535e1b735b
",Internals,26,True,en
2499,"Referring to: https://github.com/github/linguist/pull/2498#issuecomment-120887133
",Externals,13,True,en
2494,"The Crystal does have several little differences which distinguish it from Ruby. Thus it needs it's own grammar.
",Externals,0,True,en
2493,"Mentioned in http://www.kicad-pcb.org/display/KICAD/File+Formats. Along with .sch (schematic) files, .kicad_pcb files make up the bulk of a KiCad project.

[~4400 search results](https://github.com/search?utf8=%E2%9C%93&q=extension%3Akicad_pcb+NOT+nothack&type=Code&ref=searchresults)
",Externals,10,True,en
2488,"We are intending to adopt the soon-to-be-announced [Open Code of Conduct](http://todogroup.org/opencodeofconduct) for all @github projects. This adds it to the contributing guidelines. Let me know if you have any questions or concerns.
",Internals,0,True,en
2487,"this might fix #2486 
",Externals,4,True,en
2180,"There is [more than 10 millions `.inc` files on GitHub](https://github.com/search?q=extension%3Ainc+NOT+sfhdkfhdkhfdjfudhfkd&ref=reposearch&utf8=%E2%9C%93) and it's used by many languages. Thus, to add that extension, we need to identify all languages using it (with at least hundreds of examples).

I will update this post with the list of languages as we go. I might eventually turn this issue into a pull request to add support of the extension.

| Language | Number of files |
| --- | --- |
| PHP | [9,241,000](https://github.com/search?q=extension%3Ainc+php&ref=reposearch&utf8=%E2) |
| Pascal | [206,000](https://github.com/search?p=96&q=extension%3Ainc+end+begin&ref=searchresults&type=Code&utf8=%E2%9C%93) |
| Assembly | [at least 69,000](https://github.com/search?utf8=%E2%9C%93&q=extension%3Ainc+NOT+php+mov+OR+jmp+OR+lda+OR+globl) |
| MySQL | [49,000](https://github.com/search?p=1&q=extension%3Ainc+select+where+NOT+php&ref=searchresults&type=Code&utf8=%E2%9C%93) |
| C++ | [8,000](https://github.com/search?p=1&q=extension%3Ainc+class+void+include+NOT+php&ref=searchresults&type=Code&utf8=%E2%9C%93) |
| HTML | [5,000](https://github.com/search?p=100&q=extension%3Ainc+body+html+NOT+php&ref=searchresults&type=Code&utf8=%E2%9C%93)* |
| SourcePawn | [2,300](https://github.com/search?p=1&q=extension%3Ainc+native+forward+stock&ref=searchresults&type=Code&utf8=%E2%9C%93)* |
| Clarion | [at least 165](https://github.com/search?p=1&q=extension%3Ainc+destruct+OR+construct+procedure+NOT+begin+NOT+php&ref=searchresults&type=Code&utf8=%E2%9C%93)* |

`*` I checked these by downloading 1,000 samples from the search results and using [simple heuristics](https://gist.github.com/pchaigno/b50ec322afd3cdcdafdf) to triage them.
",Externals,110,True,en
2484,"These two files are not G-code.
It should fix the build for #1027.

/cc @fingolfin 
",Externals,4,False,en
2483,"Changes since last release: https://github.com/github/linguist/compare/v4.5.7...a63a609ce1718d52628fc8b53097c8c25929b19f

**Merged pull requests:**
- Grammar updates [#2482](https://github.com/github/linguist/pull/2482) ([arfon](https://github.com/arfon))
- Isabelle ROOT support (updated PR) [#2481](https://github.com/github/linguist/pull/2481) ([arfon](https://github.com/arfon))
- SMT-LIB language support  [#2479](https://github.com/github/linguist/pull/2479) ([ianamason](https://github.com/ianamason))
- Append Test::More into strict.t [#2478](https://github.com/github/linguist/pull/2478) ([mattn](https://github.com/mattn))
",Internals,63,True,en
2482,"Grammar update include fix for #2468
",Internals,4,True,nn
2481,"This replaces https://github.com/github/linguist/pull/1823. As Linguist is case-sensitive I think we should be OK here for the potential concerns raised in https://github.com/github/linguist/pull/1823#issuecomment-91523375. That said, I've added a sample `root.php` file for completeness.

/ cc @lsf37 
",Internals,18,True,en
2479,"SMT is a standard language used by all ""Satisfiability Modulo Theories"" solvers.
It is defined  [here](http://smtlib.cs.uiowa.edu/).

[SMT search link](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asmt2+smt&type=Code&ref=searchresults)
",Externals,7,False,en
2478,"Because, most of tap scripts on Perl5 are detected as Perl6.

![](http://go-gyazo.appspot.com/6f494a89467db0bb.png)
",Externals,12,True,en
2477,"Small release. We're just softening the version requirements for Rugged and updating a few grammars.

cc @github/linguist 
",Internals,0,True,en
2463,"This pull request adds a new entry in `CONTRIBUTING.md` on how to add a new extension to a language.

It's mostly the same as `Adding a language` but, in many cases, new contributors don't seem to feel concerned by the existing instructions/requirements when they just add an extension. It will also give us something we can directly point to when necessary.
",Externals,0,True,en
2457,"- `Vendor/`, the capitalized path
- Crashlytics, a common iOS framework
- Fabric, a common iOS framework
",Externals,0,False,en
2456,"Changes since v4.5.5: https://github.com/github/linguist/compare/6062d3b...468fd425fc755e70235cd9393fcbee12dc7e5770

**Pull requests**
- Add PicoLisp language [#2449](https://github.com/github/linguist/pull/2449) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Switch to using atom-fsharp language definition [#2445](https://github.com/github/linguist/pull/2445) ([rneatherway](https://github.com/rneatherway))
- Improved XQuery and JSONiq support [#2443](https://github.com/github/linguist/pull/2443) ([wcandillon](https://github.com/wcandillon))
- fix anchor link to vim & emacs modelines section [#2439](https://github.com/github/linguist/pull/2439) ([alexweber](https://github.com/alexweber))
- .qbs extension for QML. [#2432](https://github.com/github/linguist/pull/2432) ([jakepetroules](https://github.com/jakepetroules))
- New .al extension for Perl [#2431](https://github.com/github/linguist/pull/2431) ([pchaigno](https://github.com/pchaigno))
- Make filename: Kbuild [#2429](https://github.com/github/linguist/pull/2429) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Detect Go files generated by go-bindata [#2426](https://github.com/github/linguist/pull/2426) ([tamird](https://github.com/tamird))
- Fix Rust heuristic. [#2425](https://github.com/github/linguist/pull/2425) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Add Smali language [#2422](https://github.com/github/linguist/pull/2422) ([CalebFenton](https://github.com/CalebFenton))
- Treat Carthage path as vendored [#2419](https://github.com/github/linguist/pull/2419) ([evgenyneu](https://github.com/evgenyneu))
- Add JRuby executable example, fixes #2412 [#2413](https://github.com/github/linguist/pull/2413) ([yegortimoschenko](https://github.com/yegortimoschenko))
- Display IntelliJ configurations files as XML [#2410](https://github.com/github/linguist/pull/2410) ([SimenB](https://github.com/SimenB))
- Adding back Handlebars grammar [#2407](https://github.com/github/linguist/pull/2407) ([arfon](https://github.com/arfon))
- Fix Handlebars grammar [#2405](https://github.com/github/linguist/pull/2405) ([aroben](https://github.com/aroben))
- Cut release v4.5.5 [#2401](https://github.com/github/linguist/pull/2401) ([arfon](https://github.com/arfon))
- Add Apache thrift support to generated? check [#2392](https://github.com/github/linguist/pull/2392) ([vighnesh1987](https://github.com/vighnesh1987))
- Add Lex and Yacc languages [#2390](https://github.com/github/linguist/pull/2390) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- More file extensions for Groff [#2383](https://github.com/github/linguist/pull/2383) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Added support for .mdpolicy XML files [#2378](https://github.com/github/linguist/pull/2378) ([Mailaender](https://github.com/Mailaender))
- .vhost as a Nginx extension [#2203](https://github.com/github/linguist/pull/2203) ([pchaigno](https://github.com/pchaigno))
- An example comparison for docs [#2453](https://github.com/github/linguist/pull/2453) ([federicoleon](https://github.com/federicoleon))
- Improved XQuery and JSONiq support [#2436](https://github.com/github/linguist/pull/2436) ([wcandillon](https://github.com/wcandillon))
- Work in progress: .com [#2435](https://github.com/github/linguist/pull/2435) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Add docs on how highlighting works abogala85@ [#2420](https://github.com/github/linguist/pull/2420) ([abol](https://github.com/abol))
- An example comparison for docs [#2406](https://github.com/github/linguist/pull/2406) ([aaronwinter](https://github.com/aaronwinter))
- Update languages.yml [#2395](https://github.com/github/linguist/pull/2395) ([mark-shamy](https://github.com/mark-shamy))
- Only require heuristics to match subset of candidates [#2359](https://github.com/github/linguist/pull/2359) ([bkeepers](https://github.com/bkeepers))
- Adding Quartz Composer [#2344](https://github.com/github/linguist/pull/2344) ([ankurp](https://github.com/ankurp))
",Internals,282,True,en
2449,"Adds the [PicoLisp language](http://software-lab.de/doc/ref.html) using the `.l` file extension.  Fixes/supercedes #1827, #1837, #1838.

According to [this search](https://github.com/search?q=extension%3Al+de+OR+prin+OR+prinl+OR+rel+OR+picolisp+NOT+defun), there are about 5400 PicoLisp files.  I estimate there are an average of 14 files per PicoLisp repository, resulting in about 380 repositories.
",Externals,22,True,en
2447,"Rust allows some trailing tokens in the language name to control how rustdoc tests work, for example you may have a codeblock which need to be compiled to ensure it's valid syntax but you don't want it to run as a test as it would block indefinitely. 

Current behaviour on GitHub is that if we put ```rust,no_run then the codeblock gets no highlighting.

This PR also updates the codesample for rust, as the langauge has changed _significantly_ since 2013! I can split into a separate PR if wanted.

cc @brson - do you have any better suggestion for samples? I felt hashmap is a decent length and seems to exercise a decent amount of syntax.
",Externals,4,True,en
2445,"The previous definition used at fsharpbinding is no longer maintained.
That repository has been split into separate parts for each editor. Atom
now has the most complete compatible grammar.
",Externals,0,False,en
2443,,Externals,0,False,en
2441,"This pull request associates one or several file extensions to each heuristic rule instead of languages as discussed in #2359.
Fixed #2042.

be122ca also improves the heuristic rule for Perl6 and fixes #2149.
",Externals,16,False,en
2440,"https://github.com/search?utf8=%E2%9C%93&q=extension%3Ancl+NOT+what
",Externals,6,True,en
2439,"regression introduced in 5382c1b79519cfb33627eb3b288c922ea816d680
",Externals,28,True,en
2438,"Adding [XPages](http://stackoverflow.com/tags/xpages/info) language( and XSP markup for the XPages runtime). Per [CONTRIBUTING.md](https://github.com/github/linguist/blob/master/CONTRIBUTING.md):
1. added entry to languages.yml
2. no public/licensed grammar definition, so not added
3. multiple samples from multiple authors and projects added to _samples/_, primarily within _.xsp_ extension files (and metadata and config files similarly name-spaced)
4. referencing [this GitHub search result](https://github.com/search?utf8=%E2%9C%93&q=extension%3Axsp+ibm.com%2Fxsp%2Fcore&type=Code&ref=searchresults) with 4,815 code results as of this PR (screen shot below) for 'in-the-wild' use on GH

<br />
![screen shot 2015-06-04 at 10 24 07 pm](https://cloud.githubusercontent.com/assets/622118/7999205/461aebbe-0b0d-11e5-9455-6ec740d26119.png)
",Externals,64,False,en
2432,"[Qt build suite](http://doc.qt.io/qbs) (Qbs) is the [Qt Project](http://www.qt.io)'s new build system to eventually replace qmake. Qbs' project files are [written in QML using the .qbs extension](http://doc.qt.io/qbs/language-introduction.html).

Search results: https://github.com/search?utf8=✓&q=extension%3Aqbs+NOT+nothack&type=Code&ref=searchresults

Source: I am one of the core [Qbs developers](https://github.com/qtproject/qt-labs-qbs/graphs/contributors).
",Externals,2,True,en
2431,"This pull request adds support for `.al` for Perl as discussed in #2362.
There are [more than 87,900 `.al` files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aal+NOT+ebkfhdkbdkfbfnv) on GitHub. [Almost all of them](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aal+my+OR+sub&type=Code&ref=searchresults) are Perl.
",Externals,21,False,en
2429,"`Kbuild` is a common filename for makefiles in Linux:
https://github.com/search?q=filename%3Akbuild

The syntax is, by convention, a small subset of the _GNU Make_ language.
",Externals,1,False,en
2426,"Modeled after https://github.com/github/linguist/commit/2ca586861025caa2887b6b7dd8ef2f0b83805343.

cc @bramgruneir
",Externals,27,True,en
2425,"The heuristic was meant to use a regexp match.

The Bayesian classifier must have picked up the slack.

Fixes #2424
",Externals,4,True,en
2422,"Proof that this is used frequently:
https://github.com/search?utf8=%E2%9C%93&q=extension%3Asmali+NOT+nothack&type=Code&ref=searchresults

The contribute guidelines didn't mention how I could do a full end-to-end test of this locally. But, I know the tmLanguage file works because I use it every day.
",Externals,6,False,en
2419,"Hi, I have Carthage dependency in [my project](https://github.com/evgenyneu/moa). My project is written in Swift, but the vendored dependency is Obj-C. That results in Github treating my project as Obj-C.

Carthage is a framework manager for iOS/Swift: https://github.com/Carthage/Carthage
",Externals,0,True,en
2413,"This is supposed to fix JRuby executable detection. See #2412 for details.
",Externals,4,True,en
2410,"Sample file: https://github.com/OverZealous/gulp-task-listing/blob/43f766157cb892fd2d8f9322d85a9ac56960a14c/.idea/gulp-task-listing.iml
",Externals,27,True,en
2407,"Reverting https://github.com/github/linguist/commit/6062d3b25cbe99b8660724250436eeb249483119 since we now have https://github.com/github/linguist/pull/2405
",Internals,35,True,en
2405,"The Handlebars repository contains the following grammar files:
- Handlebars.tmLanguage
- Handlebars.JSON-tmLanguage
- grammars/handlebars.json (symlink to Handlebars.JSON-tmLanguage)

We were processing the .tmLanguage and the .json file and complaining about a duplicate scope. This triggered a nil-handling bug (which is now fixed), but we also shouldn't complain in this case at all. Having the same grammar in multiple formats is OK.

/cc @arfon https://github.com/github/linguist/commit/6062d3b25cbe99b8660724250436eeb249483119#commitcomment-11249896
",Internals,39,False,en
2401,"Changes since `v4.5.4`: https://github.com/github/linguist/compare/78d4abe808ad211584d9ecf6977bc4f1bd059a32...3878afa2e0f29b8e472dbaa40842e64c78a0a5ba
- Improving Vim modeline regex [#2394](https://github.com/github/linguist/pull/2394) ([arfon](https://github.com/arfon))
- Added fastlane configuration files [#2393](https://github.com/github/linguist/pull/2393) ([KrauseFx](https://github.com/KrauseFx))
- Add Unity3D Asset and Metadata files [#2388](https://github.com/github/linguist/pull/2388) ([mephaust](https://github.com/mephaust))
- Change PHP group to HTML for TWIG [#2387](https://github.com/github/linguist/pull/2387) ([aivus](https://github.com/aivus))
- Vim and Emacs modelines are two alternatives [#2386](https://github.com/github/linguist/pull/2386) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Add HyPhy as language to Linguist [#2375](https://github.com/github/linguist/pull/2375) ([mbdoud](https://github.com/mbdoud))
- Handle SSH links to submodules in Travis [#2374](https://github.com/github/linguist/pull/2374) ([pchaigno](https://github.com/pchaigno))
- Remove unused grammars/submodules [#2373](https://github.com/github/linguist/pull/2373) ([pchaigno](https://github.com/pchaigno))
- Use original Ada grammar [#2372](https://github.com/github/linguist/pull/2372) ([pchaigno](https://github.com/pchaigno))
- Add languages.yml entry and sample files for OGC Geography Markup Language (#2366) [#2368](https://github.com/github/linguist/pull/2368) ([vog](https://github.com/vog))
- Add support for API Blueprint [#2363](https://github.com/github/linguist/pull/2363) ([danielgtaylor](https://github.com/danielgtaylor))
- Add support for SSH2 and OpenSSH public keys [#2346](https://github.com/github/linguist/pull/2346) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Remove .script! hack [#2340](https://github.com/github/linguist/pull/2340) ([bkeepers](https://github.com/bkeepers))
- Improve NL/NewLisp disambiguation heuristic [#2339](https://github.com/github/linguist/pull/2339) ([vitaut](https://github.com/vitaut))
- Change Salt to programming per #2307 [#2335](https://github.com/github/linguist/pull/2335) ([DavidJFelix](https://github.com/DavidJFelix))
- Update submodule for Chapel grammar. [#2334](https://github.com/github/linguist/pull/2334) ([thomasvandoren](https://github.com/thomasvandoren))
- Add additional Puppet sample [#2333](https://github.com/github/linguist/pull/2333) ([3flex](https://github.com/3flex))
- Add 'Linker Script' language [#2330](https://github.com/github/linguist/pull/2330) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Specflow [#2328](https://github.com/github/linguist/pull/2328) ([arfon](https://github.com/arfon))
- Add DCL and MMS [#2326](https://github.com/github/linguist/pull/2326) ([arfon](https://github.com/arfon))
- Adding support for Clarion [#2325](https://github.com/github/linguist/pull/2325) ([arfon](https://github.com/arfon))
- Remove Batch from Shell group [#2324](https://github.com/github/linguist/pull/2324) ([pchaigno](https://github.com/pchaigno))
- Add JFlex grammars (language & syntax highlighting) [#2323](https://github.com/github/linguist/pull/2323) ([lsf37](https://github.com/lsf37))
- Make Common Lisp heuristic case insensitive. [#2322](https://github.com/github/linguist/pull/2322) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Tighten up OCaml heuristic [#2314](https://github.com/github/linguist/pull/2314) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- New sample for Formatted. [#2312](https://github.com/github/linguist/pull/2312) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- New samples for SaltStack [#2311](https://github.com/github/linguist/pull/2311) ([pchaigno](https://github.com/pchaigno))
- KiCad language with .sch extension [#2309](https://github.com/github/linguist/pull/2309) ([pchaigno](https://github.com/pchaigno))
- Update guideline on syntax highlighting fixes [#2308](https://github.com/github/linguist/pull/2308) ([pchaigno](https://github.com/pchaigno))
- add Limbo: language, samples [#2306](https://github.com/github/linguist/pull/2306) ([powerman](https://github.com/powerman))
- Explaining gitattributes behavior. [#2304](https://github.com/github/linguist/pull/2304) ([arfon](https://github.com/arfon))
- Add rebar-related files as erlang. [#2301](https://github.com/github/linguist/pull/2301) ([dpiddy](https://github.com/dpiddy))
- Adding in a Makefile.boot filename for .boot detection [#2300](https://github.com/github/linguist/pull/2300) ([arfon](https://github.com/arfon))
- Fixing up shebang detection to match new tokenizer behaviour [#2299](https://github.com/github/linguist/pull/2299) ([arfon](https://github.com/arfon))
- Add proximity test for colors [#2298](https://github.com/github/linguist/pull/2298) ([gjtorikian](https://github.com/gjtorikian))
- Add colors to semi-popular languages [#2296](https://github.com/github/linguist/pull/2296) ([phase](https://github.com/phase))
- Add .ruby to the list of ruby file extensions [#2266](https://github.com/github/linguist/pull/2266) ([Dorian](https://github.com/Dorian))
- Add support for the Clarion language [#1770](https://github.com/github/linguist/pull/1770) ([fushnisoft](https://github.com/fushnisoft))
- Comment styles; don't choke on `\#!/usr/bin/env foo=bar` [#1604](https://github.com/github/linguist/pull/1604) ([geoff-codes](https://github.com/geoff-codes))
- add DCL and MMS/MMK files commonly used in OpenVMS environments [#1573](https://github.com/github/linguist/pull/1573) ([ztmr](https://github.com/ztmr))
- Add support for SVG [#2391](https://github.com/github/linguist/pull/2391) ([stanhu](https://github.com/stanhu))
- Add .test extention as xml filetype [#2380](https://github.com/github/linguist/pull/2380) ([wkentaro](https://github.com/wkentaro))
- Add EusLisp [#2379](https://github.com/github/linguist/pull/2379) ([wkentaro](https://github.com/wkentaro))
- An example comparison for docs [#2371](https://github.com/github/linguist/pull/2371) ([stl-sanjay](https://github.com/stl-sanjay))
- Remove executable flag from all sample code files [#2369](https://github.com/github/linguist/pull/2369) ([vog](https://github.com/vog))
- Deadfish language [#2358](https://github.com/github/linguist/pull/2358) ([phase](https://github.com/phase))
- Marking XCode .pbxproj as generated [#2351](https://github.com/github/linguist/pull/2351) ([arfon](https://github.com/arfon))
- Extensions for the Bazel build system are written in a Python dialect [#2348](https://github.com/github/linguist/pull/2348) ([hanwen](https://github.com/hanwen))
- Analyse an individual file using repository information. [#2342](https://github.com/github/linguist/pull/2342) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- More Language Colors [#2337](https://github.com/github/linguist/pull/2337) ([phase](https://github.com/phase))
- An example comparison for docs [#2327](https://github.com/github/linguist/pull/2327) ([Rahat-3858](https://github.com/Rahat-3858))
- Fixing incorrect detection of the NewLisp language [#2319](https://github.com/github/linguist/pull/2319) ([Ignotus](https://github.com/Ignotus))
- Add Libraries & Libs to vendor.yml [#2302](https://github.com/github/linguist/pull/2302) ([phase](https://github.com/phase))
- Call out fact that language updates are post-push [#2093](https://github.com/github/linguist/pull/2093) ([arfon](https://github.com/arfon))
- Add ColdC, the language from ColdMUD. [#2091](https://github.com/github/linguist/pull/2091) ([waywardmonkeys](https://github.com/waywardmonkeys))
- Add Clojure support for .boot files [#1894](https://github.com/github/linguist/pull/1894) ([alandipert](https://github.com/alandipert))
- Add .xml.fr and .html.fr [#1830](https://github.com/github/linguist/pull/1830) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Remove .script! hack [#1786](https://github.com/github/linguist/pull/1786) ([bkeepers](https://github.com/bkeepers))
- use syntax hilighting for uncompilable codeblocks [#1713](https://github.com/github/linguist/pull/1713) ([oli-obk](https://github.com/oli-obk))
- Add more extensions to Logos language [#1562](https://github.com/github/linguist/pull/1562) ([Tyilo](https://github.com/Tyilo))
- Add support for Drupal's inc, module and install extensions [#1343](https://github.com/github/linguist/pull/1343) ([jacobbednarz](https://github.com/jacobbednarz))
",Internals,562,False,en
2394,"Fixes #2389 
",Internals,4,True,en
2393,"[fastlane](https://fastlane.tools) is an established Continuous Delivery solution for iOS/Mac projects. The configuration files are similar to a `Podfile`, also Ruby based. 

Some examples:
- https://github.com/wikimedia/apps-ios-wikipedia/blob/master/fastlane/Fastfile
- https://github.com/wikimedia/apps-ios-wikipedia/blob/master/fastlane/Deliverfile
- https://github.com/artsy/eidolon/blob/master/fastlane/Fastfile
- https://github.com/fastlane/examples/blob/master/MindNode/Fastfile

The configuration files added with this pull request: `Fastfile`, `Deliverfile` and `Snapfile` :+1:
",Externals,1,True,en
2392,"Apache Thrift compiler generated files are currently ignored in the `generated?` check leading to massive PRs which are hard to parse. This commit fixes the same.
",Externals,0,True,en
2390,"This adds the Lex and Yacc languages.

The new file extensions are mostly exclusive to these languages (the estimates in the table are conservative, because it's hard to search for Lex and Yacc), except for `.l`.

| Extension | Language Files | Total files | Comment |
| --- | --- | --- | --- |
| `.l` | [135k](https://github.com/search?p=100&q=extension%3Al+%25%25+OR+yy&ref=searchresults&type=Code&utf8=%E2%9C%93) | 403k | 16k Groff, 6k Lisp |
| `.lex` | [9k](https://github.com/search?p=100&q=extension%3Alex+%25%25+OR+yy&ref=searchresults&type=Code&utf8=%E2%9C%93) | 17k |  |
| `.yacc` | [294](https://github.com/search?q=extension%3Ayacc+%25%25&type=Code) | 390 |  |
| `.yy` | [3k](https://github.com/search?q=extension%3Ayy+%25%25&type=Code) | 5k |  |
| `.bison` | [40](https://github.com/search?q=extension%3Abison+%25%25&type=Code) | 211 |  |

Also:
- Fixes #2060, #2379 which request [`.l` for Lisp](https://github.com/search?q=extension%3Al+defun+OR+defmacro&type=Code).
- Adds `.l` to Groff ([16k files](https://github.com/search?q=extension%3Al+th+OR+pp&&type=Code))
- Groups `JFlex` (""Java Flex"") under Lex.
- Groups `Bison` (""GNU Yacc"") under Yacc.
",Externals,78,True,en
2388,"Examples of in-the-wild usage on GitHub:
- [.meta](https://github.com/search?utf8=%E2%9C%93&q=fileformatversion+extension%3Ameta&type=Code&ref=searchresults)
- [.asset](https://github.com/search?utf8=%E2%9C%93&q=tag+extension%3Aasset&type=Code&ref=searchresults)
- [.anim](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aanim+TAG&ref=simplesearch)
- [.prefab](https://github.com/search?utf8=%E2%9C%93&q=extension%3Aprefab+TAG&type=Code&ref=searchresults)
- [.mat](https://github.com/search?utf8=%E2%9C%93&q=extension%3Amat+TAG&type=Code&ref=searchresults)
",Externals,30,False,en
2387,"`Twig` should be in `HTML` group like `jade`, `slim` and other template languages
",Externals,0,True,en
2386,"I saw one user included both Vim and Emacs modelines in a file.  Of course, there's nothing wrong with that, but it may not have been the intention to support both editors.

This change should make the documentation more clear that there are two distinct options.
",Externals,0,True,en
2383,"This PR adds more file extensions for the Groff language.  [Wikipedia](http://en.wikipedia.org/wiki/Man_page#Manual_sections) documents some of these, but I've also [estimated](https://github.com/search?q=extension%3A0+sh+pp) actual usage on GitHub:

| Extension | Files | Comment |
| --- | --- | --- |
| `.0` | 5112 |  |
| `.1in` | 1247 |  |
| `.1m` | 14193 | Sysadm tools |
| `.1x` | 913 | X11 tools |
| `.3in` | 11645 |  |
| `.3m` | 345 | Math libraries |
| `.3qt` | 3518 | QT libraries |
| `.3x` | 36119 | X11 libraries |
| `.8` | 201,666 | Sysadm tools |
| `.9` | 22718 | Syscalls |
| `.me` | [3623](https://github.com/search?q=extension%3Ame++th+OR+pp+OR+nr+OR+""so+usr""&type=Code) | Using _me_ macros |
| `.ms` | 9930 | Using _ms_ macros |
| `.n` | 45067 | Tcl/Tk libraries |
| `.rno` | [936](https://github.com/search?q=extension%3Arno+NOT+slartibartfast) |  |
| `.roff` | 909 |  |

The `.n` extension conflicts with `Nemerle`.  A new heuristic was needed to resolve this.  I verified with 1000 samples:

|  | Before | After | Actual | Comment |
| --- | --- | --- | --- | --- |
| Groff | 8 | 950 | 910 |  |
| Binary | 25 | 25 | 25 | [Neko](http://nekovm.org/) VM bytecode |
| Nemerle | 967 | 25 | 23 |  |
| Text |  |  | 24 |  |
| Font |  |  | 5 |  |
| Microcode |  |  | 4 |  |
| unknown |  |  | 4 |  |
| batchflow |  |  | 3 |  |
| HTML |  |  | 1 |  |
| Diff |  |  | 1 |  |
",Externals,113,True,en
2378,"Used by @MonoDevelop to define standards for source code formatting. Not very popular https://github.com/search?utf8=%E2%9C%93&q=filename%3Amdpolicy&type=Code&ref=searchresults but easy to add here as it is strict XML 1.0 and is not conflicting with anything else.
",Externals,8,True,en
2375,"[HyPhy](http://hyphy.org/w/index.php/Main_Page) has a [frequently used](https://github.com/search?utf8=%E2%9C%93&q=extension%3Abf+fprintf&type=Code&ref=searchresults) batch language on GitHub. It shares an extension, `.bf`, with [brainfuck](http://en.wikipedia.org/wiki/Brainfuck), and to avoid misclassification, HyPhy should be added as a language to Linguist. I initially brought this up in an [issue](https://github.com/github/linguist/issues/2365).
",Externals,10,True,en
2374,"Travis doesn't handle very well SSH links to submodules. So far, two users had this issue when implementing pull requests. See [this Travis build](https://travis-ci.org/github/linguist/jobs/60855088#L1479) for instance.

This pull request fixes it by replacing `git@` links on the fly.
",Externals,12,True,en
2373,"This pull request removes several unused grammars:
- jquery-tmbundle
- javadoc.tmbundle
- ruby-on-rails-tmbundle
- text.tmbundle
- textile.tmbundle
- textmate.tmbundle
",Externals,0,False,en
2372,"We were using the branch `better-with-highlighting` on @aroben's fork of https://github.com/aroben/ada.tmbundle. textmate/ada.tmbundle#2 is now fixed and we can use the original repository again.

Discussed in [#2357 (Comment)](https://github.com/github/linguist/issues/2357#issuecomment-98129828).
",Externals,17,True,en
2368,,Externals,0,False,en
2363,"This adds a grammar and samples for [API Blueprint](https://apiblueprint.org/) based on the
[Sublime Text plugin](https://github.com/apiaryio/api-blueprint-sublime-plugin) from Apiary. The [Atom language](https://github.com/danielgtaylor/atom-language-api-blueprint) is also based
on the Sublime plugin.

API Blueprint is now used in over [3,600 repositories](https://github.com/search?utf8=%E2%9C%93&q=FORMAT+1A+extension%3Aapib+extension%3Amd&type=Code&ref=advsearch&l=) on GitHub and has
[several](https://github.com/danielgtaylor/aglio) [open source](https://github.com/apiaryio/dredd) [tools](https://www.npmjs.com/package/drakov) available.

Here's an [example using Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fapiaryio%2Fapi-blueprint-sublime-plugin%2Fblob%2Fmaster%2FAPIBlueprint.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fapiaryio%2Fapi-blueprint%2Fmaster%2Fexamples%2F12.%2520Advanced%2520Action.md&code=) to highlight a small API.

Same example in Atom:
![screen shot 2015-04-28 at 22 37 52](https://cloud.githubusercontent.com/assets/106826/7385287/3f141cec-edf7-11e4-9639-07f87c90a1ef.png)
",Externals,89,False,en
2170,"There is [more than 149,000 `.mod` files on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Amod+NOT+djfhdirijdskqdhd) and it's used by many languages. Thus, to add that extension, we need to identify all languages using it (with at least hundreds of examples).

I will update this post with the list of languages as we go. I might eventually turn this issue into a pull request to add support of the extension.

| Language | Number of files | Type |
| --- | --- | --- |
| XML (DTD) | [55,200](https://github.com/search?utf8=%E2%9C%93&q=extension%3Amod+xml+OR+attlist+OR+xmlns+OR+entity&type=Code&ref=searchresults) | `data` |
| KiCAD | [19,000](https://github.com/search?p=99&q=extension%3Amod+PCBNEW&ref=searchresults&type=Code&utf8=%E2%9C%93) | `generated` |
| Linux Kernel Module | [16,600](https://github.com/search?o=asc&p=100&q=extension%3Amod+ko&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93) | `data` |
| AMPL | [6,300](https://github.com/search?p=1&q=extension%3Amod+minimize+OR+maximize&ref=searchresults&type=Code&utf8=%E2%9C%93) | `programming` |
| GFortran | [3,900](https://github.com/search?utf8=%E2%9C%93&q=extension%3Amod++gfortran+AND+module&type=Code&ref=searchresults) | `generated` |
| Modula-2 | [2,600](https://github.com/search?utf8=%E2%9C%93&q=extension%3Amod+module+AND+begin&type=Code&ref=searchresults) | `programming` |

This extension was requested for AMPL in #2073.
",Externals,86,True,en
2346,"Linguist currently recognizes `.asc` files with `-----BEGIN` as public key files (this is the ""PEM"" format).  [SSH2](https://tools.ietf.org/html/rfc4716#section-3.2) uses `---- BEGIN`, and [OpenSSH files](http://tools.ietf.org/html/rfc4253#section-6.6) start with `ssh-rsa` or `ssh-dss`.
",Externals,13,True,en
2341,"It has always bothered me that the main public method for linguist was buried in the `Language` class in the middle of a bunch of other internal methods.

This renames `Linguist::Language.detect` to `Linguist.detect` and deprecates the old method. Thoughts?

Since this is a new method, I would recommend we release this in 4.6.0, and then remove the deprecated method in 5.0.

/cc @arfon @pchaigno @larsbrinkhoff 
",Internals,5,True,en
2340,"This replaces #1786, which removes the `.script!` hack that was used for extension-less executable files. We now detect shebang before looking at the filename, so this is not necessary.

/cc @arfon @pchaigno 
",Internals,4,True,en
2339,"The proposed PR improves disambiguation between NL and NewLisp formats fixing cases like [this](https://github.com/rwcarlsen/pswarm/blob/c51c223e7834c7eb297d4ba96540cee50371ab29/nl/hs35mod.nl).
",Externals,28,True,en
2335,"- Add a color
- Remove group
",Externals,0,False,en
2334,"The Chapel team, with @bholt's permission, is going to manage the development of the chapel-tmbundle repository going forward. That repo is used here for the Chapel grammar.

Update the submodule reference to use https://github.com/chapel-lang/chapel-tmbundle. Also, bring the Chapel samples up-to-date with the https://github.com/chapel-lang/chapel repo.
",Externals,0,True,en
2333,"Will hopefully address #2318 

This file was copied directly from https://github.com/puppetlabs/puppetlabs-apache/blob/master/manifests/init.pp

It's Apache 2.0 licensed - I'm not sure what's required here in terms of carrying that license over, should I  the license to the top of the file as a comment?
",Externals,6,True,en
2330,"Add `Linker Script` language.  This is the command language for GNU Link and other Unix linkers.

[300k `.ld` files](https://github.com/search?q=extension%3Ald+NOT+slartibartfast)
[400k `.lds` files](https://github.com/search?q=extension%3Alds+NOT+slartibartfast)
[""many"" `ld.script` files](https://github.com/search?q=filename%3Ald.script) (is there a way to get exact matches with `filename:`?)

I didn't find any significant other use of `.ld` or `.lds`.
",Externals,9,True,en
2328,"Replaces https://github.com/github/linguist/pull/2007
",Internals,4,True,en
2326,"Replaces https://github.com/github/linguist/pull/1573
",Internals,4,True,en
2325,"Replaces https://github.com/github/linguist/pull/1770
",Internals,4,True,en
2324,"This pull request removes Batch from the Shell group as discussed in #1483.
",Externals,4,True,en
2323,"This pull requests add the JFlex grammar language. JFlex is a lexer/scanner generator for Java.

See also http://jflex.de and https://github.com/jflex-de/jflex

It's broadly used on github. `%%` is a marker that occurs in most JFlex grammars (in all complete grammars, but you can have fragments to include in larger grammar files).

Searching for extension `jflex` and marker `%%` gives [~2,200 code results](https://github.com/search?utf8=✓&q=extension%3Ajflex+%25%25), and extension `flex` plus text `%%` gives [~12,500 code results](https://github.com/search?utf8=✓&q=extension%3Aflex+%25%25).

Random sampling of 10 result pages each (not just the first 10) was 100% JFlex grammar specs for both. 3 of the `.flex` files are currently misclassified as `C++` in the search result, but otherwise `.flex` and `.jflex` files are not classified as anything currently.
",Externals,29,True,en
2322,"Some Common Lisp files are misidentified as NewLisp.  This is mostly because the heuristics don't recognize `(DEFUN` in Common Lisp files:

https://github.com/search?q=language%3Anewlisp+%22defun%22+-extension%3Anl&type=Code
",Externals,6,True,en
2314,"Only match `module` at the beginning of a line.

Matching anywhere yields [false positives](https://github.com/search?q=language%3Asml+module+-extension%3Asig+-extension%3Acache&type=Code).
",Externals,3,True,en
2312,"This repo is misclassified as Forth: https://github.com/spheregenomics/primer3_2.3.6

Adding one of the `.for` files as a sample fixes that.
",Externals,4,True,en
2311,"This pull request adds some new SaltStack samples from [saltstack/salt-winrepo](https://github.com/saltstack/salt-winrepo). This should solve an issue recently reported at #960.
",Externals,3,True,en
2309,"This pull requests adds KiCad with its `.sch` file extension.
The extension collides with Eagle's extension but the two language are very different; the Bayesian seems to be able to distinguish easily.
[Examples of KiCad files on GitHub.](https://github.com/search?utf8=%E2%9C%93&q=extension%3Asch+EESchema+Schematic+File+Version&type=Code&ref=searchresults)

This fixes the issues reported in #2187.
",Externals,10,False,en
2308,"@arfon Updates the contribution guidelines as discussed in #2284.
",Externals,4,True,en
2306,"I've no idea how to ""Test the performance of the Bayesian classifier"".
I don't know Ruby, but I've already provided PCRE for detecting at https://github.com/github/linguist/issues/2292#issuecomment-88268369 and may try to update heuristics.rb if someone tell me how to run and test it.
",Externals,12,False,en
2304,"Addressing some of the confusion in https://github.com/github/linguist/issues/2206 (in particular https://github.com/github/linguist/issues/2206#issuecomment-88928916)

/ cc @IonicaBizau 
",Internals,16,True,en
2301,"`rebar.config` and `rebar.lock`/`rebar.config.lock` are akin to `Gemfile` and `Gemfile.lock` for Erlang, used by the [rebar](http://www.rebar3.org/) tool.
",Externals,1,True,en
2300,"Looks like we added support for `.boot` in https://github.com/github/linguist/pull/2254 without considering the discussion we had in https://github.com/github/linguist/pull/1894

This pull request adds `Makefile.boot` which seems to be the dominant file type using the `.boot` extension.
",Internals,8,True,en
2299,"Since https://github.com/github/linguist/pull/1604 the build has been broken :crying_cat_face: 

The change to the tokenizer behaviour [here](https://github.com/github/linguist/blob/edadca9085ba69f907b44e142fa7b45520367f96/lib/linguist/tokenizer.rb#L145) and the new sample file with a shebang that looked like this:

```
#! /usr/bin/env A=003 B=149 C=150 D=xzd E=base64 F=tar G=gz H=head I=tail sh
```

meant that the shebang extraction in [shebang.rb](https://github.com/github/linguist/blob/master/lib/linguist/shebang.rb#L20-L51) was returning `A=003` as the interpreter (when it should be `sh`).

This pull request brings the shebang detection in `tokenizer.rb` and `shebang.rb` into parity to fix the current build failure. Given how similar these methods are they should basically be the same. I'm saving that for another day.
",Internals,50,True,en
2298,"https://github.com/github/linguist/pull/2296 got me thinking. It's a bit harsh to have to go through the languages list and determine whether new colors match or not.

I put together a simple gem called [color-proximity](https://github.com/gjtorikian/color-proximity) to determine the closeness of two colors with each other. It uses [a Euclidean distance algorithm](http://www.compuphase.com/cmetric.htm) to determine likeliness.

This PR adds a test to Linguist to ensure that no two colors in the languages list are too alike. The threshold value of 10 was set by trial and error. If the proximity of any color falls below this value, the test will fail.

For an example of what is considered failure for a threshold of even 20, these two existing colors wouldn't pass:

![screen shot 2015-04-01 at 10 14 26 am](https://cloud.githubusercontent.com/assets/64050/6946924/6d4fed98-d858-11e4-9a2a-33fbf438ffa7.png)
![screen shot 2015-04-01 at 10 14 30 am](https://cloud.githubusercontent.com/assets/64050/6946925/6d545202-d858-11e4-9d9f-09fea730d986.png)

To math, that may be close, but to my human eyes, they seem far enough apart to be fine. 

/cc @github/languages @pchaigno @phase
",Internals,101,True,en
2296,"These may not be the most popular, but they are still used a lot here on GitHub, and they deserve a color.
",Externals,0,True,en
2295,"[Full Changelog](https://github.com/github/linguist/compare/v4.5.3...cb97417af8637a97710586f72dc51c26f27d48ad) since last release

**Merged pull requests:**
- Grammars update [#2294](https://github.com/github/linguist/pull/2294) ([arfon](https://github.com/arfon))
- Some tests to go with #2290 [#2293](https://github.com/github/linguist/pull/2293) ([arfon](https://github.com/arfon))
- Added Color for the Squirrel Language [#2291](https://github.com/github/linguist/pull/2291) ([iFarbod](https://github.com/iFarbod))
- Ignore assets from Sphinx docs [#2290](https://github.com/github/linguist/pull/2290) ([untitaker](https://github.com/untitaker))
- add tests/fixtures to vendor.yml [#2289](https://github.com/github/linguist/pull/2289) ([lepture](https://github.com/lepture))
- Adding puphpet to vendored list [#2286](https://github.com/github/linguist/pull/2286) ([arfon](https://github.com/arfon))
- Add .odd to XML extensions [#2279](https://github.com/github/linguist/pull/2279) ([joewiz](https://github.com/joewiz))
- Fix ada aliases [#2276](https://github.com/github/linguist/pull/2276) ([MakeNowJust](https://github.com/MakeNowJust))
- Bump escape-utils to 1.1.0 [#2275](https://github.com/github/linguist/pull/2275) ([ptoomey3](https://github.com/ptoomey3))
- intro.wisp: Fixed typographical error ('rather then' -> 'rather than'). [#2274](https://github.com/github/linguist/pull/2274) ([csimons](https://github.com/csimons))
- Elixir: Add mix.lock filename [#2272](https://github.com/github/linguist/pull/2272) ([lpil](https://github.com/lpil))
- Add interpreters for OCaml. [#2270](https://github.com/github/linguist/pull/2270) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Use #000080 for Lua color [#2269](https://github.com/github/linguist/pull/2269) ([stuartpb](https://github.com/stuartpb))
- Add RenderScript and Filterscript [#2247](https://github.com/github/linguist/pull/2247) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- fix emacs modeline parsing [#2233](https://github.com/github/linguist/pull/2233) ([tesch1](https://github.com/tesch1))
- Add cpplint.py to vendor.yml [#2075](https://github.com/github/linguist/pull/2075) ([philix](https://github.com/philix))
- exclude puphpet dir from language [#2026](https://github.com/github/linguist/pull/2026) ([Atriedes](https://github.com/Atriedes))
",Internals,183,True,en
2294,,Internals,0,False,en
2293,,Internals,0,False,en
2291,"Picked the color from the Squirrel Language's website.
The color is from the Squirrel's logo (Dark Red)
",Externals,0,False,en
2290,,Externals,0,False,en
2289,"My repo https://github.com/lepture/mistune is detected as HTML.

I've moved those HTML files to fixtures directory(https://github.com/lepture/mistune/commit/54197e12e2e4547e24ae5508f09f5516ebb8a8bc), but it won't work. I've checked this repo, it seems that only `test/fixtures/` is ignored.
",Externals,26,True,en
2286,"Replaces #2026
",Internals,4,True,en
2279,"See discussion at #2238. 

[ODD](http://en.wikipedia.org/wiki/Text_Encoding_Initiative#ODD) is an XML-based vocabulary for defining schemas for Text Encoding Initiative (TEI) projects, used widely in the humanities.  ODD should be rendered using XML syntax but is currently displayed as plain text (see [this example](https://github.com/wolfgangmm/tei-simple-pm/blob/master/odd/teisimple.odd)).  There are [nearly 500 ODD files](https://github.com/search?q=extension%3Aodd+NOT+djfhdirijdskqdhd&type=Code&utf8=%E2%9C%93) in GitHub, and this number is projected to grow.
",Externals,13,True,en
2276,"tiny tiny fix.
",Externals,0,True,en
2275,"EscapeUtils recently bumped to version 1.1.0 after merging https://github.com/brianmario/escape_utils/pull/59. I'd like to pull this version into a few other projects and the the `~> 1.0.1` is preventing Bundler from being able to find a compatible version. This bump _shouldn't_ have any side effects on Linguist, as the only two uses I can find are https://github.com/github/linguist/blob/a0d5a8338bacaa925c9e0215b4f8b2bbcd1115d1/lib/linguist/blob_helper.rb#L102 and https://github.com/github/linguist/blob/a0d5a8338bacaa925c9e0215b4f8b2bbcd1115d1/lib/linguist/language.rb#L459, both of which use `escape_url`, which should not have changed.

P.S. That new verison of EscapeUtils adds support for a new method `escape_uri_component` that does URL escaping but with space encoded as `%20` instead of `+` (the way `escape_url` does). So, https://github.com/github/linguist/blob/a0d5a8338bacaa925c9e0215b4f8b2bbcd1115d1/lib/linguist/language.rb#L459 could be updated to not require the gsub.

/cc @brianmario 
",Internals,85,True,en
2274,,Externals,0,False,en
2272,"#2260

[An example `mix.lock` file](https://github.com/lpil/elixre/blob/ddabcb13a3242f855781e0b8d920f3a8b985f10f/mix.lock)
",Externals,28,True,cy
2270,"Some OCaml programs use a shebang.
",Externals,0,True,en
2269,"This is the color of the official Lua logo, as seen at http://www.lua.org/images/
",Externals,0,True,en
2266,"Can be found in Rails partial, eg `.html.ruby`
",Externals,0,True,en
2265,"[Full Changelog](https://github.com/github/linguist/compare/v4.5.2...44c3d47b307e4795e944e27c94e14dd8f5834eb2)

**Merged pull requests:**
- Updating grammars [#2264](https://github.com/github/linguist/pull/2264) ([arfon](https://github.com/arfon))
- Net linx [#2263](https://github.com/github/linguist/pull/2263) ([arfon](https://github.com/arfon))
- Fix categorization for Racket shell scripts. [#2262](https://github.com/github/linguist/pull/2262) ([drautb](https://github.com/drautb))
- .storyboard and .xib as XML [#2261](https://github.com/github/linguist/pull/2261) ([ntkme](https://github.com/ntkme))
- Bump rugged to latest release [#2259](https://github.com/github/linguist/pull/2259) ([adelcambre](https://github.com/adelcambre))
- Adding tm_scope for REBOL language and removing REBOL from LICENSE_WHITE... [#2257](https://github.com/github/linguist/pull/2257) ([Oldes](https://github.com/Oldes))
- Added grammar submodule for Red language [#2256](https://github.com/github/linguist/pull/2256) ([Oldes](https://github.com/Oldes))
- add .boot to clojure extensions [#2254](https://github.com/github/linguist/pull/2254) ([shaunlebron](https://github.com/shaunlebron))
- Fix Emacs modeline in DTrace sample. [#2253](https://github.com/github/linguist/pull/2253) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Add Neovim config file names to VimL language [#2250](https://github.com/github/linguist/pull/2250) ([shaneog](https://github.com/shaneog))
- Add a heuristic to disambiguate between NL and NewLisp [#2246](https://github.com/github/linguist/pull/2246) ([vitaut](https://github.com/vitaut))
- Fix the type classification of some languages. [#2242](https://github.com/github/linguist/pull/2242) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
- Detect generated source maps [#2213](https://github.com/github/linguist/pull/2213) ([ntkme](https://github.com/ntkme))
- Added NetLinx language. [#2101](https://github.com/github/linguist/pull/2101) ([amclain](https://github.com/amclain))
",Internals,142,True,en
2264,,Internals,0,False,en
2263,"Updated version of #2101 
",Internals,4,True,en
2262,"The current implementation categorizes shell scripts written in Racket
as Scheme, which is incorrect.

For example:

``` racket
#!/usr/bin/env racket

#lang racket

""Hello World!""
```

This should be categorized as Racket, not Scheme. [This file](https://github.com/drautb/sketchbook/blob/master/racket/sublime-project-generator/generate-sublime-project.rkt)
demonstrates the problem in an existing repository.
",Externals,0,False,en
2261,"This PR marks Xcode's .storyboard and .xib as XML files.
",Externals,0,True,en
2259,"Need this for this fix: https://github.com/libgit2/libgit2/pull/3000

/cc @vmg @simonsj 
",Externals,6,True,en
2257,"...LIST as now is license available in the Sublime-REBOL project.
",Externals,0,True,en
2256,,Externals,0,False,en
2254,"[Boot](http://boot-clj.com/) is a build tool for clojure.  The `.boot` files are just clojure files though.  Would be nice to have those highlighted accordingly on github.
",Externals,0,True,en
2253,"One of the DTrace sample files specifies the Emacs C++ mode.  The original author probably had a good reason for doing this, but for now I think it's better to modify the sample.  I believe this will fix the build failure in #2233

Apparently, the DTrace mode for Emacs is called dtrace-script:
https://github.com/dotemacs/dtrace-script-mode

For this reason, I added `dtrace-script` as a Linguist alias for `DTrace`.  I'm not at all sure if this is how the Emacs ↦ Linguist language mapping should be done.
",Externals,4,True,en
2250,"[Neovim](http://neovim.org/) uses configuration files named `.nvimrc` rather than `.vimrc`

See this PR for details neovim/neovim#330
",Externals,3,True,en
2247,"This adds the RenderScript language which use `.rs` and `.rsh`, and the closely related Filterscript which use `.fs`.  These are used in Android projects.  The exact spelling is from Android docs, but has various flavours (camel case or not).

These are estimates for the number of RenderScript and Filterscript files:
[`.rs` 62000](https://github.com/search?q=extension%3Ars+include+OR+pragma+OR+attribute+NOT+fn&type=Code)
[`.rsh` 15000](https://github.com/search?q=extension%3Arsh+NOT+slaribartfaxt)
[`.fs` 15000](https://github.com/search?q=extension%3Afs+include+OR+pragma+OR+attribute+NOT+import+NOT+uniform+NOT+varying&type=Code)

Many `.rs` files were previously misdetected as Rust, and `.fs` as GLSL.  `.rsh` seems exclusively used by RenderScript.

Tested with three sets of 1000 samples for each extension:

| `.rs` | Before | After | Actual | Comment+Link |
| --- | --- | --- | --- | --- |
| RenderScript |  | 745 | 707 |  |
| Rust | 995 | 250 | 225 |  |
| javac? |  |  | 45 | [If anyone knows what those `.rs` files in a typical Java `build/classes` tree are, let me know](https://github.com/search?q=extension%3Ars+NOT+slaribartfaxt+path%3Abuild&type=Code) |
| unknown | 5 | 5 | 12 |  |
| RedScript |  |  | 7 | [Obsolete Ruby-JavaScript hybrid](https://github.com/AdamBrodzinski/RedScript) |
| ResPack |  |  | 4 | [Compressed files](https://github.com/search?q=filename%3Arespack.rs&type=Code) |

| `.rsh` | Before | After | Actual |
| --- | --- | --- | --- |
| RenderScript |  | 1000 | 998 |
| C |  |  | 2 |
| unknown | 1000 |  |  |

| `.fs` | Before | After | Actual |
| --- | --- | --- | --- |
| Filterscript |  | 727 | 727 |
| F# | 121 | 121 | 127 |
| Forth | 120 | 120 | 110 |
| GLSL | 759 | 32 | 31 |
| unknown |  |  | 5 |
| FASM |  |  | 1 |
",Externals,93,True,en
2246,"The proposed PR adds a simple heuristic to disambiguate between NL and NewLisp files which both can have extension `.nl` (#2113).
",Externals,4,True,en
2242,"As discussed in https://github.com/github/linguist/commit/507d191d7d2b8d3ae65d2e135d715e627db1537f

Darcs Patch: `programming` → `data`
Diff: `programming` → `data`
Groff: `programming` → `markup`

Gettext Catalog has already been changed to `prose`.
",Externals,26,True,en
2241,"[Full Changelog](https://github.com/github/linguist/compare/v4.5.1...ebf10c2cd6a10e23ba3fe05a186f249e1a91a3dd)

**Merged pull requests:**
- Give Diff a color [#2236](https://github.com/github/linguist/pull/2236) ([Phasesaber](https://github.com/Phasesaber))
- Disambiguate between OCaml and Standard ML [#2227](https://github.com/github/linguist/pull/2227) ([samoht](https://github.com/samoht))
- languages.yml: don't assume .conf is Apache [#2222](https://github.com/github/linguist/pull/2222) ([chriskuehl](https://github.com/chriskuehl))
- Assign handlebars a color for the language bar. [#2198](https://github.com/github/linguist/pull/2198) ([tarebyte](https://github.com/tarebyte))
- Some .for files are text. [#2123](https://github.com/github/linguist/pull/2123) ([larsbrinkhoff](https://github.com/larsbrinkhoff))
",Internals,64,True,en
2236,"Diff (Or Patch) is something that is [used quite a lot on GitHub](https://github.com/search?utf8=%E2%9C%93&q=extension%3Adiff+NOT+nothack&type=Code&ref=searchresults) for various things, and it is usually paired with Shell. A lot of repositories, such as the @OvercastNetwork's [SportBukkit](https://github.com/OvercastNetwork/SportBukkit), only use these two things, one of which isn't represented in the language summary. If I somehow magically did this right, it should show the magnificent language in [all it's glory](http://jadonfowler.xyz/diff). 

I'd love to see this great and useful language be put next to Shell. Repositories that only use Shell should only have Shell, and repositories that use Diff & Shell should have both.
",Externals,6,True,en
2233,"This change to the emacs mode parser should correctly detect the emacs format file-type specification.  I've tested it against my current version of emacs (24.4.1), but I'd guess this interface has been stable for the last 20 years or so.

There are two major changes here:
- regex that selects the ""mode:"" portion of the per-file variable specification (which is a more accurate description of the line in the file that holds a variable specification for 'mode', rather than ""modeline"" which is a part of the GUI to emacs speakers.)
- added an alias to the Text language for 'fundamental' because that's the emacs major mode name for pure text.

Caveat: the TravisCI tests ""fail"" now because one of the DTrace test files has an emacs mode line in it that says it should be formatted as a C++ file.  What's the right thing to do about that?
",Externals,6,True,en
2232,"Adding back this check for Cython-generated files as discussed in #2172. 
",Externals,4,True,en
2231,"This pull request adds a description for the `group` attribute in `languages.yml`.
See #1548.
",Externals,4,False,en
2229,"@ashgti's pull request at textmate/perl.tmbundle#13 as been merged.
This pul request uses this grammar for Perl6 in Linguist.
",Externals,3,False,en
2227,"Fix #2208
",Externals,4,True,en
2224,"This fixes https://github.com/github/linguist/issues/2223

Not sure why we weren't just doing this originally / cc @bkeepers 
",Internals,4,True,en
2222,"The assumption that `.conf` files are Apache is causing many projects to be detected incorrectly as being primarily ""ApacheConf"".

The `.conf` extension is widely used by software; Apache accounts for only a very tiny proportion of its overall use. The addition of `.conf` for ApacheConf has resulted in projects which contain none (or almost no) Apache config being marked as primarily containing it.

The problem was introduced by 18a3ef9e5e80889d3daf88dab9338a65c97a7310
",Externals,25,True,en
2218,"This is a slightly older file format used by [AMX Mod X](https://github.com/alliedmodders/amxmodx/tree/master/plugins) which is very similiar to SourcePawn (they're both Pawn), so there shouldn't be any problems with syntax highlighting. There are also plans to move AMXX to use same SourcePawn version.
",Externals,0,True,en
2215,"Apparently [it is advised to run `sudo apt-get update`](http://docs.travis-ci.com/user/common-build-problems/#Linux%3A-apt-fails-to-install-package-with-404-error) before using any `apt` commands on travis.

This adds it to our `before_install` script, which also requires that we remove the `sudo: false` flag. We'll see how that impacts the duration of the builds.

/cc @arfon @aroben 
",Internals,4,True,en
2213,"This PR marks source maps as generated files.
",Externals,0,True,en
2209,"Adding .plsql as extension for PL/SQL
",Externals,0,True,en
2207,"I took all non-fork repositories on github.com, grouped them by their primary language, and took the 25 most popular.

@tnm Is this the criteria you've used in the past when updating this file?

/cc @github/linguist 
",Internals,2,True,en
2204,"Gettext catalogues are used for translations and are thus essentially prose, but were classified as ""programming"" in 507d191d7d.

In large projects like e.g. wesnoth/wesnoth, gettext can dominate the language statistics with about 95% although the actual code is C++.
",Externals,9,True,en
2203,"This pull request adds `.vhost` as Nginx extension as asked for in #2201.
I also explicitly added `nginx.conf` as a filename (there was already a sample file).

See [examples on GitHub](https://github.com/search?p=1&q=extension%3Avhost+NOT+djdhfidkhfjskdjfkf&ref=searchresults&type=Code&utf8=%E2%9C%93).
",Externals,11,False,en
2202,"This pull request adds `.jbuilder` as Ruby extension as discussed in #2194.
",Externals,4,True,en
2200,"Changes: https://github.com/github/linguist/compare/7bbb3da010ce19d6bacd0ae0e587b5d1d85ebd8d...44f505e687f06981fe02a660aafddf476ba3180e

Merged Pull Requests since last release:
- New Mathematica (aka Wolfram Language) extensions added  https://github.com/github/linguist/pull/2024
- PL/SQL PLpgSQL and SQLPL https://github.com/github/linguist/pull/2175
- Detection by extension made case-insensitive https://github.com/github/linguist/pull/2087
- Added a sample of a C header file that is currently recognized as C++ https://github.com/github/linguist/pull/2102
- Mark XS files as ""type: programming"" https://github.com/github/linguist/pull/2112
- tcc interpreter for C https://github.com/github/linguist/pull/2147
- Detect Go files generated by Protocol Buffers #2152 
- Test that languages have a type https://github.com/github/linguist/pull/2153
- Support for .pro INI files (KiCad project files)  #2154 
- Classify Brainfuck as a programming language and include samples #2143 
- add support for Lean Theorem Prover #2151 
- Finding by alias too. #2158 
- Add instrumentation to detection and classification #2162 
- Add MUF - Multi-user Forth  #2145 
- Add to .d: DTrace and Makefile dependencies #2128 
- Add support for the AMPL modeling and script language #2176 
- Grammar for OpenSCAD #2174 
- Instrument all calls and pass the blob, strategy and language candidates in the payload. #2173 
- More specific heuristic for Prolog #2181 
- Add designated color of eC language for display in language bar. #2184 
- Add colour for XMOS XC in linguist #2188 
- Support for NL file format #2193 
- Added XC syntax #2192 
- GLSL should not be in the C group #2196
",Internals,139,True,en
2198,"I noticed that [Handlebars](http://handlebarsjs.com/) didn't have a color for the language bar.

I used the orange from the [Handlebars T-Shirt](http://devswag.com/collections/handlebars/products/handlebars-t-shirt-1) on DevSwag.

Thanks!

Also I hope it was ok, I found some trailing white space and removed it :grin: 
",Internals,1,True,en
2196,"I believe it was a mistake to put GLSL in the C group.

E.g. this repository is reported as 100% C in the language bar:
https://github.com/larsbrinkhoff/glsl-sphere-tracing
",Externals,3,True,en
2193,"This pull request adds the NL file format as discussed in #2113.
I tested it on [ampl/mp](https://github.com/ampl/mp) with 0 incorrect detections.
",Externals,5,False,en
2192,"XC has various keywords which aren't part of C++, so while the C++ syntax highlighting mostly works, there's a lot of cases where it doesn't.

I've forked the C/C++ textmate definition and have it working for XC's extra keywords.

See [here](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgraymalkin%2Fxc.tmbundle%2Fmaster%2FSyntaxes%2FXC.plist&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fxcore%2Fsc_avb%2Fblob%2Fmaster%2Fmodule_avb%2Fsrc%2Favb.xc) for a preview.
",Externals,23,True,en
2189,"This pull request sets QML as a programming language as discussed in #1152.
",Externals,4,True,en
2188,"Adds a colour matching the XMOS colour scheme for .xc files.
",Externals,0,True,en
2184,"I'm hoping this very trivial change will give eC it's designated color in the language bar of the repository page.
Many thanks!
",Externals,0,False,en
2181,"This pull requests improves the heuristic for Prolog to avoid false positives. For instance, Perl files are sometimes detected as Prolog because they contain [a smiley in a comment](https://github.com/textmate/perl.tmbundle/blob/3396190be167310600d00da6ff9af7807cea4b12/Support/exception_handler.pm#L32).
",Externals,29,True,en
2179,"I am opening this pull request to get some help on it.
I am trying to implement the change suggested in #1685 to ignore symbolic links.

@bkeepers suggested to change [these lines in `repository.rb`](https://github.com/github/linguist/blob/master/lib/linguist/repository.rb#L153-L155). Is that going to affect the search results as well? (as @quasado wanted)

I made the changes which should ignore symlinks based on the mode attribute. I tested on the two files that I added in `test/fixtures/SVG/`. It doesn't work, the mode doesn't seem to change for a symbolic link at all... :/
",Externals,10,False,en
2178,"C was the only language to have a hex code length of 3. 
#555555 == #555 == rgb(85, 85, 85)
",Externals,16,False,en
2176,"Replaces #2073 
",Internals,4,True,en
2175,"Replaces https://github.com/github/linguist/pull/2082
",Internals,4,True,en
2174,"Replaces #2171
",Internals,4,True,en
2173,"/ cc @charliesome @vmg @bkeepers 
",Internals,0,True,en
2171,"This pull requests adds [tbuser/openscad.tmbundle](https://github.com/tbuser/openscad.tmbundle) as a grammar for OpenSCAD.
[Here is an example of the highlighting in Lightshow.](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Ftbuser%2Fopenscad.tmbundle%2Fmaster%2FSyntaxes%2FOpenSCAD.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FOpenSCAD%2Fnot_simple.scad&code=)
",Externals,22,False,en
2165,"A docs update to clarify that `.gitattributes` is only for language stats. See #2140 for the discussion.
",Externals,4,True,en
2162,"This pull request adds instrumentation to Linguist's language detection and bayesian classification.

The idea is that applications pulling in Linguist can set `Linguist.instrumenter` to `ActiveSupport::Notifications` (or whatever instrumentation service they're using) to receive instrumentation details whenever Linguist performs a detection or classification.

cc @bkeepers @vmg 
",Internals,0,True,en
2160,"GitHub current uses Perl as it was ""close enough"" but I think we should use proper syntax highlighting :)

I've added my own repo which is a Sublime Text plugin for Syntax highlighting (MIT licensed). My Nginx one is currently used so I assume the VCL one should work the same.
",Externals,0,True,en
2158,"Linguist overrides using the language aliases should work too. Previously they didn't as we did `find_by_name` instead of `find_by_alias` 

See [here](https://github.com/MarioZ/MadMilkman.Ini/commit/042dcdb8fd365ef91ac05dc18df8a48cb5013b90) for an example of this issue

/ cc @MarioZ 
",Internals,22,True,en
2157,"This color is the arithmetic average of the colors of the [J wiki icon](http://www.jsoftware.com/jwiki/moin_static194/common/jwlogo.png).  And yes, I used J to compute the average. :recycle: 
",Externals,3,True,en
2154,"This pull request adds support for `.pro` INI files (used as KiCad project files). This was asked for in #2116.

I also updated the heuristic for `.pro` to include both INI and QMake files. As discussed in #2042, currently this heuristic rule isn't used at all (because QMake is missing). This pull request fixes it.
",Externals,8,True,en
2153,"This adds a test to enforce that every language has a `type`. It also adds types for languages missing them. 
",Internals,0,True,en
2152,"This pull request adds detection for Go files generated by Protocol Buffers as asked for in #2148.
",Externals,4,True,en
2151,"[Lean code in the wild](https://github.com/search?p=1&q=extension%3Ahlean+extension%3Alean+NOT+nothack&ref=searchresults&type=Code&utf8=%E2%9C%93)
",Externals,8,True,en
2147,"This pull request adds `tcc` (Tiny C Compiler) as an interpreter for C as requested in #2127.
",Externals,4,True,en
2146,"This pull request adds support for two Text extensions mis-recognized as Mathematica (reported at #2137).

@arfon Could you send me a corpus of files from this search: https://github.com/search?o=asc&q=er+en+som+extension%3Ano+extension%3Anb&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93 and one from https://github.com/search?o=desc&q=mathematica+extension%3Ano+extension%3Anb&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93 to test this changes? Thanks.
",Externals,18,True,en
2145,"This adds MUF - Multi-user Forth, which uses both `.m` and `.muf`.

Searches find about 1000 files:
https://github.com/search?q=extension%3Am+dup+swap
https://github.com/search?q=extension%3Amuf+dup+swap

The `.muf` extension seems almost exclusively used by MUF.  However, `.m` may be the most overloaded extension of all.  Will check carefully.
",Externals,6,True,en
2141,"Changes since v4.4.1 https://github.com/github/linguist/compare/v4.4.1...7bbb3da

Merge pull request #2139 from github/stats-improvements Improve repository language statistics

/cc @github/linguist 
",Internals,12,True,en
2139,"This PR fixes a number of bugs that have been pointed out since #2097 landed.
- Reclassifies XML as `data`, since in most cases it is merely a serialization format for a tool (e.g., a project file for an IDE), not something essential to the repository that contains it.
- Adds a few more documentation and vendor patterns based on some repositories that are getting misclassified as HTML.

I'm still looking for more misclassified repos and will update this PR with more fixes.

Fixes #2124 #2134

/cc @github/linguist 
",Internals,12,False,en
2136,"Changes since v4.4.0 https://github.com/github/linguist/compare/v4.4.0...12c22d0

Merge pull request #2135 from github/rollback-clojure Roll back to language-clojure v0.10.0
Merge pull request #2133 from github/update-grammars Update grammar submodules
Merge pull request #2118 from xbony2/patch-1 Made assembly color more noticeable
Merge pull request #2119 from pchaigno/new-grammars Grammars for 4 languages
Merge pull request #2120 from github/ascii Ascii

/cc @vmg @github/linguist 
",Internals,38,True,en
2135,"v0.11.0 seems to have introduced deeply nested `meta.expression.clojure` scopes.

```
* vendor/grammars/language-clojure cfc8a5c...bae6eee (6):
  < Prepare 0.12.0 release
  < Merge pull request #14 from joelash/master
  < Prepare 0.11.0 release
  < Merge pull request #13 from hanjos/proposed
  < Add initial spec
  < Add initial Travis CI config
```

/cc @vmg
",Internals,20,True,en
2133,"```
* vendor/grammars/Modelica f2b1242...e1fd853 (1):
  > Some string improvements

* vendor/grammars/NimLime 58a1e0c...fac6b18 (2):
  > Added support for ST3
  > Merge pull request #15 from fenekku/master

* vendor/grammars/SublimePapyrus 152c7b7...2731300 (1):
  > Updated INI path setting behavior

* vendor/grammars/actionscript3-tmbundle d69fcc8...d24ad7d (1):
  > all contexts

* vendor/grammars/dart-sublime-bundle c1afc62...d55b1d4 (4):
  > Merge pull request #458 from guillermooo-forks/prep-release
  > Merge pull request #457 from guillermooo-forks/refactor
  > Merge pull request #455 from guillermooo-forks/fix-stagehand-unavailable
  > Merge pull request #452 from guillermooo-forks/improve-syntax-def

* vendor/grammars/grace-tmbundle c342d35...acbf9a2 (9):
  > Add simple block parameter highlighting
  > Track open braces for better interpolation
  > Add highlighting for full import syntax
  > Check for extra word characters after var keyword
  > Remove built-ins and change storage to support
  > Highlight untyped block parameters
  > Highlight interpolation braces as keywords
  > Highlight only capitalised words with generic args
  > Include comment highlighting in every construct

* vendor/grammars/language-javascript ac37d2a...d58edec (2):
  > Prepare 0.57.0 release
  > Merge pull request #101 from postcasio/iojs-shebang

* vendor/grammars/latex.tmbundle 0441781...669040b (1):
  > Fix doctest for `run_biber` in `texmate`

* vendor/grammars/mako-tmbundle e039636...da79638 (1):
  > Merge pull request #7 from seedofjoy/patch-1

* vendor/grammars/sublime-text-ox bdd03e0...10ca883 (5):
  > Update README.md
  > Update README.md
  > Moved license to separate md-file.
  > Ctrl+B executes on a single core instaed of two.
  > Added patterns for 'foreach' and 'delete'.
```
",Internals,120,False,en
2128,"This pull request adds the `DTrace` language, which is the most common use of the `.d` extension.  It also adds `.d` to the `Makefile` language, which is used to include dependencies.

Tested on a set of 1000 sample files:

|  | Before | After | Actual |
| --- | --- | --- | --- |
| DTrace | 0 | 641 | 635 |
| Makefile | 0 | 235 | 225 |
| D | 990 | 114 | 111 |
| _Other_ | 0 | 0 | 10 |
| C | 0 | 0 | 9 |
| Shell | 6 | 6 | 6 |
| Binary | 4 | 4 | 4 |
",Externals,40,True,en
2123,"As of late, many `.for` files have been created which are neither FORTRAN nor Forth:
https://github.com/search?q=extension%3Afor+weekly&type=Code

The contents of these files are identical.  I added it as a `Text`sample.
",Externals,1,False,en
2120,"Replaces https://github.com/github/linguist/pull/1511
",Internals,4,True,en
2119,"- BrightScript: [cmink/BrightScript.tmbundle](https://github.com/cmink/BrightScript.tmbundle) - [example in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fcmink%2FBrightScript.tmbundle%2Fmaster%2FSyntaxes%2FBrightScript.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FBrightscript%2FSimpleGrid.brs&code=)
- Stylus: [billymoon/Stylus](https://github.com/billymoon/Stylus) - [example in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fbillymoon%2FStylus%2Fmaster%2FStylus.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FStylus%2Fdemo.styl&code=) - [alternative](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fjameswomack%2FStylus-TextMate-Bundle%2Fmaster%2FSyntaxes%2FStylus.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FStylus%2Fdemo.styl&code=) (few keywords unrecognized with the second one)
- AsciiDoc: [zuckschwerdt/asciidoc.tmbundle](https://github.com/zuckschwerdt/asciidoc.tmbundle) - [example in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fzuckschwerdt%2Fasciidoc.tmbundle%2Fmaster%2FSyntaxes%2FAsciiDoc.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FAsciiDoc%2Fencoding.asciidoc&code=) - [alternative](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fmrchief%2FAsciiDoc.SublimeText2%2Fmaster%2FAsciiDoc.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FAsciiDoc%2Fencoding.asciidoc&code=) (Tags not highlighted with the second one)
- PigLatin: [goblindegook/sublime-text-pig-latin](https://github.com/goblindegook/sublime-text-pig-latin) - [example in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgoblindegook%2Fsublime-text-pig-latin%2Fmaster%2FPig%2520Latin.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FPigLatin%2Fexample.pig&code=) - [alternative](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Ftc%2Fpig-latin-tmbundle%2Fmaster%2FSyntaxes%2FPig%2520Latin.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FPigLatin%2Fexample.pig&code=) (Inline comments not highlighted with the second one)
",Externals,160,False,en
2118,"It's bothered me for a while; the Java and Assembly color look almost exactly alike. [Here's](https://imgur.com/XayyV0L) a picture for a comparison.

Anyway, this pull request changes the Assembly color from #a67219 to [#6E4C13](http://www.colorpicker.com/6e4c13), which makes it look darker and more distinctive compared to Java.
",Externals,14,True,en
2114,"Changes since v4.3.1:
#2097 Detect all markup languages when computing language statistics
#2076 Add .nasm extension for Assembly files.
#2085 Shebang first
#2100 change submodule url for proper AS3 syntax highlighting
#2098 Tweak heuristic for free-form Fortran.
#2089 Grammar for 5 languages
#2092 Add  ""use 5.xxx"" to Perl Heuristic
#2086 Grammar for Mediawiki
#2078 Grammar for Inno Setup
#2002 Rearrange docs
#2083 Making modelines case-insensitive
#2079 Missing whitespace
#2071 Grammars for 6 languages

/cc @arfon @bkeepers 
",Internals,59,False,en
2112,"I'd actually prefer to treat Perl XS files as C code, but this fix shouldn't be controversial.
",Externals,0,True,en
2102,"As per @DX-MON's request, see https://github.com/github/linguist/issues/1626#issuecomment-73870081

Taken from https://github.com/phillipberndt/pqiv/blob/469fe63df4b27463f8accf8a45ae515a17c202e7/pqiv.h
I am the file's original author.
",Externals,36,True,en
2101,"NetLinx is a language developed by [AMX](http://amx.com/) for programming control system hardware.

[NetLinx code in the wild:](https://github.com/search?q=extension%3Aaxs+extension%3Aaxi+NOT+nothack&ref=searchresults&type=Code&utf8=%E2%9C%93)
2,165 code results
",Externals,11,True,en
2100,"Current grammar doesn't work well with. It properly color neither code written in Flash Professional nor well identified code snippets in README (discussed in #2067). It works only if the complete class is defined, which can be useful for text editor, but not for GitHub's purposes. I think that it should work as expected, otherwise it's useless feature.
",Externals,4,True,en
2098,"Allow whitespace before `!`.  Fixes classification of https://github.com/Gullern/tfy4235_numfys
",Externals,4,True,en
2097,"Originally, only `programming` languages were included in repository language statistics. In 33ebee0f6a1e097550df0c7a69c5ffe57223f558 we started detecting a few selected `markup` languages as well. We didn't include all `markup` languages because at the time formats like Markdown and AsciiDoc were labeled as `markup` languages, and we thought that including those prose (i.e., non-code) languages in repository statistics on github.com was misleading for repositories that are largely about code but also contain a lot of documentation (e.g., https://github.com/rails/rails).

This hand-picked set of whitelisted `markup` languages can cause strange categorization for some repositories. For example, it includes CSS (and some variants) but not HTML. This results in repositories that contain the source code for a static website being classified as either a JavaScript (`programming`) or CSS (`markup`) repository, with no mention of HTML anywhere.

Fast-forward to today, and prose languages are no longer `markup` languages; they're now `prose` languages. So now we can include all `markup` languages in repository language statistics without worrying about undesirable effects for documentation-heavy repositories.

/cc @tnm @gjtorikian @bkeepers @arfon 
",Internals,24,True,en
2092,"This updates the Perl heuristic to detect ""use 5.xxx"" as plain ol' Perl.

Fixes: https://github.com/github/linguist/issues/2074

/cc @kentfredric
",Internals,5,True,en
2089,"PogoScript: [featurist/PogoScript.tmbundle](https://github.com/featurist/PogoScript.tmbundle) - [example in Lightshow](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Ffeaturist%2FPogoScript.tmbundle%2Fmaster%2FSyntaxes%2FPogoScript.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Flinguist%2Fmaster%2Fsamples%2FPogoScript%2Fsquashy.pogo&code=)
Opal: [artifactz/sublime-opal](https://github.com/artifactz/sublime-opal) - [example in Lightshow](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fartifactz%2Fsublime-opal%2Fmaster%2FOpal.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Flinguist%2Fmaster%2Fsamples%2FOpal%2FDeepakChopra.opal&code=) - [alternative 1](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fbsingr%2Fopal-tmbundle%2Fmaster%2FSyntaxes%2FOpal.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Flinguist%2Fmaster%2Fsamples%2FOpal%2FDeepakChopra.opal&code=) - [alternative 2](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fopal%2Fopal.tmbundle%2Fmaster%2FSyntaxes%2FOpal.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Flinguist%2Fmaster%2Fsamples%2FOpal%2FDeepakChopra.opal&code=) - The first one seems to be the only one correctly highlighting comments

The three following grammars have unrecognized licenses:
GAP: [dhowden/gap-tmbundle](https://github.com/dhowden/gap-tmbundle) - [example in Lightshow](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fdhowden%2Fgap-tmbundle%2Fmaster%2FSyntaxes%2FGAP.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FGAP%2FMagic.gi&code=) - License in the README but unrecognized
Papyrus: [Kapiainen/SublimePapyrus](https://github.com/Kapiainen/SublimePapyrus) - [example in Lightshow](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FKapiainen%2FSublimePapyrus%2Fmaster%2FCore%2FPapyrus.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FPapyrus%2FvSCM_MetaQuestScript.psc&code=) - License not found because it's in the `Core` folder
Propeller Spin: [bitbased/sublime-spintools](https://github.com/bitbased/sublime-spintools) - [example in Lightshow](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fbitbased%2Fsublime-spintools%2Fmaster%2FSpin.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FPropeller%2520Spin%2FTV.spin&code=) - zlib license in the README but unrecognized

/cc @aroben
",Externals,158,False,en
2087,"This is the implementation of an idea @larsbrinkhoff suggested in #2072.
With this pull request the search by file extensions is case-insensitive.
I wanted to see if it creates any issue with the detection.

It actually solves a few incorrect detections and I think it globally makes sense:
For instance, all `.e` files in the [Rosetta project](https://github.com/acmeism/RosettaCodeData) are detected as Eiffel but most of them are actually E code.
With this pull request the detection results get [a lot better](https://gist.github.com/pchaigno/7159e16ac9801507d60f).
In general, it looks like lower-case and upper-case extensions are regularly mixed. See #2072, #308, #268 or #1035 for examples.
",Externals,33,False,en
2086,"Grammar from this [TextMate bundle](https://github.com/textmate/mediawiki.tmbundle): [example in Lightshow](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Ftextmate%2Fmediawiki.tmbundle%2Fmaster%2FSyntaxes%2FMediawiki.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FMediaWiki%2Fmediawiki.mediawiki&code=)

[There is an alternative](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Ftosher%2FMediawiker%2Fmaster%2FMediawiki.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FMediaWiki%2Fmediawiki.mediawiki&code=) but it's basically a port of the first one to Sublime Text. I though I would need help to choose but then I saw the two are identical :/
",Externals,43,True,en
2085,"This PR moves the `Shebang` strategy above `Filename`:

``` ruby
STRATEGIES = [
  Linguist::Strategy::Modeline,
  Linguist::Shebang,
  Linguist::Strategy::Filename,
  Linguist::Heuristics,
  Linguist::Classifier
]
```

IMO `Modeline` should still be before `Shebang` as it's an explicit statement of content by the user. This PR fixes https://github.com/github/linguist/issues/2081 and https://github.com/github/linguist/issues/1991

@pchaigno said in https://github.com/github/linguist/issues/1991:

> It would require a bit of work since currently the first strategy is also generating the list of candidates but it could surely help solve this type of issue.

I don't believe this is an issue as neither the `Modeline` or `Shebang` strategies rely upon 'incoming' languages like the [`Heuristics` does](https://github.com/github/linguist/blob/f5bc9735afee25446f537f6c4f895b80438c53cc/lib/linguist/heuristics.rb#L16). As the `Filename` strategy still precedes the `Heuristics` we should be OK.

/ cc @pchaigno @bkeepers 
",Internals,39,True,en
2083,"Addresses #2039 

/ cc @mrkkrp @bkeepers 
",Internals,4,True,en
2079,,Externals,0,False,en
2078,"This pull request adds a grammar for Inno Setup. I also added a sample file.
I found two grammars for Inno Setup:
- [idleberg/InnoSetup-Sublime-Text](https://github.com/idleberg/InnoSetup-Sublime-Text): [example in Lightshow](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fidleberg%2FInnoSetup-Sublime-Text%2Fmaster%2FInnoSetup.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fcoapp-packages%2Fexpat%2F21e128c023ff2c55e05f230e5758e6a01e362c2f%2Fwin32%2Fexpat.iss&code=) (the one added in this PR)
- [shadyproject/sublime-inno-setup](https://github.com/shadyproject/sublime-inno-setup): [example in Lightshow](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fshadyproject%2Fsublime-inno-setup%2Fmaster%2FIss.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fcoapp-packages%2Fexpat%2F21e128c023ff2c55e05f230e5758e6a01e362c2f%2Fwin32%2Fexpat.iss&code=)

I chose the first one because the second one doesn't seem to recognize quoted strings. Also, it seems more active lately. However, the first one recognizes URLs as comments.
",Externals,98,False,en
2077,"Changes since `v4.3.0` https://github.com/github/linguist/compare/v4.3.0...b8f3078966e599f98a469f4c4b401e8db5be2305

Added `htmlbars` as an alias for Handlebars: https://github.com/github/linguist/pull/2000
Grammars for 8 languages: https://github.com/github/linguist/pull/2064
ATS language support: https://github.com/github/linguist/pull/2057
Add .4TH Forth extension: https://github.com/github/linguist/pull/2072
Update URL for AutoHotkey grammar: https://github.com/github/linguist/pull/2058
'Text' shouldn't qualify as a valid modeline language. https://github.com/github/linguist/pull/2063
Support of Modelica language: https://github.com/github/linguist/pull/2059
",Internals,63,True,en
2076,"There is exactly one file with the `.nasm` extension hosted ad GitHub, so feel free to close this if it's too insignificant.  On the other hand, Assembly do have ""nasm"" as an alias and search term, so it's not too far fetched to add the extension.
",Externals,0,True,en
2075,"`cpplint.py` is Google's Python script used for linting C++ files.
I have a small C++ project with `cpplint.py` included mistakenly making
Python the main language of my project.
",Externals,0,False,en
2073,"The proposed PR adds initial support for [AMPL](http://en.wikipedia.org/wiki/AMPL), a popular modeling and scripting language for mathematical optimization, including its subset called GNU MathProg. AMPL is used in a substantial number of GitHub repositories, so I think it is a useful addition. Here are a few usage examples:

https://github.com/search?p=1&q=extension%3Amod+var&ref=searchresults&type=Code&utf8=%E2%9C%93
https://github.com/search?utf8=%E2%9C%93&q=extension%3Amod+ampl&type=Code&ref=searchresults
",Externals,13,True,en
2072,"Forth already has the `.4th` extension.  Apparently, there are also Forth files with the upper-case `.4TH` extension:
http://github.com/OS2World/DEV-FORTH-Forth-2

Don't know if there are more, as I don't think it's possible to search specifically for upper-case file extensions.

Alternatively, would there be some downside to do case-insensitive comparisons for file extensions?  The only upper-case-only extensions I found in `languages.yml` were `.E` and `.ML`.
",Externals,4,False,en
2071,"This is work in progress.
- TXL: [MikeHoffert/Sublime-Text-TXL-syntax](https://github.com/MikeHoffert/Sublime-Text-TXL-syntax) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FMikeHoffert%2FSublime-Text-TXL-syntax%2Fmaster%2Ftxl.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FTXL%2FCal.txl&code=)
- G-Code: [robotmaster/sublime-text-syntax-highlighting](https://github.com/robotmaster/sublime-text-syntax-highlighting) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Frobotmaster%2Fsublime-text-syntax-highlighting%2Fmaster%2Fbin%2F%2528GCode%2529.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Flinguist%2Fmaster%2Fsamples%2FG-code%2Fsquare.g&code=)
- Grace: [zmthy/grace-tmbundle](https://github.com/zmthy/grace-tmbundle) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fzmthy%2Fgrace-tmbundle%2Fmaster%2FSyntaxes%2FGrace.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FGrace%2Fgrace_IDE.grace&code=)
- Ox: [andreashetland/sublime-text-ox](https://github.com/andreashetland/sublime-text-ox) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fandreashetland%2Fsublime-text-ox%2Fmaster%2FOx.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FOx%2Fparticle.oxo&code=) (not great but it's a start)
- eC: [ecere/ec.tmbundle](https://github.com/ecere/ec.tmbundle) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fecere%2Fec.tmbundle%2Fmaster%2FSyntaxes%2FeC.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fecere%2Fecere-sdk%2Fede06d24d3561996092a7d90b2423b9cae9f66b7%2Fide%2Fsrc%2Fdesigner%2FDesigner.ec&code=)

The following grammars have alternatives. I chose them based on the results from Lightshow and respect of [naming conventions](http://manual.macromates.com/en/language_grammars#naming_conventions) as a second factor, all opinions welcomed!
- LOLCODE: [marioaquino/LOLcode.tmbundle](https://github.com/marioaquino/LOLcode.tmbundle) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fmarioaquino%2FLOLcode.tmbundle%2Fmaster%2FSyntaxes%2FLolcode.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FLOLCODE%2FLOLTracer.lol&code=) - [alternative](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FCodaFi%2FLOLCODE.tmLanguage%2Fmaster%2FLOLCODE.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FLOLCODE%2FLOLTracer.lol&code=)
",Externals,186,False,en
2070,"Hi,

PEP-8 is not only Python's conventions for code formatting, it is also a dead simple toy assembly language, the repo of the language/environment itself is available on [Google Code](http://code.google.com/p/pep8-1/).

There's not a lot of use for it, being a toy language, it is never used in production environments.

However, we do use it for teaching purposes in a course at the university I'm attending, being a simplified assembly-level language, it is easier for students to approach machine-level concerns without getting too overwhelmed by the complexity of real-world assembly languages such as x86 or ARM.

I'm using Github as a platform for [teaching material](https://github.com/R4PaSs/PEP8-examples), since there will be some PEP-8 code hosted here, I figured this would be a good time to try and have the language recognized and highlighted by Github.

Some students also use Github as a mean to versionize their code, I have a few examples of assignments done by students during previous sessions of the course:
- [4-in-a-row](https://github.com/Freddrickk/Puissance4)
- [Brainfuck interpreter](https://github.com/madeinqc/Pep8-assembly---Brainfuck-interpreter)
- [CamelCase to snake_case converter](https://github.com/madeinqc/Pep8-assembly---Snake-case-converter)

There might be other examples of PEP-8 code on Github, but not that I personally know of.
",Externals,13,True,en
2064,"This pull request adds grammars for 8 languages which had no grammar defined before.
- APL: [StoneCypher/sublime-apl](https://github.com/StoneCypher/sublime-apl) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FStoneCypher%2Fsublime-apl%2Fmaster%2Fsupport%2FAPL.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Flinguist%2Fmaster%2Fsamples%2FAPL%2FUT.dyalog&code=)
- CLIPS: [psicomante/CLIPS-sublime](https://github.com/psicomante/CLIPS-sublime) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpsicomante%2FCLIPS-sublime%2Fmaster%2FSyntaxes%2FCLIPS.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fsmarr%2FCLIPS%2F3e7bfcbfc22ff01014feef89dc15808e1cb36e2f%2Ftest_suite%2Fsudoku.clp&code=)
- Creole: [Siddley/Creole](https://github.com/Siddley/Creole) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FSiddley%2FCreole%2Fmaster%2FCreole.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FCreole%2Fcreole.creole&code=)
- GDScript: [beefsack/GDScript-sublime](https://github.com/beefsack/GDScript-sublime) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fbeefsack%2FGDScript-sublime%2Fmaster%2FGDScript.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Flinguist%2Fmaster%2Fsamples%2FGDScript%2Fgrid.gd&code=)
- Golo: [TypeUnsafe/sublime-golo](https://github.com/TypeUnsafe/sublime-golo) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FTypeUnsafe%2Fsublime-golo%2Fmaster%2Fgolo.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fmaster%2Fsamples%2FGolo%2Fasync.golo&code=)
- J: [bcj/JSyntax](https://github.com/bcj/JSyntax) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fbcj%2FJSyntax%2Fmaster%2FJ.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fglts%2FJPlayground%2F8b71bdb5905630a8c5720ef38b5a9bf99532254a%2FJforC%2Fstwij.ijs&code=)
- KRL: [drautb/krl-syntax](https://github.com/drautb/krl-syntax) - [example](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fdrautb%2Fkrl-syntax%2Fmaster%2FKRL.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fpchaigno%2Flinguist%2Fmaster%2Fsamples%2FKRL%2Fhelloworld.krl&code=)
- RMarkdown: Same grammar as Markdown. It's very similar (it's even rendered the same way in [markup](https://github.com/github/markup/pull/343)).
",Externals,198,False,en
2063,"A number of `.f` files previously correctly identified as Forth, are now identified as Text. This is because they contain the Emacs modeline `-*- text -*-`.

Perhaps it would be appropriate to exclude text from the modeline strategy?

http://github.com/search?q=extension%3Af+dup+swap+text&type=Code
",Externals,1,True,en
2059,"This pull request adds Modelica as a programming language in Linguist.
@thorade made a first attempt to add it a long time ago: #107. At the time it caused issues with GNU gettext files (#119) and was reverted (cb80982).

`.mo` GNU gettext files are binary files. They are now detected correctly as binary by Linguist.
For this reason, the Modelica language can be added back.

I tested it against [the repository](https://github.com/lesterchan/wp-pagenavi) linked in #119 to make sure that the issue with GNU gettext is solved.

This Sublime Text package is used for syntax highlighting: https://github.com/BorisChumichev/modelicaSublimeTextPackage:
- [`Translational.mo`](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2FBorisChumichev%2FmodelicaSublimeTextPackage%2Fblob%2Fmaster%2FModelica.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fgithub.com%2Fmodelica%2FModelica%2Fblob%2Frelease%2FModelica%25203.2.1%2FMechanics%2FTranslational.mo&code=)
- [`modelica.mo`](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2FBorisChumichev%2FmodelicaSublimeTextPackage%2Fmaster%2FModelica.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fgithub%2Flinguist%2Fce5402dd55c274ac22743f293b35aefd543997da%2Ftest%2Ffixtures%2Fmodelica.mo&code=)
",Externals,90,False,en
2058,"The grammar for AutoHotkey moved from [robertcollier4/AutoHotkey](https://github.com/robertcollier4/AutoHotkey) to [ahkscript/AutoHotkey](https://github.com/ahkscript/AutoHotkey).

/cc @robertcollier4
",Externals,3,True,en
2057,"Originally, ATS is parsed as OCaml. Now we have a dedicated ATS syntax definition converted from ATS SublimeText syntax def. But I removed "".atxt"" support. And the ACE Mode is still in OCaml. 
",Externals,0,True,en
2056,"Changes since `v4.2.7`: https://github.com/github/linguist/compare/v4.2.7...2b7a488d646bed5d5f976ffa47dbb80da0c24831

Merged pull requests since `v4.2.7` release:

Rusthon to languages list for syntax highlighting: https://github.com/github/linguist/pull/2001
NewLisp language support: https://github.com/github/linguist/pull/1143
Disambiguate Matlab, Objective-C, Mathematica, M, and Mercury: https://github.com/github/linguist/pull/1652
Specify ace_mode for OpenSCAD: https://github.com/github/linguist/pull/2025
GAP and Scilab disambiguation: https://github.com/github/linguist/pull/2030
Better samples for Pascal: https://github.com/github/linguist/pull/2031
Better ASP syntax highlighting: https://github.com/github/linguist/pull/2037
Support Vim and Emacs modelines for syntax highlighting https://github.com/github/linguist/pull/2041
Grammar for Liquid templates: https://github.com/github/linguist/pull/2044
Update Powershell grammar: https://github.com/github/linguist/pull/2047
Update Swift grammar: https://github.com/github/linguist/pull/2048
Add `.cp` as valid C++ extension: https://github.com/github/linguist/pull/2055
",Internals,80,True,en
2055,"Replaces https://github.com/github/linguist/pull/1878
",Internals,4,True,en
2048,"Corrected an issue with Swift comments as reported at textmate/swift.tmbundle#11, updated submodule.
",Externals,2,True,en
2047,"+Improve samples for PS.
This PR is followup for #2043 
",Externals,4,False,en
2044,"This PR adds a grammar for Liquid from a [TextMate bundle](https://github.com/bastilian/validcode-textmate-bundles) as discussed in #1903.

/cc @arfon @spplante
",Externals,4,True,en
2041,"Starting work on overrides based upon Vim and Emacs modelines.

Fixes https://github.com/github/linguist/issues/781 https://github.com/github/linguist/issues/875 https://github.com/github/linguist/issues/1792 https://github.com/github/linguist/issues/1210 https://github.com/github/linguist/pull/894
",Internals,17,True,en
2037,"As discussed in #895, this pull request changes the TextMate scope for ASP from `source.asp` (implicitly) to `text.html.asp`. Examples on Lightshow:
- [source.asp](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Ftextmate%2Fasp.tmbundle%2Fmaster%2FSyntaxes%2FASP.plist&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fabitgone%2Flinguist-aspx-comments%2Fmaster%2Ftest.aspx&code=)
- [text.html.asp](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Ftextmate%2Fasp.tmbundle%2Fmaster%2FSyntaxes%2FHTML-ASP.plist&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fabitgone%2Flinguist-aspx-comments%2Fmaster%2Ftest.aspx&code=)
",Externals,43,False,en
2006,"I think we should separate the detection by filenames from the detection by file extensions. I'm opening this issue to discuss the pros and cons of this approach.

So I think we should have a new Strategy that checks if a file match one of the filenames defined in `languages.yml`. If it does, then it can return directly the language associated. If none is found, the process can continue as usual.

This new strategy would fix many _miss-detections_ currently happening:
- [`CMakeLists.txt` detected as Text instead of CMake](https://github.com/search?l=text&o=desc&q=filename%3ACMakeLists.txt+cmake_minimum_required&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93)
- [`pom.xml` detected as XML instead of Maven POM](https://github.com/search?l=xml&q=filename%3Apom.xml+xml&ref=searchresults&type=Code&utf8=%E2%9C%93) (all `.xml` filenames have miss-detections)
- Executable files: see [Makefile](https://github.com/search?l=perl&q=filename%3AMakefile+all&ref=searchresults&type=Code&utf8=%E2%9C%93), [Dockerfile](https://github.com/search?l=bash&o=desc&q=filename%3ADockerfile+env&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93) or [Cakefile](https://github.com/search?l=javascript&q=filename%3ACakefile+if&ref=searchresults&type=Code&utf8=%E2%9C%93).

The only drawback I see so far is that there might be some cases where developers use filenames defined in `languages.yml` for other language than what there are usually associated to. I think it's an acceptable drawback because the filenames defined in `languages.yml` are sufficiently specific and if it does happen, they can always use the Overrides.

/cc @arfon @bkeepers 
",Externals,30,True,en
2031,"This pull request replaces one of the Pascal samples with three new ones.
There was an issue, reported in #2027, with the comments in the old one. A great number of dashes in Pascal multi-line comments were interpreted by the classifier during training. This had the effect to detect potential Pascal files (for example Puppet `.pp` files) with many dashes as Pascal files.
",Externals,4,False,en
2030,"Replaces #1541 and #1523 
",Internals,8,True,en
2025,,Externals,0,False,en
2024,"Added Wolfram Language extensions .wl, .wlt and .mt to the Mathematica section.
Checked whether other languages have the same extensions I introduced which is not the case.
Added a sample .wlt file for a Wolfram Unit Test
",Externals,0,False,en
2017,"Reverts github/linguist#2014
",Internals,4,True,en
2015,"Changes since `v4.2.6`: https://github.com/github/linguist/compare/v4.2.6...94d4d92cc0b6aa3c1c3f3a23bd5887705133c917

Merged Pull Requests since v4.2.6:

Recommend updating grammars when releasing: https://github.com/github/linguist/pull/1963
Add missing ^ in regexp for Frege heuristic: https://github.com/github/linguist/pull/1970
Add a language grammar for Nit: https://github.com/github/linguist/pull/1973
Update Hy support by adding a reference to an Atom grammar: https://github.com/github/linguist/pull/1974
Grammar for HTTP highlighting: https://github.com/github/linguist/pull/1975
Grammar for AutoHotKey: https://github.com/github/linguist/pull/1977
More CMake samples: https://github.com/github/linguist/pull/1978
New grammar for Racket: https://github.com/github/linguist/pull/1982
Add *.sagews to languages.yml: https://github.com/github/linguist/pull/1989
Support for web ontology language (OWL): https://github.com/github/linguist/pull/1995
Add FXML to languages.yml: https://github.com/github/linguist/pull/1996
Add pike interpreter for Pike: https://github.com/github/linguist/pull/1998
Heuristics for .cs files: C# and Smalltalk: https://github.com/github/linguist/pull/2003
Add Rexfile: https://github.com/github/linguist/pull/2005
",Internals,91,True,en
2014,"Reverting github/linguist#1976 so I can get all of the other changes live while debugging this issue with path changes on dotcom.
",Internals,4,True,en
2007,"More info about specFlow here http://www.specflow.org/
",Externals,0,True,en
2005,"That's a Vagrantfile-like file for the [Rex provisioning too](http://rexify.org). 
",Externals,0,True,en
2003,"This pull request adds heuristic rules to distinguish C# and Smalltalk on the `.cs` extension.
It solves the issues reported in #1907.

Here are the results of the detection when running Linguist on a few repositories (the 7 last are from #1907):

|  | Actual language | C# | Smalltalk |
| --- | --- | --- | --- |
| [1,000 first results from C# search](https://github.com/search?o=desc&q=extension%3Acs+public&ref=searchresults&s=&type=Code&utf8=%E2%9C%93) | C# | 100% | 0.00% |
| [theseion/pharogenesis](https://github.com/theseion/pharogenesis) | Smalltalk | **7.26%** | 92.74% |
| [nant/nant](https://github.com/nant/nant) | C# | 100.00 | 0.00% |
| [LouisTakePILLz/ExtensionLib](https://github.com/LouisTakePILLz/ExtensionLib) | C# | 100.00 | 0.00% |
| [Robmaister/SharpFont](https://github.com/Robmaister/SharpFont) | C# | 100.00 | 0.00% |
| [ShareX/ShareX](https://github.com/ShareX/ShareX) | C# | 100.00 | 0.00% |
| [sillsdev/phonology-assistant](https://github.com/sillsdev/phonology-assistant) | C# | 100.00 | 0.00% |
| [JoshKeegan/PiSearch](https://github.com/JoshKeegan/PiSearch) | C# | 100.00 | 0.00% |
| [JoshKeegan/hpop](https://github.com/JoshKeegan/hpop) | C# | 100.00 | 0.00% |

The only miss-detection is for [theseion/pharogenesis](https://github.com/theseion/pharogenesis) which is a really big collection of Smalltalk files (~43,800 of them). The results from Linguist don't change before and after this pull request (7.23% C# before). I looked at the content of a few of the miss-detected files and they were all really small files (no more than 10 lines).
",Externals,98,False,en
2002,"The goal of this is to move some of the content around so the `README.md` is focused mostly on GitHub.com users troubleshooting issues, and `CONTRIBUTING.md` is focused on how the library actually works and ways to make it better.

For this first pass, I just moved all the content from `README.md` and `Contributing.md` into a temp file and started moving sections back into each file in a way that made some sense. Now I want to go through and figure out what's missing and make it all more cohesive.

/cc @arfon @pchaigno 
",Internals,0,True,en
2001,"fixes syntax highlighting for rusthon code in markdown on github.

``` python
a = [1,2,3]
```

should have same syntax colors as above.

``` rusthon
a = [1,2,3]
```

rusthon project page:
https://github.com/rusthon/Rusthon
",Externals,6,True,en
2000,"See [tildeio/htmlbars](https://github.com/tildeio/htmlbars) for reference.
",Externals,0,True,en
1999,,Internals,0,False,en
1998,"Fixes detection of Pike files without file extensions but with interpreter specified.
",Externals,0,True,en
1996,"FXML is an XML-based language that provides the structure for building a user interface of a JavaFX application.
http://docs.oracle.com/javase/8/javafx/api/javafx/fxml/doc-files/introduction_to_fxml.html
",Externals,1,False,en
1995,"The Web Ontology Language (OWL) is a family of knowledge representation languages for authoring ontologies, created by W3. 
The languages' syntax is simply ""xml"". 
The languages' file extension is "".owl"". 

With this in mind the addition was trivial.

Thanks
Guy
",Externals,1,False,en
1989,"Please mark *.sagews files as Sage. Thanks in advance.
",Externals,0,True,en
1986,"This pull request removes the last mentions of `lexer` in `language.rb` and `languages.yml` and updates the comments.
",Externals,0,True,en
1982,"This pull request adds the new grammar for Racket proposed by @soegaard in #1946.
It should fix the issues #1822 and #1887 for Racket.

Example on Lightshow: [before](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=source.racket&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fsoegaard%2Fracket-highlight-for-github%2Fmaster%2Fracket.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fdscorbett%2Fpygments%2F78f24f4def553698979b785739461fc7602f777b%2Ftests%2Fexamplefiles%2Fexample.rkt&code=) and [after](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fsoegaard%2Fracket-highlight-for-github%2Fmaster%2Fracket.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2Fdscorbett%2Fpygments%2F78f24f4def553698979b785739461fc7602f777b%2Ftests%2Fexamplefiles%2Fexample.rkt&code=).
",Externals,114,False,en
1978,"Fixes #1961 by adding six more CMake samples.
",Externals,4,True,en
1977,"Replaces https://github.com/github/linguist/pull/1951
",Internals,4,True,en
1976,"/ cc @aroben 
",Internals,0,True,de
1975,"Replaces https://github.com/github/linguist/pull/1952
",Internals,4,True,en
1974,"This updates https://github.com/github/linguist/pull/1921 to work against master.

/cc @rwtolbert
",Internals,4,True,en
1973,"This updates https://github.com/github/linguist/pull/1806 to work against master.

/cc @R4PaSs 
",Internals,5,True,en
1970,"Forgot to match keywords only at the beginning of a line.  This caused some false positives.
",Externals,0,True,en
1965,"Now that all our grammars are licensed (or grandfathered in), we can distribute them as part of the standard github-linguist gem. This makes it easier for projects to get up and running with Linguist.

/cc @bkeepers @arfon @vmg
",Internals,0,True,en
1963,"This will help ensure we keep pulling in fixes from the grammar repos.

/cc @bkeepers https://github.com/github/linguist/pull/1953#issuecomment-69073698
",Internals,12,True,en
1962,"PRs merged since v4.2.5:

899dc07 Merge pull request #1938 from floscher/carto-grammar – Add grammar for CartoCSS
952acc9 Merge pull request #1958 from floscher/fix-convert-script – Fixes script/convert-grammars: require thread-gem and solve problem with visibility of variable p
650f267 Merge pull request #1959 from floscher/licence – Allow British-English spelled LICENCE-files
8430f69 Merge pull request #1954 from github/test-grammar-licenses – Test that all grammar submodules have an appropriate license
7069903 Merge pull request #1909 from github/scopes-test – Test that grammars.yml lists the right scopes for each submodule
e2d6aec Merge pull request #1956 from github/new-sass-grammar – Switch Sass grammar to nathos/sass-textmate-bundle
b499a07 Merge pull request #1931 from github/travis-container – Opt in to container-based Travis CI builds
ae6b0f0 Merge pull request #1953 from github/update-grammars – Update all grammar submodules
4428e62 Merge pull request #1950 from github/upstream-c-bundle – Switch back to textmate/c.tmbundle
ec01672 Merge pull request #1866 from github/cpp-c-improvements – Better C++ regex
55132f2 Merge pull request #1945 from thotypous/bluespec – Add Bluespec SystemVerilog grammar
4c63827 Merge pull request #1942 from pchaigno/xml.dist – Add .xml.dist as a XML file extension
1f1ffcb Merge pull request #1930 from github/minitest – Switch to Minitest::Test instead of Test::Unit::TestCase
71132d4 Merge pull request #1922 from Mailaender/patch-2 – Added support for Mono .dll.config XML files
2be3220 Merge pull request #1940 from github/fix-multiple-extensions – Fix for extensions with multiple segments
c783acc Merge pull request #1937 from github/hack-highlighting – Update languages.yml for Hack syntax-highlighting
41f0950 Merge pull request #1933 from floscher/patch-1 – Added CartoCSS to languages.yml
c911c5c Merge pull request #1932 from deadfoxygrandpa/elm – Update Elm support by adding its own syntax highlighting
795f42c Merge pull request #1832 from pchaigno/optimize-generated – Optimization of generated?
d540ec0 Merge pull request #1928 from github/contributing-update – Update including explicit steps to resolve conflicts.
20d5b81 Merge pull request #1929 from github/1304-local – Take 2: Add support for .sls YAML files (SaltStack states)
3c60fba Merge pull request #1926 from github/sas-grammar – Added support for SAS syntax.
80ed2d6 Merge pull request #1920 from pchaigno/webidl-grammar – Grammar for WebIDL
6f014f8 Merge pull request #1896 from github/grammar-submodules – Move all grammars that use Git repos to submodules
587ab35 Merge pull request #1904 from github/remove-cached-gems – Remove cached gems
15191b0 Merge pull request #1890 from github/cut-release-v4.2.4 – Updating Linguist version for v4.2.4
f5f9cce Merge pull request #1895 from github/bootstrap-script – Add script/bootstrap
",Internals,250,True,en
1959,"The license-file in [yohanboniface/carto-atom](https://github.com/yohanboniface/carto-atom) is called [`LICENCE`](https://github.com/yohanboniface/carto-atom/blob/master/LICENCE) (British-English spelling) and thus not covered by the current RegEx in [test_grammars.rb](https://github.com/github/linguist/blob/8430f694e549c6bb0ad61bbd444759aa17664997/test/test_grammars.rb), which was introduced in #1954.

This pull request changes this RegEx to also accept files called `LICENCE`.
",Externals,32,True,en
1958,"This solves two problems with [8430f694e5/script/convert-grammars](https://github.com/github/linguist/blob/8430f694e549c6bb0ad61bbd444759aa17664997/script/convert-grammars):
- The `thread`-gem is required for the script, because otherwise Ruby throws an exception that [`Queue` in line 256](https://github.com/github/linguist/blob/8430f694e549c6bb0ad61bbd444759aa17664997/script/convert-grammars#L256) is an uninitialized constant
- The variable `p` was previously in the same method with [the status message saying `OK ‹path› ‹converted scopes›`](https://github.com/github/linguist/blob/8430f694e549c6bb0ad61bbd444759aa17664997/script/convert-grammars#L207). But `p` is now defined in load_grammars() and thus not visible when showing the OK-message in install_grammars(). This was solved by adding the `path`-parameter to install_grammars().
",Externals,101,False,en
1956,"This updates https://github.com/github/linguist/pull/1852 to work with master.

This provides better highlighting in many cases than the previous grammar.

/cc @pzi
",Internals,4,True,en
1955,"This pull request changes the language for three samples added in #1132.
I moved them from `Zephir/` to `C/` and `PHP/`.
The three files are generated from Zephir code but are actually C and PHP code.

I wonder if we could have written a test to detect this.
/cc @arfon @bkeepers 
",Externals,4,False,en
1954,"We require all grammars to have a license that permits redistribution. A few existing grammars have been grandfathered in without a license (and we're working to remedy that), but no new grammars should be added without a license.

/cc @bkeepers @arfon @pchaigno @vmg
",Internals,0,True,en
1953,"This was performed via `git submodule update --remote`.

```
* vendor/grammars/Agda.tmbundle 784f435...68a218c (1):
  > Merge pull request #1 from aroben/patch-1

* vendor/grammars/IDL-Syntax 9473b7f...3baeaea (1):
  > Merge pull request #3 from aroben/patch-1

* vendor/grammars/NimLime 7a2fb4e...9cef4b6 (4):
  > Updated command names
  > Updated generated documentation
  > renamed more from nimrod to nim
  > Renamed several files

* vendor/grammars/SCSS.tmbundle d6188e5...4147502 (1):
  > Merge pull request #181 from redgluten/master

* vendor/grammars/Sublime-VimL 6ab7e19...366fdc6 (1):
  > Merge pull request #2 from yous/fix-single-quoted-string

* vendor/grammars/factor 2dc5590...2453a78 (38):
  > json.writer: make sure we make hex values two digits zero padded.
  > json.writer: support escaping unicode > 0x10000.  Thanks @jonenst!
  > mason.git: fix status check.
  > compiler.cfg.*: new unit test vocabs
  > compiler.cfg.*: more docs
  > compiler.cfg.*: refactoring away the compute-global-sets word
  > compiler.cfg.*: docs and more tests
  > compiler.cfg.stacks.local: refactoring making stack-changes and height-changes take and return stuff instead of using variables and the make building
  > compiler.cfg.parallel-copy: docs
  > compiler.cfg.stacks.height: these words are unused
  > compiler.cfg.*: more compiler docs
  > compiler.cfg.stacks.finalize: initial docs
  > io.launcher: fix stack effects.
  > io.launcher: fix docs for with-process-reader and with-process-writer.
  > io.launcher: add versions of with-process that preserve process and status.
  > mason.git: fix use.
  > mason.git: fix for rename.
  > io.launcher: cleanup public interface, make some things private or internal.
  > gopher: set 1 minute timeout by default.
  > brainfuck: cleanup tests.
  > json.writer: don't escape spaces, thats weird.
  > unix: some using cleanups.
  > python: rename startup/shutdown hooks.
  > math.extras: adding the Möbius function.
  > alien.c-types: move definitions of stdint.h from unix.types.
  > gopher: use contents now that it works.
  > io.ports: Make buffered-port not have a length because of Linux virtual files and TCP sockets. Related to issues #1256 and #1259.
  > tools.deploy.backend: add word for deleting cached staging images.
  > command-line: save the executable in a variable so that people don't use (command-line) directly if possible.
  > bootstrap: fix this use of (command-line).
  > tools.deploy.shaker: set the rest of the args to preserve current behavior.
  > vm: store full command-line including executable first argument.
  > gopher: fix bug where empty lines weren't printed properly in menus.
  > gopher: simplify.
  > gopher: change gopher-text to use split1.
  > io.encodings.detect: simplify prolog-tag.
  > gopher: add way to get result without converting to objects.
  > tools.disassembler: allow disassemble of compose and curry.

* vendor/grammars/fsharpbinding af755c8...d097476 (24):
  > Merge pull request #909 from cbowdon/issue877-vim-73-support
  > Merge pull request #913 from 7sharp9/Move_GetColourizations_toBg
  > Merge pull request #912 from 7sharp9/TryFind_opt
  > Merge pull request #911 from 7sharp9/FoldingParser
  > Merge pull request #908 from 7sharp9/TooltipOverhaul_AutoParamFix
  > Merge pull request #907 from 7sharp9/Movegetdefinestomodule
  > Merge pull request #906 from 7sharp9/tooltipfixforclosures
  > Merge pull request #905 from 7sharp9/ResolverProvider_singletimeout
  > Merge pull request #904 from fsharp/revert-903-ResolverProvider_singletimeout
  > Merge pull request #903 from 7sharp9/ResolverProvider_singletimeout
  > Merge pull request #902 from 7sharp9/ParameterCompletion_gatherTimeout
  > Merge pull request #901 from 7sharp9/Changed_invalidate_project
  > Merge pull request #900 from 7sharp9/Syntaxmode_removeextraoperation
  > Merge pull request #899 from 7sharp9/tooltips_ensureTimout
  > Merge pull request #898 from 7sharp9/pathextension_useAddRange
  > Merge pull request #897 from 7sharp9/resolverprovider_ensuretimout
  > Merge pull request #896 from 7sharp9/completion_ensuretimout
  > Merge pull request #895 from cbowdon/894-Vim-fix-for-no-completions-stacktrace
  > Merge pull request #890 from wangzq/gotodecl
  > Merge pull request #893 from 7sharp9/fixfortooltipvaltypes
  > Merge pull request #892 from 7sharp9/fixforprojecttypechecking
  > Added correct indentation
  > Merge pull request #891 from 7sharp9/ImproveImplementInterface
  > Merge pull request #888 from VincentDondain/master

* vendor/grammars/haxe-sublime-bundle 58cad47...e2613bb (4):
  > fixed goto definition / find type
  > clean
  > adaptations for toplevel completion
  > first test

* vendor/grammars/language-gfm c6df027...7b62290 (7):
  > Prepare 0.59.0 release
  > scoped-properties -> settings
  > Prepare 0.58.0 release
  > Merge pull request #67 from davidcelis/master
  > Prepare 0.57.0 release
  > Prepare 0.56.0 release
  > Merge pull request #64 from atom/mb-new-cpp-scope-name

* vendor/grammars/language-javascript 15dc5d1...6690feb (5):
  > Prepare 0.52.0 release
  > Merge pull request #82 from Hurtak/feature/snippets-for
  > Merge pull request #80 from Hurtak/feature/snippets-querySelector
  > Merge pull request #79 from Hurtak/feature/snippets-switch-indentation-fix
  > Merge pull request #81 from Hurtak/feature/snippets-iife

* vendor/grammars/language-python 476a353...f518e49 (5):
  > Prepare 0.28.0 release
  > Use trailing scope name
  > Merge pull request #48 from msabramo/patch-1
  > Prepare 0.27.0 release
  > Add pattern for nonlocal keyword

* vendor/grammars/language-sass 064a8b5...33efa33 (2):
  > Prepare 0.29.0 release
  > Allow + and - in selector argument

* vendor/grammars/language-shellscript e2d62af...cbec163 (2):
  > Prepare 0.11.0 release
  > Merge pull request #4 from hd-deman/patch-1

* vendor/grammars/latex.tmbundle 682c4b7...52b2251 (42):
  > Replaced `python` with `python2.7` in shebangs
  > Make the preferences compatible with Python 3
  > Handle manual spacing in “Reformat” (Table)
  > Fix: Reformatting of table containing empty cells
  > Use more descriptive variable names in `format`
  > Add documentation to `reformat`
  > Fix doctest in `refresh_viewer`
  > Add tests for `reformat`
  > Ignore “exit discard” status in `cramtests`
  > Remove print statements from `reformat` function
  > Fix: Close log window option ignored
  > Automatically scroll to bottom in “HTML Output”
  > Handle “\” signs in the notification window
  > Fix missing logname in default error message
  > Extend list of auxiliary files
  > Remove unused code from `latex_watch`
  > Display default message in notification window
  > Sort error messages by line number
  > Do not store duplicate error messages anymore
  > Close notification window on cleanup
  > Improve reopening of closed notification windows
  > Improve rewrap code in `texparser`
  > Improve readability of verbose log output
  > Only parse log file if there were changes
  > Remove unnecessary function call in “LaTeX Watch”
  > Properly close file in `guess_tex_engine`
  > Handle log messages containing double quotes
  > Left justify severity in notification window
  > Handle manual closing of notification window
  > Add additional information to notification window
  > Remove unused code from `texparser`
  > Close notification when typesetting succeeds
  > Add support for notifications to “LaTeX Watch”
  > Update bundle preference values instantly
  > Make “Reformat” (Table) compatible with Ruby 2
  > Ignore escaped ampersand `\&` in “Format” (Table)
  > Remove warnings reported by `RuboCop`
  > Format code for “Reformat” (Table)
  > Move code for “Reformat” into separate script
  > Save “Reformat” command with TextMate 2
  > Remove unused import
  > Use explicit import in “Itemize Lines In Selection”

* vendor/grammars/mercury-tmlanguage b5a4fd6...eaef0b0 (8):
  > Add require_* and some, all keywords
  > Highlight %f format specifiers, `` as op
  > Correct implementation of '''', """""""" and 0'<char>
  > README.md: Mention GitHub grammar compatability
  > README.md: add resources and demonstration
  > reformatted whitespace; added foreign mods; missing keywords
  > Highlight variables, determ decls, more pragmas
  > no highlighting of variables, function names, type names, inst's, etc.

* vendor/grammars/sublime-mask 2f59519...632ff3c (4):
  > v0.8.7
  > v0.8.7
  > + expression in component nodes
  < v0.8.6

* vendor/grammars/swift.tmbundle 81a0164...3c7eac5 (9):
  > Use constant scope for booleans
  > Use storage scope instead of keyword
  > Correct typo in include
  > Revamp string literal matching
  > Improve punctuation scopes
  > Allow for functions without a body
  > Add simple folding markers for swift
  > Improved matching of capture specifiers
  > Add Support for UInt, Int[8|16|32|64] & Float80
```

/cc @arfon @bkeepers @pchaigno 
",Internals,388,True,en
1952,"This pull request adds [a grammar](https://github.com/httpspec/sublime-highlighting) for HTTP as discussed in #1862.
",Externals,4,True,en
1951,"This pull request adds [a grammar](https://github.com/robertcollier4/AutoHotkey) for AutoHotkey as discussed in #1898.
",Externals,5,True,en
1950,"We were using a fork to get the fix for https://github.com/textmate/c.tmbundle/pull/24 before it was merged upstream. Now it's been merged so we can go back to the upstream repository.

/cc @vmg https://github.com/github/linguist/issues/1879
",Internals,6,True,en
1945,"The grammar is not perfect, but produces almost the same syntax highlighting as the official vim highlighter provided by the vendor, and is far better than using a Verilog highlighter (as it is currently done).

I have tested the grammar on [Lightshow](https://lightshow.githubapp.com) and it worked correctly with the [samples](https://github.com/github/linguist/tree/master/samples/Bluespec) already present in the repository. I hope I did not forget anything - please tell me if anything is missing from this pull request.
",Externals,0,True,en
1944,"This pull request reverts #1438.
In #1438 I removed all file extensions with multiple segments.
Linguist now support them so we can add them back :zap: 

It should also solve #1568.
",Externals,12,False,en
1942,"This PR adds `.xml.dist` as a XML file extension.
Many example of these files can be seen in: https://github.com/search?o=asc&q=extension%3Adist+xml+version&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93
",Externals,6,False,en
1940,"Fixes #1731 by cherry-picking commit from @larsbrinkhoff in https://github.com/github/linguist/pull/1830.
",Internals,8,True,en
1938,"This pull request has to wait, until yohanboniface/carto-atom#1 is resolved. But I'm optimistic, that the owner will choose a suitable license. He [has noted in the package.json](https://github.com/yohanboniface/carto-atom/blob/master/package.json#L5) that he intended to release it under WTFPL.

In order to get this work, I had to change the `download-grammars`-script to accept files that end with `.json` instead of `.cson`.
",Externals,2,True,en
1937,"Setting correct tm_scope: text.html.php
",Internals,0,True,en
1933,,Externals,0,False,en
1932,"Until now, Elm's been using Haskell syntax highlighting. The language has grown farther apart from Haskell in the past months and could really use its own highlighting at this point.
",Externals,0,True,en
1931,"This speeds up our builds by providing lower latency, better caching, and more resources on the build machine. See http://docs.travis-ci.com/user/workers/container-based-infrastructure/.

The only major change here is that we can't install `libicu-dev` globally on the test machine. Instead we extract it to `vendor/debs` and point `charlock_holmes` at it.

Note that the build sometimes fails because apparently the `ace_modes.json` file sometimes can't be downloaded. This would normally cause us to skip the test that relies on that file, but `#skip` doesn't exist in the version of `test-unit` being used on Ruby 2.2. #1930 will fix the `#skip` problem. I doubt that the intermittent failure to download `ace_modes.json` is unique to container-based builds, though I suppose it's possible.

/cc @arfon @bkeepers 
",Internals,6,True,en
1930,"This gives us a consistent test framework across all Ruby versions which should help avoid errors that are only found when CI runs the tests on different Rubies. (And this fixes an immediate bug where there's no  `skip` method in the version of test-unit we're currently using only on Ruby 2.2.)

/cc @arfon @bkeepers 
",Internals,2,True,en
1929,"Updated version of #1304 
",Internals,4,True,en
1928,,Internals,0,False,en
1926,"This updates #1781 to use a submodule for the grammar, since that's how we're doing things now.

/cc @rpardee @pchaigno
",Internals,4,True,en
1922,"Reference: http://www.mono-project.com/docs/advanced/pinvoke/dllmap/#example

Example: https://github.com/OpenRA/OpenRA/blob/release-20141029/thirdparty/SharpFont.dll.config
",Externals,8,True,en
1920,"WebIDL was added in #1850 by @othree.
The [grammar](https://github.com/andik/IDL-Syntax) used a scope name (`source.idl`) conflicting with IDL.
Thus, @aroben removed it in #1891.
It was changed in andik/IDL-Syntax#2 and now is `source.webidl`.
",Externals,9,False,en
1916,"http://standards.freedesktop.org/desktop-entry-spec/latest/
",Externals,0,True,en
1912,"Many repos (especially Meteor repos) are being mistakenly marked as CSS due to innumerable lines of supposedly excluded auto-generated CSS code not being excluded from statistics.
Here are some examples:
https://github.com/Differential/meteor-boilerplate
https://github.com/Urigo/angular-meteor
https://github.com/yogiben/meteor-starter
https://github.com/0a-/0a.io
",Externals,2,False,en
1909,"`convert-grammars` now supports a few flags that we can use to make it dump out the YAML just for the local grammar submodules. We can then compare this to the YAML that's actually in grammars.yml to check that they're the same. If they aren't, `grammars.yml` needs to be updated. This will help catch mistakes like using the wrong scope name.

/cc @bkeepers @arfon @pchaigno 
",Internals,0,True,en
1905,"The Cassandra Query Language is pretty similar to that of SQL with a few trivial changes. Whenever I try .sql file extensions it maps closely to what I would expect.

https://cassandra.apache.org/doc/cql3/CQL.html

Here are the change for .cql and, more broadly, .ddl files.

Thanks!
",Externals,1,True,en
1904,"`script/bootstrap` from #1895 failed for me since it is using `--local`, but `Gemfile.lock` is not committed, so I was apparently using a newer version of some gems locally.

I don't think we need to even have these cached anymore.

/cc #1735 @arfon @aroben 
",Internals,8,True,en
1900,"While not perfect, it turns out that source.smalltalk is a better fit for highlighting STON files than source.json. When STON departs from pure JSON (often) the hightlighting is pretty bad.
",Externals,0,True,en
1899,"More information on HCL: https://github.com/hashicorp/hcl
",Externals,0,True,en
1896,"This makes it so we don't have to redownload all the grammars every time we build the grammars gem. We test that the list of submodules in the repo matches the list in grammars.yml. Eventually we'll be able to test that the list of scopes for each submodule is accurate as well, which was the original motivation for this change.

/cc @bkeepers @arfon @pchaigno 
",Internals,0,True,en
1895,"This just runs Bundler with the right options. Maybe it will do more in the future, like update submodules.

/cc @arfon @bkeepers 
",Internals,0,True,en
1891,"There were two bad bugs in grammars.yml:
1. The scope name for Markdown was wrong, preventing Markdown from getting syntax-highlighted
2. The scope name for WebIDL was wrong, masking the fact that it conflicts with the scope name for IDL (/cc https://github.com/github/linguist/pull/1850#discussion-diff-22003882)

I've fixed the scope name for Markdown, and removed the WebIDL grammar for now. I also cleaned up the file a little bit, and added a couple of tests to help us keep it clean in the future. Unfortunately the tests wouldn't have caught the two issues described above. This makes me think that we should probably switch to using submodules for grammars where possible and remove those grammars from grammars.yml.

/cc @arfon @pchaigno 
",Internals,14,False,en
1890,,Internals,0,False,en
1888,"Moved extensions that were in JSON to JavaScript, as comments are allowed in the Sublime files, and were being incorrectly highlighted as errors (see [this file](https://github.com/titoBouzout/SideBarEnhancements/blob/st3/Side%20Bar.sublime-settings), for example). Added several more extensions to JavaScript that hadn't been included previously. Finally, added 2 extensions to XML. 
",Externals,4,True,en
1886,"Added PureBasic as language, but without syntax highlighting.
",Externals,0,True,en
1885,"@github/docs uses YAML heavily for some of its data file definitions. 

Previously both Atom and GitHub.com handled multiline YAML strings poorly. Here's [a PR into Atom](https://github.com/atom/language-yaml/pull/19) that fixed the issue there. I also made [the same fix upstream](https://github.com/textmate/yaml.tmbundle/pull/6), plus other updates to the grammar. 

While the Atom syntax is now correct, the same tmbundle changes were not merged (they stalled). It would be nice if we could switch to using the Atom syntax to resolve this on .com.
",Internals,3,True,en
1881,"[Jasmin](http://jasmin.sourceforge.net) is an assembler for the Java Virtual Machine. It takes ASCII descriptions of Java classes, written in a simple assembler-like syntax using the Java Virtual Machine instruction set. It converts them into binary Java class files, suitable for loading by a Java runtime system. Jasmin is mostly used in education, being used in many compiler classes. 

I've been working with Jasmin a lot for a [compilers project](https://github.com/hawkw/decaf). Jasmin assembly files are usually given the extension `.j`, and I was getting tired of Linguist marking them as Objective-J. In addition to my project, there are [a](https://github.com/metaborg/spoofax-jasmin) [few](https://github.com/travisdazell/Jasmin-Examples) [other](https://github.com/ker2x/MiouLang) [GitHub](https://github.com/travisdazell/Jasmin-HelloWorld) [repos](https://github.com/aminpy/jasmincalc) which also contain Jasmin byte code.

My pull request adds a definition of Jasmin to `languages.yml`, adds a Jasmin TextMate grammar from @atmarksharp's SublimeText [plugin](https://github.com/atmarksharp/jasmin-sublime), and adds a few sample files.
",Externals,1,True,en
1877,"Changing the grammar used for highlighting Mercury from Prolog to Mercury,
since Mercury defines many additional syntactic constructs.
A [lightshow demonstration](https://lightshow.githubapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fraw.githubusercontent.com%2Fsebgod%2Fmercury-tmlanguage%2Fmaster%2FMercury.tmLanguage&grammar_text=&code_source=from-url&code_url=https%3A%2F%2Fraw.githubusercontent.com%2FMercury-Language%2Fmercury%2Fmaster%2Flibrary%2Fsparse_bitset.m&code=) examplifies this.
",Externals,20,False,en
1876,"Example: https://github.com/OpenRA/OpenRA/blob/bleed/OpenRA.Mods.RA/Settings.StyleCop
",Externals,0,True,en
1875,,Externals,0,False,en
1871,,Internals,0,False,en
1868,"Updated version of https://github.com/github/linguist/pull/1829
",Internals,4,True,en
1866,"Based upon this comment: https://github.com/github/linguist/issues/1626#issuecomment-66371622
",Internals,12,True,en
1865,"Replaces https://github.com/github/linguist/pull/1850
",Internals,4,True,en
1864,"We render [GitHub Flavoured Markdown](https://help.github.com/articles/github-flavored-markdown/) on the site. We can use Atom’s grammar to ensure that syntax highlighting uses the same dialect.
",Internals,0,True,en
1863,"`popular.yml` listed ""Bash"" but should have been listing ""Shell"" instead. There is no ""Bash"" language. Now CI will fail if this happens again.

/cc @bkeepers @arfon 
",Internals,0,True,en
1861,"This will make for more useful upstream bug reports.
",Internals,0,True,en
1860,"This works better than the old Ruby Sass.tmbundle we were pulling from svn.textmate.org.

atom/language-sass also contains an SCSS grammar, but I didn't switch to using that grammar because it isn't obviously better than our current one and I'm not an SCSS expert.

/cc @pzi https://github.com/github/linguist/pull/1852
",Internals,4,True,en
1859,"This pull request is a replacement of #1828 and adds `rc` (for Plan 9 shell scripts) as a Shell interpreter.
",Externals,5,True,en
1856,"This pull request is a result of the discussion in #1626. It contains a whole bunch of C header files taken from https://github.com/lutoma/xelix. As it's a kernel, the headers tend to be a bit unconventional. Also, they contain a lot of structs and typedefs which were previously very underrepresented in the samples.

I know its a lot of files, but it was the only set that managed to push the misdetections as C++ down to 3.15% (from the previous 12.8%). But I'd be glad to remove some of them if you think it's too much.
",Externals,10,True,en
1854,"This fixes an error we're seeing on GitHub for an empty shebang with whitespace (`#! [space]`), adds a few more test cases, and some docs to the shebang code.

/cc @aroben @arfon 
",Internals,0,True,en
1850,"WebIDL[[1]](http://www.w3.org/TR/WebIDL/) is very common in web standards.
Mozilla also use it as browser environment init configuration.
Lots of WebIDL file is already in the web world [[2]](https://github.com/mozilla/gecko-dev/tree/master/dom/webidl).
So add support for this file type.
",Externals,3,False,en
1848,"Minor tweak for the FORTRAN heuristic.  Misidentified files can be found with searches like these:

http://github.com/search?q=language%3Aforth+program+integer&type=Code
http://github.com/search?q=language%3Aforth+subroutine&type=Code
",Externals,2,True,en
1845,"Adding 'erlang.mk' to list of erlang bundles; it's seeing some adoption in the Erlang community for building Erlang apps, and at 1k lines of code at present can dominate an initial check-in, project skeleton, or small library.

See https://github.com/ninenines/erlang.mk for further details.
",Externals,1,True,en
1844,"This pull request adds a `Public Key` language. It's not really a language but it would solve many misdetections:
- https://github.com/search?utf8=%E2%9C%93&q=extension%3Aasc+BEGIN+PUBLIC+KEY+BLOCK
- https://github.com/search?utf8=%E2%9C%93&q=extension%3Apub+BEGIN+PUBLIC+KEY+BLOCK&type=Code&ref=searchresults
- https://github.com/search?utf8=%E2%9C%93&q=extension%3Apub+ssh-rsa&type=Code&ref=searchresults

The samples currently contain two PGP and two SSH public keys. The Bayesian classifier seem to do a good job here but I'd like to make sure.
@arfon Could you grab me a corpus of files from the search results?
",Externals,18,False,en
1842,"This pull requests adds XML as an extension for Qt translation files with a new heuristic rule and replaces #1378. It fixes #1759, #917 and #498.

The heuristic is based on the fact that all Qt Transaction file must have a `TS` element. If a file doesn't have that, we know that it's a TypeScript file.

|  | Actual language | TypeScript | XML |
| --- | --- | --- | --- |
| [bitcoin/bitcoin](https://github.com/bitcoin/bitcoin.git) | XML | 0.00% | 100.00% |
| [dogecoin/dogecoin](https://github.com/dogecoin/dogecoin.git) | XML | 0.00% | 100.00% |
| [qbittorrent/qBittorrent](https://github.com/qbittorrent/qBittorrent.git) | XML | 0.00% | 100.00% |
| [tomahawk-player/tomahawk](https://github.com/tomahawk-player/tomahawk.git) | XML | 0.00% | 100.00% |
| [gottcode/tanglet](https://github.com/gottcode/tanglet.git) | XML | 0.00% | 100.00% |
| [MythTV/mythtv](https://github.com/MythTV/mythtv.git) | XML | 0.00% | 100.00% |
| [mumble-voip/mumble](https://github.com/mumble-voip/mumble.git) | XML | 0.00% | 100.00% |
| [Microsoft/TypeScript](https://github.com/Microsoft/TypeScript.git) | TypeScript | 100.00% | 0.00% |
| [raph-amiard/sublime-typescript](https://github.com/raph-amiard/sublime-typescript.git) | TypeScript | 100.00% | 0.00% |
| [k-maru/grunt-typescript](https://github.com/k-maru/grunt-typescript.git) | TypeScript | 100.00% | 0.00% |
",Externals,94,True,en
1841,"Tried adding support for [Turtle](http://www.w3.org/TR/turtle/) and [SPARQL](http://www.w3.org/TR/sparql11-overview/). Got 3 errors when running the test suite both before and after adding my changes – at least the number of errors didn't increase :)

Extensions:
- [.ttl](https://github.com/search?utf8=%E2%9C%93&q=title+extension%3Attl&type=Code&ref=searchresults)
- [.sparql](https://github.com/search?utf8=%E2%9C%93&q=title+extension%3Asparql&type=Code&ref=searchresults)
- [.rq](https://github.com/search?utf8=%E2%9C%93&q=title+extension%3Arq&type=Code&ref=searchresults)
",Externals,23,True,en
1835,"Hello Team,

adding here the correct `tm` scope for the Mask syntax and the corresponding grammar. 

Thank you for your time, Alex
",Externals,0,True,en
1834,"Files 'Snakefile' should have Python highlighting. These files are used by Snakemake (https://bitbucket.org/johanneskoester/snakemake), a Make-like build software which uses Python syntax. 
",Externals,0,True,en
1832,"This pull request reorganizes the methods called in `generated?` to only load the data (calls to `lines`) in last resort.
",Externals,0,True,en
1831,"@aroben suggested that the  `ace_modes` API only return valid entries, and I agree. This makes iterating over the list easier. 

/cc @github/languages 
",Internals,0,True,en
1821,,Internals,0,False,en
1820,,Internals,0,False,en
1818,,Internals,0,False,en
1817,"This PR should fix the heuristics for F# and GLSL and solve #1814.
After verification it appears that there can be white spaces between the beginning of the line and the keywords we use in the heurisitics.
I also added a test file to test this fix.

This heuristic was added in #1758.
@larsbrinkhoff Do you know if `:` and `new-device` for Forth also need to be the first characters of the line?

@bkeepers @arfon I also found a strange bug that may be related to the way Ruby handles regexes. If the keyword we try to match is the first keyword of the file, `match()` returns false. For example if we only had the `namespace` keyword for F# it would fail when run on the sample [`Combinators.fs`](https://github.com/pchaigno/linguist/blob/fix-fs-heuristic/samples/F%23/Combinators.fs) (which starts with a `namespace` keyword).
",Externals,10,False,en
1816,,Internals,0,False,en
1813,"A file with the first line matching `/^#!$/` currently causes an exception. This fixes the regex to require some other content.

/cc @arfon @jakedouglas 
",Internals,0,True,en
1812,,Internals,0,False,en
1809,"This issue was reported in #1808 and has some quite big consequences.
This error occurred because [`Heuristic.matches?`](https://github.com/github/linguist/blob/master/lib/linguist/heuristics.rb#L54-L57) doesn't check that the list of languages to match against the heuristic rules is not empty.

I tested it against the [bootstrap repository](https://github.com/twbs/bootstrap).

/cc @bkeepers 
",Externals,8,False,en
1803,"Changes since last release (4.0.3): https://github.com/github/linguist/compare/875b3157bfab33221859fe1789fc3f8e8b517379...62a8b52df4790b196a2302f548ab8da37c539117
",Internals,59,True,en
1802,"Using the spiffy new YAML support. Thanks @aroben! :grin:
",Externals,0,True,en
1800,"Replaces https://github.com/github/linguist/pull/1793
",Internals,4,True,en
1798,"Updated version of https://github.com/github/linguist/pull/1473
",Internals,4,True,en
1797,"Replacement PR for https://github.com/github/linguist/pull/1446
",Internals,4,True,en
1796,"Updated version of #1181

I couldn't find a TextMate scope for Cool so set this to `tm_scope: none`. @tdeitch - do you know of any SublimeText or TextMate grammars we could use here?

/ cc @pchaigno @bkeepers 
",Internals,4,True,en
1795,"Opening this up as it's just a single change in the end.

Related: #1697 #1184 

/ cc @sebgod 
",Internals,8,True,en
1791,"This pull request just removes a test forgotten in #1788.

/cc @bkeepers 
",Externals,4,True,en
1790,"This pull requests add support for Gradle files as discussed in #1766.
It's using [alkemist/gradle.tmbundle](https://github.com/alkemist/gradle.tmbundle) for syntax highlighting.

I'm going to open an issue at [alkemist/gradle.tmbundle](https://github.com/alkemist/gradle.tmbundle) to clarify the license situation.

EDIT: Issue opened at alkemist/gradle.tmbundle#2.
",Externals,5,False,en
1788,"Same as https://github.com/github/linguist/pull/1784, but against master.
",Internals,4,True,en
1787,"Sames as https://github.com/github/linguist/pull/1783, but against master.
",Internals,4,True,en
1782,"Here is my pull request to add the language 'Oz' to the list of recognized languages by GitHub. Tell me if I forgot something or if something is wrong.
",Externals,0,True,en
1779,"This expands the scope of #1701, which is superseded if this PR is more appropriate.

There are about 20000 `.fr` files on GitHub.  They are currently all detected as `Frege`, but actually most are just plain text files (mostly in French).  This PR adds samples, heuristics, etc to vastly improve classification.

Tested with two sets of samples provided by @arfon: one with the keyword ""the"" and another one with ""le"".  Below are the result of running `linguist` **before** and **after** my changes.  **Actual** is my manual classification of the samples.
#### ""The"" samples:

| Language | Before | After | Actual |
| --- | --: | --: | --: |
| text |  | 702 | 671 |
| Forth |  | 132 | 132 |
| Frege | 1000 | 122 | 122 |
| XML |  | 44 | 49 |
| C |  |  | 11 |
| Groff |  |  | 8 |
| Makefile |  |  | 7 |
#### ""Le"" samples:

| Language | Before | After | Actual |
| --- | --: | --: | --: |
| text |  | 910 | 916 |
| XML |  | 41 | 41 |
| HTML |  | 40 | 40 |
| Frege | 1000 | 3 |  |
| Forth |  | 3 |  |
| Shell |  | 2 | 2 |
| Perl |  | 1 | 1 |
",Externals,63,True,en
1776,"Tests failed on travis after I merged master. This should fix it.
",Internals,0,True,en
1774,"I've needed this a few times recently.
",Internals,0,True,en
1773,"This is a tool for testing grammars with GitHub's syntax highlighter.

Is there a better place to link to this?

/cc @arfon @bkeepers @vmg @pchaigno 
",Internals,0,True,en
1771,"This fixes many bugs with F# highlighting, and the grammar is being actively developed and maintained by the fsharp organization on GitHub.

Fixes https://github.com/github/linguist/issues/1746
",Internals,4,True,en
1770,"Clarion is a Rapid Application Development tool (RAD) with a 4th Generation language. The language was create by Bruce Barrington back in the early 1980 and operated in DOS until Clarion for Windows came out in 1994.

Some examples of Clarion on GitHub:
https://github.com/devroadmaps/DevroadmapsClarionLibrary
https://github.com/fushnisoft/ClarionMetroWizard
https://github.com/CarlosGtrz/ClarionJson
https://github.com/MarkGoldberg/ClarionCommunity
https://github.com/MarkGoldberg/CwUnit
https://github.com/Rick-UpperPark/ClarionLiveDLLTutor
https://github.com/ClarionLive?tab=repositories
",Externals,9,True,en
1765,"Bump Rugged version
",Internals,0,True,en
1762,"GitHub and Gist use Linguist's `ace_mode` to determine which highlighter Ace should use when editing a file. When `ace_mode` is not provided, the default value is to just use the language's name, in lowercase.

For the most part, most languages have an `ace_mode` defined, and/or the lowercase default is fine. In other cases, however, this is broken. Consider the following gif:

![go](https://cloud.githubusercontent.com/assets/64050/5161183/99149846-7356-11e4-8fea-eff3086eb5a8.gif)

Lest you think that's an obscure language, that broken highlighter is for Go. While the language is itself called ""Go,"" the Ace mode is actually called [_golang_](https://github.com/ajaxorg/ace/blob/a50fe349250dded26ade026fb1874b7fe681e5b9/lib/ace/mode/golang.js). This property in _languages.yml_ did not have `ace_mode` defined, so the default value did not work, hence the lack of highlighting.

This happens for an irritating number of popular languages (""Common Lisp"" should have a highlighter of  ""lisp""; ""Objective-C"" is ""objectivec""). I [scripted something up](https://gist.github.com/gjtorikian/3e6b307243ff9b3a9b34) to dump out a list of languages that should probably have an `ace_mode` defined (as expected by Ace). Then, I manually went through the list and applied the `ace_mode`s.

Verification is pretty simple; in most cases, the `ace_mode` simply matches very closely with the `tm_scope`. Here's an example of what I mean:

``` yaml
 Frege:
   type: programming
   color: ""#00cafe""
   extensions:
   - .fr
   tm_scope: source.haskell
   ace_mode: haskell
```

Although I have no idea what the Frege language is, I feel pretty confident that a `tm_scope` of `source.haskell` means the `ace_mode` should be `haskell`, too. Almost all of the matches are like this. Note that there are still about 40 languages left that have broken syntax highlighting, but the onus here is shifted onto Ace. because highlighters don't exist for them (for example, Cucumber and F# are represented in Linguist and with a `tm_scope`, but Ace has no highlighter for them). 

/cc @github/languages @spicycode 
",Internals,74,True,en
1758,"The `.fs` file extension is commonly used for both F#, Forth, and GLSL. Currently, only F# is detected.
(This pull request supersedes #646.)

GitHub currently contains about 48000 files with an .fs file extension, which are detected as F# or OCaml. Of those, I believe 15000 files are actually in Forth, and at least 13000 are GLSL (but probably more).

This pull request adds sample files, heuristics, and .fs as Forth and GLSL extensions.

Tested with a corpus of 1000 `.fs` files provided by @arfon.

Examples of misidentified code at GitHub can be found with these searches:
http://github.com/search?q=extension%3A.fs+dup
http://github.com/search?q=extension%3A.fs+void+main
",Externals,24,False,en
1757,,Internals,0,False,en
1756,"This will make CI fail if someone adds a new language but neglects to add a new grammar for it. This should make it easier for people to review PRs, as CI will help them to make sure a new grammar gets added.

However, we currently support some languages that have no grammars, and we may support more in the future. So you can explicitly mark the language as having no grammar by setting `tm_scope: NONE` in languages.yml.

@vmg @bkeepers @arfon Do you think this is a good idea?
",Internals,0,True,en
1755,"I missed this back in 9595e2ba7e63b584e2a32cdee3c86ad9ffccf261.
",Internals,21,True,en
1754,"Replaces #1749 
",Internals,4,True,en
1753,"This grammar seems to be replacing the other ones out there and is maintained by the Bro organization.
",Internals,0,True,en
1752,"This produces better highlighting than using the C++ grammar.

The grammar is licensed under the Apache 2.0 license.

/cc @vmg @bkeepers 
",Internals,2,True,en
1751,"fyi: @gusvargas
",Externals,0,True,en
1750,"While trying to do some refactoring on the shebang detection I realized that the interpreters used in samples was not properly getting added to `samples.json` (see first commit  eccea65) like we do with extensions. It looks like it's been that way since the beginning (https://github.com/github/linguist/commit/7a6202a8c3d667f3476839687f00cfc47c56703a).

This ""fixes"" it, but exposes a few more issues:
1. We have some samples with undeclared or wrong shebangs (see test failures). Those need fixed before this can be merged.
2. `samples.json` stores extensions/interpreters, but then we have tests that validate that samples don't use extensions (and now interpreters) that are not declared in `languages.yml`. Should we just remove `extensions` and `interpreters` from the cached `samples.json`, update everything to use the language definitions for those, and rely on the tests to validate that samples are using properly declared extensions and interpreters?

/cc @arfon @pchaigno https://github.com/github/linguist/pull/687
",Internals,36,True,en
1748,"Some XHTML files use `.xht` extension and they're not being highlighted.

For example:
https://github.com/w3c/csswg-test/blob/master/css-flexbox-1/flex-grow-001.xht
",Externals,5,True,en
1747,"/cc @arfon @bkeepers @vmg
",Internals,0,True,en
1745,"This just renames the files so there is not a conflict, which fixes it on my machine.

Closes https://github.com/github/linguist/issues/1744
",Internals,4,True,en
1743,"Same as #1742 but with a test for good measure.
",Internals,4,True,en
1741,"This adds `test/helper.rb` that gets required in each test to consistently load the environment.

```
rake test
ruby test/test_blob.rb
```
",Internals,0,True,en
1738,"0.21.2 was just released but doesn't contain the Repository::Attributes code we depend on. 0.22.0b1 has this code.

/cc @arfon @bkeepers @vmg 
",Internals,9,True,en
1737,"The API is compatible for our purposes, and this allows Linguist to be used in apps that pull in newer versions of mime-types through other gems.

/cc @arfon @bkeepers 
",Internals,0,True,en
1736,"The precedent seems to be ""hundreds of repos"".

/cc @arfon @pchaigno @larsbrinkhoff https://github.com/github/linguist/pull/1730/files#r20462784
",Internals,12,True,en
1734,,Internals,0,False,en
1733,,Internals,0,False,en
1732,"We test for samples for any extensions with multiple matches, but not for the filename. `Language#detect` blows up in master right now on `pom.xml` because `#find_by_filename` returns both ""Maven POM"" and ""XML"" as possible results and then tries to classify them, but we don't have any samples for Maven POM.

This updates the test and now we have 6 failures. We require samples for every declared extension. Should we also be requiring a sample for each declared filename?

```
  1) Failure:
TestSamples#test_Ant Build System_has_samples_if_necessary [/var/lib/jenkins/workspace/linguist/test/test_samples.rb:65]:
Ant Build System is missing a samples directory

  2) Failure:
TestSamples#test_Maven POM_has_samples_if_necessary [/var/lib/jenkins/workspace/linguist/test/test_samples.rb:65]:
Maven POM is missing a samples directory

  3) Failure:
TestSamples#test_Nginx_has_samples_if_necessary [/var/lib/jenkins/workspace/linguist/test/test_samples.rb:65]:
Nginx is missing samples for nginx.conf

  4) Failure:
TestSamples#test_PHP_has_samples_if_necessary [/var/lib/jenkins/workspace/linguist/test/test_samples.rb:65]:
PHP is missing samples for .php

  5) Failure:
TestSamples#test_Ruby_has_samples_if_necessary [/var/lib/jenkins/workspace/linguist/test/test_samples.rb:65]:
Ruby is missing samples for Gemfile.lock

  6) Failure:
TestSamples#test_Zephir_has_samples_if_necessary [/var/lib/jenkins/workspace/linguist/test/test_samples.rb:65]:
Zephir is missing samples for exception.zep.c
```

/cc @vmg @arfon @pchaigno https://github.com/github/linguist/pull/1714
",Internals,23,True,en
1731,"This is a first stab at supporting multiple file extension segments. `FileBlob#extensions` will return an array of the materialized extensions, with the most specific one first.

``` ruby
>> Linguist::FileBlob.new(""app/views/things/index.html.erb"").extensions
=> ["".html.erb"", "".erb""]
```

Right now it will return languages for the most specific extension with languages defined. In other words, if `.foo.bar` has languages defined, `.bar` will not match. Is that ok?

/cc https://github.com/github/linguist/pull/1729 @arfon @pchaigno
",Internals,4,True,en
1730,"This document tries to explain how to file various common kinds of bug reports or enhancements.

/cc @vmg @arfon @bkeepers 
",Internals,0,True,en
1728,"It's now hosted on GitHub and has a clearer license.

/cc @vmg
",Internals,0,True,en
1727,"This pull request adds a lexer for Inform 7 as requested in #1725.
The lexer is at: https://github.com/PogiNate/Sublime-Inform.

I opened an issue on the repository to clarify the license situation: [PogiNate/Sublime-Inform#2](https://github.com/PogiNate/Sublime-Inform/issues/2).
",Externals,7,False,en
1726,"Fix tests after categorizing Makefile as programming

/cc https://github.com/github/linguist/pull/1724 @larsbrinkhoff @pchaigno 
",Internals,4,True,en
1724,"This pull request changes the type of Makefile from `nil` to `programming` as discussed in #1719.
",Externals,4,True,en
1723,"While this is not the norm in Python at large, it is supported, and is part of the style guide in @saltstack code.
",Externals,0,True,en
1722,"Add some documentation as @arfon requested. Also bringing in a new Racket grammar that should fix the issues with square brackets and whatnot.

cc @aroben 
",Internals,0,True,en
1714,"Added some stuff I thought would be useful. Made sure they're all properly licensed.

cc @aroben @bkeepers 
",Internals,0,True,en
1710,"The purpose of this gem is to package up the language grammars that are used for syntax highlighting on github.com. The grammars are TextMate, Sublime Text, or Atom language grammars, converted to JSON and given the filename `SCOPE.json`, where `SCOPE` is the language scope that the grammar defines.

The `github-linguist-grammars` gem packages up all the grammars, and also exports a `Linguist::Grammars.path` method to locate the directory containing the grammars.

To build the gem, simply run `rake build_grammars_gem`. The `grammars.yml` file lists all the repositories we download grammars from, as well as which scopes are defined by each repository. The `script/download-grammars` script takes that list and downloads and processes the grammars into the format expected by the gem.

/cc @vmg @arfon @bkeepers 
",Internals,0,True,en
1709,"This was removed in https://github.com/github/linguist/pull/1499 when it should have just been changed.

/cc @zenspider
",Internals,4,True,en
1708,"This is technically only for FORTRAN 90 and newer, but seems to do just fine with older variants.
",Internals,2,True,en
1707,"This PR removes the Pygments dependency on Linguist.

cc @aroben @bkeepers 
",Internals,0,True,en
1706,"This pull request adds `.mm` as a file extension for XML as requested in #1690.
This conflicts with Objective-C++. I added a new heuristic rules to solve this.
All XML `.mm` files start with `<map version=""[^""]+"">`.

I tested  it on the following repositories:
- https://github.com/coolfluid/documents
- https://github.com/ArchieT/ingressmedal
- https://github.com/dokinkon/LecturePlayer
- https://github.com/wybosys/nnt
- https://github.com/roikr/openFrameworks007
- https://github.com/dmentre/re-demexp
- https://github.com/js-scala/samples
- https://github.com/sos-berlin/scheduler-engine-doc

All files were correctly detected.
",Externals,7,False,en
1705,"/cc @bkeepers @arfon @vmg 
",Internals,0,True,en
1704,"The `source.asm.x86` grammar does a decent job of parsing this.
",Internals,2,True,en
1703,"The `source.css.less` grammar actually understands Less syntax.
",Internals,0,True,en
1702,"LoomScript is the scripting language for the Loom SDK.
It has an ActionScript3-like syntax with added C#-esque capabilities.

Loom SDK: https://github.com/LoomSDK/LoomSDK

Some GitHub projects using LoomScript:
- https://github.com/bengarney/ScoreKeeper
- https://github.com/Crwth/MultiMovieClip
- https://github.com/dbltnk/ouya-loom-jam
- https://github.com/elevatefun/DragonBonesLoomScript
- https://github.com/esDotDev/RunnerMark-Loom
- https://github.com/ghroot/AshLoom
- https://github.com/johnbatty/WhackAPotato
- https://github.com/lunarraid/LoomIsoProject
- https://github.com/pixeldroid/spec-ls
- https://github.com/ravensinth/LoomSnake
- https://github.com/RivelloMultimediaConsulting/LoomDemos
- https://github.com/southpawfishel/Gestouch-Loom2D
- https://github.com/southpawfishel/LoomTMX
",Externals,2,False,en
1698,,Externals,0,False,en
1696,,Internals,0,False,en
1695,"This restores compatibility with v3.4.x.

/cc #1675
",Internals,6,True,en
1694,"/cc @bkeepers @arfon 
",Internals,0,True,en
1687,"Coming soon to Atom. See https://github.com/atom/language-shellscript/pull/3

/cc @vmg @bkeepers 
",Internals,1,True,en
1686,"This is the scope that Atom uses for these files. See https://github.com/atom/language-python/blob/master/grammars/python-traceback.cson

/cc @vmg @bkeepers 
",Internals,0,True,en
1683,"This doesn't change any behavior, but just exposes a public method for `Language.find_by_extension`.

/cc @aroben #1675
",Internals,4,True,en
1678,"Hello Team, 

it seems `pygments.rb` was updated, and the `MaskLexer` is included ([mapping](https://github.com/tmm1/pygments.rb/blob/master/vendor/pygments-main/pygments/lexers/_mapping.py#L214)), so this pr changes the lexer. 

Thank you, Alex
",Externals,4,True,en
1675,"Fenced code blocks in Markdown on github.com currently let you specify either a Linguist language name or alias, or anything that matches a Pygments::Lexer. My goal here was to remove Pygments from the equation: we should be able to find a Linguist::Language for any fenced code block without consulting Pygments.

The commit messages explain the process in detail, but the basic idea here is to take all the aliases and file extensions that Pygments knows about and put them into Linguist itself.

/cc @vmg @arfon @bkeepers 
",Internals,0,True,en
1674,"This addresses some of the concerns in https://github.com/github/linguist/issues/1656

I've reworked most of the heuristics to return only one language (we may want to adjust this based upon @pchaigno's comment [here](https://github.com/github/linguist/issues/1656#issuecomment-61925408)).

Also, so that we can make use of a heuristic that _does_ return more than one language, we use the heuristics earlier in the detect method so that the Bayesian classifier can make use of this information.

This whole `Language.detect` method needs a whole re-work - https://github.com/github/linguist/pull/1663 looks :sparkles: 

/ cc @bkeepers 
",Internals,20,True,en
1673,"RAML is an API specification language based upon the YAML syntax. More information is on RAML itself can be viewed at http://raml.org.
",Externals,0,True,en
1669,"Adding support for Hack (replaces https://github.com/github/linguist/pull/1447)
",Internals,4,True,en
1663,"This is an an attempt to simplify `Language.detect`, make it easier to understand, and easier to test. This is not ready to merge (tests don't even pass), but I wanted to put it out there to see what people thought about the approach.

Each step of the detection is extracted to a ""strategy"". A strategy is just an object with a `#call` method that takes `blob` and `languages` (an array of possible languages).  The strategy returns an array of languages (candidates to be used by the next strategy). It continues to try strategies until 1 language is detected, at which point it returns and does not try the remaining strategies. 

If we like this direction, then there's still work to be done, like tests for each strategy.
",Internals,1,True,en
1660,,Internals,0,False,en
1657,,Externals,0,False,en
1654,"Those files are either external libraries or builds of the repository itself. In any case they are generated automatically and shouldn't count in the language statistics. This also simplifies some of the rules that had to exclude both minified and normal dependencies.
",Externals,0,True,en
1653,"the pants build tool uses python files named BUILD. This adds highlighting for them.
",Externals,0,True,en
1652,"This is looking pretty good now.
",Internals,0,True,en
1650,"The blue/purple color of Shell files was close to that of Golang and the two could likely be paired together often. This updates Shell to a bright green [inspired by the terminal](https://github.com/github/linguist/issues/1640#issuecomment-61296290) and @bkeepers :green_heart: 

Fixes #1640 

cc @samlambert @arfon 
",Externals,16,True,en
1646,,Internals,0,False,en
1645,"This pull request adds `moon` as an interpreter for MoonScript and fixes the issue at #1644.
",Externals,4,True,en
1643,,Internals,0,False,en
1641,"This grammar does a better job highlighting than the text.html.ruby grammar does. It requires injection grammar support, but there's no getting around that.
",Internals,0,True,en
1639,"As reported in #1638, there are conflicts between AsciiDoc and AGS Script files on the `.asc` extension.
This pull request adds an heuristic rule to detect AsciiDoc files.
It tries to find title's syntax in AsciiDoc (`===`).

I tested it against two repositories:
- [vasofilipov/wisp-game](https://github.com/vasofilipov/wisp-game) - AGS Script

```
100.00% AGS Script
```
- [progit/progit2](https://github.com/progit/progit2) - AsciiDoc

```
66.73%  CSS
25.16%  XSLT
7.01%   Ruby
1.10%   AGS Script

Ruby:
Gemfile
Rakefile
book/07-git-tools/git-credential-read-only

AGS Script:
LICENSE.asc
book/toc.asc

CSS:
theme/epub/epub.css
theme/html/html.css
theme/mobi/mobi.css
theme/pdf/pdf.css

XSLT:
theme/epub/epub.xsl
theme/html/html.xsl
theme/mobi/mobi.xsl
theme/pdf/pdf.xsl
```

EDIT: The [Travis build](https://travis-ci.org/github/linguist/builds/39160064) is passing.
",Externals,35,False,en
1636,"## Papyrus

Papyrus is a scripting language used by The Elder Scrolls V: Skyrim (and presumably future Bethsoft releases) to implement complex in-game behavior, communicate with external libraries, and in general do the things scripting languages do. Skyrim has an active modding community and several major players within it use Github to manage their projects. 
### Examples of Papyrus usage on Github
- SkyUI: https://github.com/schlangster/skyui/tree/master/dist/Data/Scripts/Source
- Extensible Follower Framework: https://github.com/expired6978/Extensible-Follower-Framework/tree/master/Data/Scripts/Source
- Skaar: https://github.com/alexdunn/skaar/tree/master/scripts
- APPS: https://github.com/heromaster/APPS/tree/master/Scripts/Source
- MountFX: https://github.com/Verteiron/MountFX/tree/master/dist/data/Scripts/Source
- Familiar Faces: https://github.com/Verteiron/FamiliarFaces/tree/master/dist/Data/scripts/Source

Travis CI build seems to be [succeeding](https://travis-ci.org/Verteiron/linguist/builds/39100415).
",Externals,12,True,en
1634,"Already discussed here: #1140 
",Externals,4,True,en
1633,"ProGuard config files have a `.pro` extension. Thus there are detected by Linguist as QMake, Prolog or IDL.
These incorrect results can be seen here: https://github.com/search?q=extension%3Apro+proguard&ref=reposearch&utf8=%E2%9C%93
This pull request adds these files to the vendored files.

EDIT: [Travis build](https://travis-ci.org/github/linguist/builds/38969971) is passing.
",Externals,14,False,en
1632,"The recommended extension for [Dyalog](http://dyalog.com/) ""script files"" (i.e. functions, namespaces, classes, etc that aren't stored in a ""workspace"") is `.dyalog`.  Dyalog's dialect has its own additions to the language but at its core it's compatible with what is traditionally known as APL, so I think it should be highlighted as such.
",Externals,0,True,en
1630,"/cc @vmg @arfon 
",Internals,0,True,en
1627,"Updated version of https://github.com/github/linguist/pull/1036
",Internals,4,True,en
1623,"This pull request adds `.sc` as a SuperCollider file extension as requested at #1091.
It is the standard one for SuperCollider class files.
This extension is already used by Scala.

I tested it on several Scala and SuperCollider repositories.
It's not perfect but I guess it's better than before since it wasn't recognized at all.
- [scala-for-the-impatient](https://github.com/bodiam/scala-for-the-impatient.git) - Scala

| Without heuristics | With heuristics |
| --- | --- |
| 95.41% Scala<br/>4.59% SuperCollider | 99.51% Scala<br/>0.49% SuperCollider |
- [scala4impatientasks](https://github.com/adsinc/scala4impatientasks.git) - Scala

| Without heuristics | With heuristics |
| --- | --- |
| 98.59% Scala<br/>1.41% SuperCollider | 99.96% Scala<br/>0.04% SuperCollider |
- [scala-quiz](https://github.com/codingnirvana/scala-quiz.git) - Scala

| Without heuristics | With heuristics |
| --- | --- |
| 91.09% Scala<br/>8.91% Java | 91.09% Scala<br/>8.91% Java |
- [Scala-learning](https://github.com/iBuddha/Scala-learning.git) - Scala

| Without heuristics | With heuristics |
| --- | --- |
| 91.43% Scala<br/>8.27% SuperCollider<br/>0.30% Java | 98.07% Scala<br/>1.63% SuperCollider<br/>0.30% Java |
- [hack_listener](https://github.com/audiohackersalon/hack_listener.git) - SuperCollider

| Without heuristics | With heuristics |
| --- | --- |
| 100.00% SuperCollider | 100.00% SuperCollider |
- [SuperCute](https://github.com/danstowell/SuperCute.git) - SuperCollider

| Without heuristics | With heuristics |
| --- | --- |
| 53.73% C++<br/>23.45% SuperCollider<br/>13.55% C<br/>2.03% Python<br/>1.82% Emacs Lisp<br/>1.75% Objective-C++<br/>1.57% Objective-C<br/>0.65% Scala<br/>0.58% Perl<br/>0.46% VimL<br/>0.22% Ruby<br/>0.10% Shell<br/>0.06% Rebol<br/>0.03% R | 53.73% C++<br/>24.10% SuperCollider<br/>13.55% C<br/>2.03% Python<br/>1.82% Emacs Lisp<br/>1.75% Objective-C++<br/>1.57% Objective-C<br/>0.58% Perl<br/>0.46% VimL<br/>0.22% Ruby<br/>0.10% Shell<br/>0.06% Rebol<br/>0.03% R |
- [Thr44-SC-quark](https://github.com/Thr44/Thr44-SC-quark.git) - SuperCollider

| Without heuristics | With heuristics |
| --- | --- |
| 100.00% SuperCollider | 100.00% SuperCollider |

EDIT: The [Travis build](https://travis-ci.org/github/linguist/builds/38716628) is passing.
",Externals,189,False,en
1622,"This pull request adds `.command` as a Shell file extension as requested in #966.
Many undetected Bash files can be found on GitHub:
https://github.com/search?utf8=%E2%9C%93&q=extension%3Acommand+echo&type=Code&ref=searchresults

EDIT: [Travis build](https://travis-ci.org/github/linguist/builds/38660201)
",Externals,17,False,en
1620,"Ant uses `build.xml` for it's configuration, but [many projects](https://github.com/search?utf8=%E2%9C%93&q=filename%3Abuild.xml.dist+project&type=Code&ref=searchresults) including my own commit a `build.xml.dist` file and ignore a `build.xml` file, allowing for a custom configuration if necessary.

I've added `build.xml.dist` to the `languages.yml` file to enable syntax highlighting on GitHub for `build.xml.dist` files.
",Externals,6,True,en
1614,,Externals,0,False,en
1613,".a51 doc is 8051-asm (coding in MIDE-51)
",Externals,8,True,en
1612,"Adds a `hbs` alias for `Handlebars`. It's very commonly used and would make adding hbs code blocks easier in github comments.
",Externals,0,True,en
1611,,Internals,0,False,en
1610,,Internals,0,False,en
1609,"This ensures that the Rake task will use bundler to manage dependencies and print a warning to run `bundle install` if dependencies are missing.

This also allows you to be lazy and just run `rake test` without the `bundle exec`.

/cc @arfon 
",Internals,0,True,en
1608,"I noticed that both the `json` gem and the `yajl` gem were being used. I don't think there's a reason to use both. This removes the `json` gem as a development dependency and switches all uses of `JSON` to `Yajl`.
",Internals,0,True,en
1605,"@arfon 

Here's my suggested edits for the `.gitattributes` docs. It's mostly just cutting things out to make it more concise. Feel free to accept or reject any of this.

:scissors: 
",Internals,0,True,en
1604,"- Add `--` and `""` style single-line comments.
  - Rearrange `elsif`s so `""` comments don't interfere with removing double-quoted strings.
- Don't fail to detect valid `#!/usr/bin/env` shebangs which actually ""`env`"" environmental variables.

**Edit**:

---
- Add tests to test_tokenizer.rb to match tokenizer.rb.
- Add samples for `""` and `--` comments and complicated `env` shebangs.
- Also, add `.tool` as shell extension (basically, exactly as #1622).
",Externals,4,False,en
1602,"@bkeepers - this PR updates the docs outlining the new `.gitattributes` support - would love your feedback on this.
",Internals,0,True,en
1596,"This PR adds `.fcgi` as an extension for script languages.
Currently all `.fcgi` files are recognized as Perl.
Many incorrectly identified files can be found on GitHub with this extension:
- [Bash files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Afcgi+bash&type=Code&ref=searchresults)
- [Lua files ](https://github.com/search?utf8=%E2%9C%93&q=extension%3Afcgi+lua&type=Code&ref=searchresults)
- [PHP files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Afcgi+php&type=Code&ref=searchresults)
- [Python files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Afcgi+python&type=Code&ref=searchresults)
- [Ruby files](https://github.com/search?utf8=%E2%9C%93&q=extension%3Afcgi+ruby&type=Code&ref=searchresults)

These files almost always contain a shebang and should be correctly identified once this PR is merged.
",Externals,30,False,en
1595,"The TextMate 2 scope requires support for injection grammars, which some parsers don't support.

/cc @vmg @arfon
",Internals,1,True,en
1594,,Externals,0,False,en
1593,"There's still more to do, but this fixes some languages I tend to run across frequently.

/cc @arfon @vmg
",Internals,0,True,en
1592,,Internals,0,False,en
1590,,Internals,0,False,en
1588,,Internals,0,False,en
1587,,Internals,0,False,en
1586,"Reverts github/linguist#1515 in favour of github/linguist#1517
",Internals,8,True,en
1584,"Linguist currently does not detect properly extension-less Tcl/Tk scripts.
It resorts to the statistical classifier, which yields rather poor results.

See as examples:
- code from http://wiki.tcl.tk/906 detected as Perl (added to the test suite)
- code from http://wiki.tcl.tk/14140 detected as Shell (added to the test suite)
- laomaiweng/brc:brc detected as JavaScript
- laomaiweng/scripts:admin/gentoo/puse detected as Perl

Relying on the shebang enables correct detection of all shebang-ed Tcl/Tk
scripts.
",Externals,8,False,en
1575,"In #1573, @pchaigno asked me to provide some samples for the clean programming language.
",Externals,4,True,en
1573,"Search here on GitHub:
- `vms extension:mms extension:mmk` gives 10,840 code results,
- `vms extension:com` gives 27,922 code results.

(Note that not all the files contain `vms` keyword...)
",Externals,10,False,en
1570,"See ceylon/ceylon-spec#585 for the new annotation syntax and ceylon/ceylon-spec#574 for the new string interpolation syntax.
",Externals,6,True,en
1563,"- Instead of defining `#linguist_vendored?` and `#vendored?`, this just overrides `LazyBlob#vendored?` leverages the fact that included modules become a superclass, so you can call them with `super`. 
- Replaces `#result_for_key` with simplified `#boolean_attribute` method

/cc @arfon 
",Internals,0,False,en
1561,"This PR adds support for the Graph Modeling Language as requested at #1559.
There are many [users of GML on GitHub](https://github.com/search?p=5&q=extension%3Agml+graph&ref=searchresults&type=Code&utf8=%E2%9C%93).

It uses the `.gml` file extension which conflicts with Game Maker Language.
The Bayesian classifier seems to do a pretty good job at distinguishing the two.
I tested my PR on:
- [branjbar/compat_modeling](https://github.com/branjbar/compat_modeling)
- [gephi/gephi-toolkit-demos](https://github.com/gephi/gephi-toolkit-demos)
- [h3rb/gml-pro](https://github.com/h3rb/gml-pro)
- [graphstream/gs-algo](https://github.com/graphstream/gs-algo)
- [sujitpal/mlia-examples](https://github.com/sujitpal/mlia-examples)
",Externals,13,False,en
1557,"As far as I can see, the vast majority of the `.frt` files on GitHub are Forth source code.  Random sampling of search results only revealed a handful of false positives.

See e.g. http://github.com/search?q=extension%3Afrt+the&type=Code
",Externals,1,True,en
1555,,Internals,0,False,en
1554,,Internals,0,False,en
1553,,Internals,0,False,en
1552,,Internals,0,False,en
1549,"The directory tree rooted at `Godeps` is analogous to `Gemfile.lock` and `node_modules`, so this patch treats it accordingly.

These dependencies are saved by https://github.com/tools/godep, for example in https://github.com/heroku/hk/tree/master/Godeps.
",Externals,0,True,en
1547,"The files **activator** and **activator.bat** are generated by [https://typesafe.com/activator](Typesafe Activator) when creating a new project.
This can cause the language statistics for a repository to reported as **Shell**.

This pull-request adds these files to **vendor.yml** and to the tests.
",Externals,0,False,en
1546,"jsb is a meta build system [1] which can generate actual build files for GNU make, ninja, visual studio etc.

These files are pure javascript files. Just to differentiate them from rest of the javascript files, these are marked as .jsb file.

[1] https://github.com/vivekgalatage/jsb/blob/master/third-party/libxml/libxml.jsb
",Externals,2,True,en
1545,"Groff should have samples.  Here's one.

The `.4` extension conflicts with Forth: https://github.com/search?q=extension%3A.4+dup+drop+swap&type=Code
See #600.

I'd be happy to add more sample files on request.
",Externals,6,True,en
1542,,Internals,0,False,en
1540,"![logo-golo](https://f.cloud.github.com/assets/1280212/310461/4ce51ab6-971d-11e2-86ec-7711a1202e20.png) — a lightweight dynamic language for the JVM.

`The world didn't need another JVM language. So we built yet another one. A simple one.`

I add the support of Golo files (with the `golo` lexer in `languages.yml` and some samples (see [old pull-request](https://github.com/github/linguist/pull/453)).

``` golo
module hello.World

function main = |args| { 
  println(""Hello World"")
}
```

some links
- http://golo-lang.org/
- https://github.com/golo-lang
- https://github.com/TypeUnsafe
- https://gist.github.com/k33g/cdb6fc19ce1d1a5b6636
- https://gist.github.com/k33g/916270841da536db12b5
- https://gist.github.com/k33g/31733c66c510a4309979
- https://github.com/rlespinasse/ansi-string-augmentations.golo
",Externals,86,True,en
1538,"/cc https://github.com/github/linguist/pull/1233
",Internals,4,True,en
1537,"`samples.json` will be generated before building the gem. Should we also generate it before running `rake test` (or add a task that generates it if it doesn't exist)?

/cc https://github.com/github/linguist/pull/1533 @arfon 
",Internals,4,True,en
1536,"This PR sets Java as the lexer for the Apex language.
This was requested in #1526.
[This Pygments demo](http://pygments.org/demo/665782/) shows the result. It is really good except for some issues with the single quotes (see middle of the demo file).

[A request for an Apex lexer](https://bitbucket.org/birkenfeld/pygments-main/issue/1029/apex-not-supported-for-highlighting) was opened on Pygments' repository. In the meantime, using the Java lexer would be better than nothing :-)
",Externals,14,False,en
1534,,Internals,0,False,en
1533,,Internals,0,False,en
1530,"This is a special language controlling 3D printers (by RepRap, Makerbot,
Ultimaker etc.). It is not a general purpose programming language, but
still contains commands for e.g. looping. On the other hand, most of the
time it will be generated by another program, not hand-written. Hence I
classified it as ""data"".

Specification:
- http://reprap.org/wiki/G-code

Some repositories with examples:
- https://github.com/reprappro/Mendel
- https://github.com/BLLIP/bllip-parser
- https://github.com/MakerGear/M2

See also issue #1528 
",Externals,6,False,en
1529,"References:
- https://github.com/okamstudio/godot/wiki/gdscript
- http://www.godotengine.org/

Some projects using it:
- https://github.com/okamstudio/godot
- https://github.com/Qwertie-/Godot-games

My motivation for adding it: To disambiguate these .gd files from GAP .gd files.
",Externals,0,False,en
1525,"Fixes two typos in source comments.
",Externals,0,True,en
1524,"Gives C# a dark green color instead of a color near identical to CSS, as suggested in #1332.
",Externals,4,True,en
1523,"This adds a fourth extension for the ""GAP"" language: .tst, which is used for test cases (which use a slightly different set of syntax rules). Currently, such .tst files are mis-detected as SciLabg, see e.g. here:

  https://github.com/gap-system/SingularInterface/search?l=scilab

Indeed, for that project, GitHub thinks it is written in 67.% Scilab and 28.1% GAP -- but all that ""Scilab"" code is GAP code.

Secondly, it removes the 'lexer: Text only' mark, as my Pygments patch adding support for GAP was merged in April. I also verified that it is live on GitHub, e.g.:

``` gap
# This is GAP code
if x = fail then
  Print(""Failure\n"");
else
  Print(""All seems well\n"");
fi;
```
",Externals,5,True,en
1522,,Internals,0,False,en
1520,"Logtalk is an extension to Prolog and, as such, subsumes its syntax. This allows the Pygments Logtalk lexer to be used for syntax coloring of Prolog files. Covered Prolog syntax includes both official (ISO) and de facto standard constructs, including core Prolog module directives.
",Externals,0,True,en
1517,,Internals,0,False,en
1516,"/cc @arfon 
",Internals,0,True,en
1515,"Same as https://github.com/github/linguist/pull/1498 but using Git attributes. Requires a version of Rugged that hasn't been tagged yet.
",Internals,4,True,en
1511,"Went into the Explore languages feature within github to see the ""AGS Script"" projects and noticed a couple of things:
1. .asc files were getting marked as AGS Script but formatted as AsciiDoc
2. .asc files that were neither format were also getting marked as AsciiDoc.

So, I added a heuristics checker for .asc files. ~~Additionally, because AGS Script is a nameless language  designed specifically for the Adventure Game Studio tool (and mentioned as `'C'-style script` within the AGS source code, but no one calls it that), I renamed the script to Adventure Game Studio to avoid ambiguity (similar to how the ColdFusion's language is called ColdFusion), and brings more clarity to Adventure Game Studio game projects within github~~.

After making these changes, I cloned a selection of the projects that were incorrectly marked as AGS Script and ran a `exec rake linguist <clone_path> --breakdown` on them to ensure that things were working properly.
",Externals,2,False,en
1509,,Internals,0,False,en
1508,,Internals,0,False,en
1507,,Internals,0,False,en
1506,"This PR adds .cgi as an extension for both Python and Bash.
The issue was reported by @plaidfluff in #1504.
",Externals,4,False,en
1503,,Internals,0,False,en
1502,,Internals,0,False,en
1499,"As reported in #1494, the Common Lisp lexer is more appropriate to highlight Emacs Lisp code.
",Externals,4,True,en
1484,,Internals,0,False,en
1477,"Updated languages.yml to associate *.pig files with PigLatin.
Added pig script example to samples/.
Updated the samples.json with to account for new sample.

In-the-wild examples on GitHub:
https://github.com/packetloop/packetpig/tree/master/pig
https://github.com/jt6211/accumulo-pig

Can provide more if necessary. Popular language in ""big data"" field.
",Externals,4,False,en
1475,,Externals,0,False,en
1474,,Externals,0,False,en
1470,"The upstream pygments patches seem to have landed at GitHub as Pan code blocks
are being correctly highlighted, we should extend this to files in repositories as well.

Here is a Pan code block:

``` pan
variable e = error('I am Pan!');
```
",Externals,0,False,en
1465,"Added support for Adventure Game Studio's scripting language. Currently the code is interpreted as ascii doc, causing it to be unreadable in github, for example:
https://github.com/pablofelt/Rat-s-Quest/blob/f114025e57c3ff780a9133a362ddb8ae82ca96ee/rquest/Digging.asc

There are quite a few public sources using the Scripting language: 
https://github.com/search?q=player+extension%3Aasc&type=Code&ref=searchresults 
",Externals,25,False,en
1461,"Adding XML LabVIEW project per discussion at #1386 and #1387
",Externals,8,True,en
1460,,Internals,0,False,en
1459,,Internals,0,False,en
1458,,Internals,0,False,en
1457,,Internals,0,False,en
1451,"This is really just a housekeeping thing but currently the list of extensions (i.e. `language.all_extensions`) is defined by both the extensions in `languages.yml` but also the sample files for that language.

This PR adds a test to make sure that `languages.yml` extensions include all file extensions present in the samples folder for a language.

Note there should not be any behaviour change with this.
",Internals,0,True,en
1445,"Excludes files like:
- foundation.js
- foundation.min.js
- foundation.abide.js
",Externals,0,False,fr
1444,"This pull request should fix the errors made in:
- github/linguist#942
- github/linguist#943
- github/linguist#1443

For further details also refer to:
- tmm1/pygments.rb#131
",Externals,14,False,en
1438,"Since Linguist doesn't support file extensions with multiple segments (see #1388), this PR removes all of them.
They are replaced with the last segments. For example, `.cmake.in` becomes `.in`.
",Externals,4,False,en
1437,"This PR adds a lexer for Handlebars as discussed in #903.
I also removed the two file extensions with multiple segments since Linguist doesn't support those (discussed in #1388).
",Externals,7,False,en
1433,"As discussed in #1427, this PR adds [knockout.js](http://knockoutjs.com/) to the vendor list.
I tested it on the [EdgeFiles repository](https://github.com/AultCare/EdgeFiles).
",Externals,4,False,en
1432,"As discussed in #1429, this PR adds support the the Cycript language.
It only uses one extension (`.cy`) without conflict to other languages.
The syntax is mostly JavaScript so that's what it will use as lexer.
",Externals,4,False,en
1426,"Biblatex is a very common LaTeX package, now. There is three types of extension, with code written in LaTeX:
- bbx for bibliographic styles
- cbx for citation styles
- lbx for linguistic tools
",Externals,0,False,en
1421,"Added Font Awesome css files to vendor.yml and appropriate test.
",Externals,0,True,en
1419,,Internals,0,False,en
1418,"The previous regex had an unescaped period, which matches any character between 'composer' and 'lock' in the filename.
",Externals,0,True,en
1417,"As 3D printing becomes more popular, more OpenSCAD projects will appear
on github. This change allows linguist to recognize those projects.
Hopefully, this will make finding projects easier.

To show a few examples:
- https://github.com/gwadej/star_fury_model
- https://github.com/gwadej/tslot_nut_holder-stl
- https://github.com/secondsight/secondsight-hardware

For some projects that I'm not associated with:
- https://github.com/tbuser/openscad-bitmap
- https://github.com/kellyegan/OpenSCAD-Arduino-Mounting-Library
- https://github.com/algspd/openscad
- https://github.com/radavis/openscad
- https://github.com/bert/openscad-models
- https://github.com/XarpeSerpe/openscad
- https://github.com/jleto/openscad
- https://github.com/fukanchik/openscad
",Externals,1,False,en
1415,"Added support for the SQF scripting language used in the Arma series and other games based on the Real Virtuality engine.

Some examples of its usage:
- https://github.com/Taosenai/tmr
- https://github.com/michail-nikolaev/task-force-arma-3-radio
- https://github.com/KoffeinFlummi/AGM
- https://github.com/X39/XMS2

... and some other, private repos.
",Externals,4,True,en
1413,"Ignore [Bourbon SCSS](http://bourbon.io) mixin library. When this goes un-ignored, projects tend to have an extremely high percentage of CSS listed as the language used due to the sheer amount of it in the library itself. This is erroneous because the project developer(s) almost never touch this much CSS, and normal web development projects shouldn't be labeled as CSS projects just because they use the library alone.

Re-submitting pull request to [squash commits](https://github.com/github/linguist/pull/1407) and force Travis to re-run tests.
",Externals,4,True,en
1412,"This PR should improve the regular expression used for third party directories as discussed in #1409.
",Externals,4,True,en
1408,"Add support for LookML, the language component of [Looker](http://looker.com).

I expect the majority use of LookML is in private repositories. Looker generally pushes directly to private repos on GitHub since this code can contain proprietary information. Nevertheless, there's quite a bit of LookML floating around in public:
- https://github.com/snowplow/snowplow/tree/master/5-analytics/looker-analytics/lookml
- https://github.com/wilg/headlinesmasher.lookml
- [A search for LookML files on GitHub](https://github.com/search?q=dimension+extension%3Alookml&ref=searchresults&type=Code)
",Externals,2,True,en
1405,"allows for using both ColdFusion Lexers provided by pygments and allows
for proper syntax highlighting of cfscript based CFCs

Signed-off-by: Sean Coyne sean@n42designs.com
",Externals,2,False,en
1403,"Opening up this PR to get some :eyes: on this.

Basically this PR adds basic benchmarking to Linguist. To try it out copy the `samples` folder into `benchmark/samples` at the root level of the repo (note that these files are ignored in `.gitignore`).

Then try something like this:

`bundle exec rake benchmark:run compare=19c46da7...862bc3c33` where the `compare` string is two recent Git SHAs.

You should get output that looks like this:

```
Potential misclassifications for 19c46da7
  bar.h is classified as C but C++ was expected
  bcm2835.h is classified as Objective-C but C++ was expected
  CsvStreamer.h is classified as Objective-C but C++ was expected
  env.h is classified as C but C++ was expected
  Field.h is classified as Objective-C but C++ was expected
  gdsdbreader.h is classified as Objective-C but C++ was expected
  key.h is classified as C but C++ was expected
  libcanister.h is classified as Objective-C but C++ was expected
  metrics.h is classified as Objective-C but C++ was expected
  protocol-buffer.pb.h is classified as C but C++ was expected
  qscicommand.h is classified as Objective-C but C++ was expected
  qsciprinter.h is classified as Objective-C but C++ was expected
  rpc.h is classified as Objective-C but C++ was expected
  scanner.h is classified as C but C++ was expected
  Types.h is classified as Objective-C but C++ was expected
  utils.h is classified as C but C++ was expected
  v8.h is classified as C but C++ was expected

Potential misclassifications for 862bc3c33
  bar.h is classified as C but C++ was expected
  bar.hpp is classified as No language but C++ was expected
  bcm2835.h is classified as Objective-C but C++ was expected
  CsvStreamer.h is classified as Objective-C but C++ was expected
  env.h is classified as C but C++ was expected
  epoll_reactor.ipp is classified as No language but C++ was expected
  Field.h is classified as Objective-C but C++ was expected
  gdsdbreader.h is classified as Objective-C but C++ was expected
  key.h is classified as C but C++ was expected
  libcanister.h is classified as Objective-C but C++ was expected
  Math.inl is classified as No language but C++ was expected
  metrics.h is classified as Objective-C but C++ was expected
  protocol-buffer.pb.cc is classified as No language but C++ was expected
  protocol-buffer.pb.h is classified as C but C++ was expected
  qscicommand.h is classified as Objective-C but C++ was expected
  qsciprinter.h is classified as Objective-C but C++ was expected
  rpc.h is classified as Objective-C but C++ was expected
  scanner.cc is classified as No language but C++ was expected
  scanner.h is classified as C but C++ was expected
  Types.h is classified as Objective-C but C++ was expected
  utils.h is classified as C but C++ was expected
  v8.cc is classified as No language but C++ was expected
  v8.h is classified as C but C++ was expected

Changes between 19c46da7...862bc3c33
benchmark/samples/C++
  0.21% change to No language (count files)
```

Overall I'm reasonably happy with this implementation but there are some issues right now I could do with some help on:
1. I'm having to do [something funky](https://github.com/github/linguist/commit/19c46da714de1140d13e8b7e931299782c8c05b4) in `Rakefile` to try and force a reload of Linguist. This doesn't seem to be working properly as if I run `bundle exec rake benchmark:run index` for the respective commits (19c46da7 & 862bc3c33) then there should be fairly major changes due to [this very destructive commit](https://github.com/github/linguist/commit/862bc3c337f1b2b5eb5be7c8a83f95084663a28f).
2. Testing is a pain with all the `git checkout` stuff. It feels like there should be a better way.

Anyway, I'm off on me holidays for a couple of weeks but will pick this up then.

/ cc @bkeepers 
",Internals,113,True,en
1401,,Internals,0,False,en
1399,,Internals,0,False,en
1398,,Internals,0,False,en
1394,"Added support for EmberScript -> http://www.emberscript.com
",Externals,0,True,en
1385,,Internals,0,False,en
1383,,Internals,0,False,en
1376,"Available in pygments since 5ceb7533e214.
For a background of IGOR Pro see www.wavemetrics.com and www.igorexchange.com.

Repositories with igor procedure files:
- https://github.com/stakahama/igorlib
- https://github.com/yamad/igorutils
- https://github.com/dleifohcs/srs-igor
- https://github.com/david-hoffman/Igor-Data-Analysis
- https://github.com/bmcguyer/DAQ_Procedures_for_Igor_Pro

Pygments has a special style for igor pro. Is there a way I can force a specific pygments style? 

``` sh
pygmentize -L styles | grep -A1 igor
* igor:
    Pygments version of the official colors for Igor Pro procedures.
```
",Externals,9,False,en
1375,"I added animate.css into vendor.yml, animate.css is a popular animation library written in CSS. http://daneden.github.io/animate.css/
",Externals,0,True,en
1372,"This PR fixes the problem in #1365.
One of the samples for Groovy has a `.gradle` extension. Because of this, all `.gradle` files gets recognized as Groovy. I renamed the file from `build.gradle` to `build.script!`.

/cc @olivierg13
",Externals,6,False,en
1371,,Internals,0,False,en
1370,"/ cc @pchaigno and #1118 
",Internals,4,True,en
1364,"Added two more common perl file suffixes.
.cgi is for CGI scripts, and .t is for perl test scripts.
",Externals,0,False,en
1361,"Now with more binary fidelity.
",Internals,0,True,en
1360,,Internals,0,False,en
1358,"Added popular CSS reset Normalize.css to excludes. http://necolas.github.io/normalize.css/
",Externals,0,True,en
1354,,Internals,0,False,en
1353,,Internals,0,False,en
1352,,Internals,0,False,en
1348,"Chapel shows up on github in a few places (listed below). We, the chapel team, are going to move the main development repo to github later this month. There is a significant standard library implemented in chapel, which we would like to be correctly categorized.

There is a ChapelLexer in pygments. It is only available on the `default` branch, though. It is scheduled to be released with pygments version 2.0.

We picked a green that shows up in the chapel logo for the color.

Existing github repos with chapel code (that we are aware of):
- https://github.com/aroonsharma1/CHAPEL
- https://github.com/n7jti/Parallel_Computing
- https://github.com/rampion/chapel-tutorial
- https://github.com/benjcleveland/assignments
- https://github.com/chapel-lang/chapel/tree/master/modules

Chapel website: http://chapel.cray.com/

Thanks!
",Externals,4,True,en
1346,"This fixes the issue introduced in the 3.0.0 release and supersedes https://github.com/github/linguist/pull/1175

cc @arfon 
",Internals,7,True,en
1341,,Internals,0,False,en
1339,,Externals,0,False,en
1337,,Internals,0,False,en
1335,,Internals,0,False,en
1333,"The Alloy lexer is now part of pygments.rb  since tmm1/pygments.rb@403779d86e2eb3bb00a607a7b83adb104386ca50
",Externals,27,True,en
1331,"- language was already defined but missed ""type: programming"", so detection of ""BlitzMax""-files did not work. Fixed that.
- added ""BlitzMax""-example to samples (and recreated samples.json)
",Externals,0,False,en
1325,"This PR adds an interpreter for PHP and solves the issues #1324 and #1322.
",Externals,8,True,en
1323,"Grace is a new programming language designed to help novices learn to program easier. It has been under development since 2010: http://gracelang.org/applications/. 

Here are some repos on Github using Grace:
*https://github.com/AlexSandilands/grace-phix
*https://github.com/AlexSandilands/Grace-IDE
*https://github.com/gracelang/minigrace
",Externals,4,True,en
1320,"This series of commits adds support for the [Nit](http://nitlanguage.org) language.

The compiler is hosted on [Github](http://github.com/privat/nit), I also added a few examples with this series.

The lexer is Text only for now as the Pygments lexer for Nit is waiting to be accepted in Pygments.
",Externals,0,True,en
1318,"Development branch for the next version of Linguist with Rugged support.

cc @jakedouglas @github/linguist 
",Internals,0,True,en
1313,"This PR sets the sort order of the `samples.json` file's content once and for all.
The order of results from [Dir.entries()](http://ruby-doc.org/core-2.1.2/Dir.html#glob-method) depends on the system. This results in the `samples.json` file being considered as completely changed by git.

Thus, this PR should reduce the number of changes made to `samples.json` in future PR and the number of conflicts on this file.
",Externals,3,False,en
1311,,Externals,0,False,en
1309,"https://github.com/github/pygments/pull/4

/cc @vmg @tnm @charliesome @alindeman @arfon
",Internals,1,True,en
1308,"This PR adds lexers from the last two versions of Pygments (1.6 and the current 2.0).
",Externals,4,True,en
1306,,Internals,0,False,en
1305,"...because some of us don't like 'vendor'
",Externals,0,True,en
1303,".xsjs and .xsjslib are extensions to denote server-side JavaScript files in SAP HANA XS.
",Externals,0,True,en
1299,"IDL was missing a lexer, this PR fixes it :-)
",Externals,0,True,en
1297,"Someone just added this to Atom, figured it would be good to support here as well.

https://github.com/pry/pry/wiki/Pry-rc
",Internals,0,True,en
1295,,Internals,0,False,en
1294,,Internals,0,False,en
1293,,Internals,0,False,en
1292,,Internals,0,False,en
1291,,Internals,0,False,en
1290,,Internals,0,False,en
1289,,Internals,0,False,en
1285,"As discussed in #1249, this PR replaces `File.extname(filename)` by a `FileBlob.extension(filename)` method which returns the full filename when it is an extension (for example with `.cproject`).

I use this method only in two places in `language.rb` for the moment. Is there any other place where I should use it instead of `File.extname(filename)`?

The Travis build fails because of [this test](https://github.com/github/linguist/blob/master/test/test_language.rb#L252):

``` ruby
assert_equal [], Language.find_by_filename('.rb')
```

I don't understand this test... Don't we want a `.rb` file to be detected as Ruby?
Should I just remove it?
",Externals,7,True,en
1283,"Add support for Xojo language, formerly called REALbasic (which is already in `languages.yml`).

Some wild examples:
- https://github.com/Hawkcode/MemberTree
- https://github.com/oleman108/imSplitter
- https://github.com/Olivier61/Icare---GitHub
- https://github.com/paullefebvre/xojotest
- https://github.com/jcowgar/xojo-format-code
- https://github.com/LyricsMaster/COMProxy

The example script is taken from http://en.wikipedia.org/wiki/Xojo
",Externals,5,True,en
1282,"/cc @Haacked 
",Internals,0,True,en
1280,"Isabelle is a generic proof assistant. It is comparables (to some degree) to Coq.

Used in
- diekmann/topoS
- 3of8/sturm
- formare/auctions
- larsrh/hol-falso
- dpthayer/MetaProof

Hello Wolrd example (file must be named HelloWorld.thy):
  theory HelloWorld
  imports Main
  begin
  (_put content here_)
  end
",Externals,2,True,en
1279,"I dropped [Octicons](http://octicons.github.com/) into a project using the default [instructions](http://octicons.github.com/usage/), which resulted in Linguist deciding my project was mostly composed of CSS.

In the spirit of vendoring libraries like [Bootstrap](https://github.com/github/linguist/blob/50ab58e91f19260b11cf92b92c5b8e8c0d79f51c/lib/linguist/vendor.yml#L37) we might like to also vendor the Octicons CSS/SCSS files.

/cc @github/linguist @cameronmcefee
",Internals,27,True,en
1273,,Externals,0,False,en
1272,,Externals,0,False,en
1270,"This version includes the changes from #1255, #1256, #1257 #1260, #1260 and #1259.

Full diff - https://github.com/github/linguist/compare/v2.11.4...master
",Internals,28,True,en
1269,"Introduces lexers for Swift and Slim which are now supported by pygments and pygments.rb.
",Externals,0,True,en
1268,"It`s include file for assembler source that helps to structure code. Usually contains normal assembly source.
",Externals,0,True,en
1267,"This PR adds support for the `.pp` file extension for Pascal as mentioned in #1265.
`.pp` is already the primary extension for Puppet so I added a few samples for both languages.
I tested it on most of the trending Puppet repository as well as on [graemeg/lazarus](https://github.com/graemeg/lazarus).
",Externals,4,False,en
1261,"Linguist incorrectly identifies Mathematica Packages ("".m"" files) as Objective-C implementation files, and doesn't recognize Mathematica notebooks ("".nb"") at all.
Added two rules to languages.yml to correct this behavior.
",Externals,0,False,en
1260,"See https://github.com/svenvc/ston for the `.ston` project. The STON specification is [here](https://github.com/svenvc/ston/blob/master/ston-paper.md)
",Externals,0,True,en
1259,"This version includes a fix for the encoding lookup table for some encoding aliases in the ICU detection API. The issue was that there were some encodings that could be returned from the detection API which aren't in the list of supported encodings we get from ICU. Because of that the lookup table we build in charlock to find a Ruby-compatible encoding was missing entries for those unlisted encoding aliases.

https://github.com/brianmario/charlock_holmes/pull/69 is the pull which adds them and fixes this issue.
",Internals,2,True,en
1258,"implements #1133
",Externals,4,True,en
1257,"Kind of ugly but the Perl lexer actually does a surprisingly good job and it's what we use internally at Fastly
See
https://gist.github.com/simonwistow/17c5ec92816149d8bed6
https://gist.github.com/simonwistow/2fa534508a3f6ae72508

as included in

http://www.fastly.com/blog/how-to-cache-with-tracking-cookies/#.U5IeJZSwI1o

I I get some more time I'll write a custom lexer for Pygments.

There's plenty of other references to VCL on Github

https://github.com/varnish/Varnish-Cache
https://github.com/thenextweb/wp-vcl
https://github.com/comotion/security.vcl
https://github.com/lampeh/varnish-vcl
",Externals,29,False,en
1256,,Internals,0,False,en
1255,,Internals,0,False,en
1254,"This release includes changes from #1198, #1248, #1190 and #1253.

Full diff - https://github.com/github/linguist/compare/v2.11.3...v2.11.4
",Internals,24,True,en
1253,"As of `charlock_holmes` 0.7.2, it now returns a `:ruby_encoding` value from its detection call which is the Ruby-compatible encoding name (as a string). This value is what we should use for interacting with Ruby's own encoding API.
",Internals,3,True,en
1248,,Internals,0,False,en
1246,"Also corrects some minor incorrectness in the README about releasing
",Externals,0,True,en
1245,"We've seen cases where binary files are detected as encodings such as ISO-8859-8-I. This usually happens when the binary files are short, so while the detector is mistaken, there is also not very much data for use in the detection algorithm in the first place so it's understandable that the detector was wrong.

In these cases, the code to convert ASCII newline characters to encodings such as ISO-8859-8-I fails because there is no conversion between them.

We now simply assume that the data is all one line in those cases. In reality the data is binary, but this obviously difficult to detect reliably.

For review: @github/linguist
",Externals,10,True,en
1244,"The self-explanatory title is self-explanatory.

How would it look like beside Objective-C (I cropped those bars a little bit):

![zrzut ekranu 2014-06-03 o 16 01 22](https://cloud.githubusercontent.com/assets/565231/3161314/932b393a-eb2a-11e3-941c-9be01bb4d4f4.png)
![zrzut ekranu 2014-06-03 o 16 01 13](https://cloud.githubusercontent.com/assets/565231/3161319/97f0e32a-eb2a-11e3-8f09-2a2aad662a80.png)

Why orange? Because [it's the color of Swift](https://developer.apple.com/swift/)! :smiley:
",Externals,92,True,en
1241,,Internals,0,False,en
1239,"let me know if I've broken any submission guidelines... ie, Have I missed any mandatory config? Is my code sample too long? I cant test locally so I'm waiting for a Travis report...
",Externals,0,True,en
1238,,Internals,0,False,en
1237,"Text only lexer for now until Pygments catches up

Fixes #1236

For review: @github/linguist
",Externals,4,True,en
1232,"This PR adds support for the [Nix language](http://nixos.org/nix/manual/#chap-writing-nix-expressions). This would add syntax highlighting for the many packages in [Nixpkgs](https://github.com/NixOS/nixpkgs) as used in the [NixOS](http://nixos.org/) distribution.
",Externals,0,True,en
1230,,Internals,0,False,en
1228,"It looks like #1220 was broken, so I made commit 72a6186:

> Remove .h from Ox, fix `lex` typo, and add samples for Ox.
",Externals,10,True,en
1227,,Internals,0,False,en
1226,"Add .ct as an XML extension instead of its own language, as [recommended](https://github.com/github/linguist/pull/1199#issuecomment-44695601) by @arfon in #1199
",Externals,16,True,en
1220,"Adding Ox to the list http://www.doornik.com/ox/
",Externals,0,True,en
1219,"Changing SQL language definition back to `data`. A bunch of repos are being wildly misrepresented e.g. https://github.com/linkedin/sensei https://github.com/postgis/postgis https://github.com/TrinityCore/TrinityCore as they're storing SQL data exports in their repositories.

Until we have a better (repo-specific) ignore option such as a `.linguistignore` this needs to be reverted to `data`
",Internals,0,True,en
1217,"These include Podfile, Podfile.lock, and Pods/.
",Externals,0,True,en
1215,,Externals,0,False,en
1212,"My repo [fraction/fraction](/fraction/fraction) is being labeled as 100% shell, whereas the [language search](https://github.com/fraction/fraction/search?l=javascript) shows that it's almost all Javascript and LESS. What steps should I take to troubleshoot? Thanks!
",Externals,3,True,en
1211,"Currently, `loc` and `sloc` are incorrect for UTF-16 encoded files with Windows line endings ([example](https://github.com/YuriyGuts/winforms-auto-taborder-vsaddin/blob/master/src/Connect.cs)). This is because `data` and the newline regular expression are encoded as ASCII-8BIT or UTF-8, even if the encoding is detected as something else. In the case of UTF-16LE, Windows newlines are encoded as `""\r\0\n\0""`. Because of the `\0` separating the `\r` and `\n`, the current regular expression `(\r|\n)` counts two lines even though it should only be interpreted as one single line break.

The symptom is that [UTF-16LE encoded files with Windows line endings](https://github.com/YuriyGuts/winforms-auto-taborder-vsaddin/blob/master/src/Connect.cs) are rendered with whitespace at the bottom that doesn't actually exist because the line count is calculated as twice what it should be.

/cc: @github/encodings
",Externals,11,True,en
1209,"GAMS (http://www.gams.com/) is a popular language for mathematical programming not currently supported by linguist.  This pull request adds the required file extension and an example file.
",Externals,0,True,en
1208,"R packages often include documentation with the `Rd` extension.  For example, see [ggplot2](https://github.com/hadley/ggplot2).  Presence of `Rd` files might help to increase the likelihood of a project being identified as pure R, rather than a mix of R and Rebol (which also uses the `.r` extension).
",Externals,2,True,en
1206,"As found in repositories related to @quattor, e.g. https://github.com/quattor/template-library-core
The test file provided matches the one I submitted to Pygments.

At some point in the future when the Pygments patches land at GitHub the lexer should be updated from ""Text only"" to ""pan"".
",Externals,0,False,en
1203,"This pull request adds `.ipp` extension (together with a sample from Boost.ASIO) for C++.
",Externals,0,True,en
1200,,Externals,0,False,en
1198,"It adds support for the Component Pascal language
http://en.wikipedia.org/wiki/Component_Pascal

Not tested.
",Externals,0,False,en
1194,"New version of Charlock Holmes, removal of `primary_extension`.
",Internals,0,True,en
1190,"I'm surprised this isn't already in there, but hopefully this works (haven't tested locally).
",Externals,0,True,en
1188,"Recently, Groovy has received support for a template engine that is in pure Groovy Syntax. This PR just adds the general file extensions to the list that are used.
- .gtpl - Groovy Template (MarkupTemplateEngine Templates)
- .grt - Groovy Reactive Template (Allows Components)
- .gvy - Same as .groovy (A short alias to .groovy)
",Externals,0,False,en
1187,"This bumps charlock_holmes to it's latest version, which removes it's dependency on libmagic. Fixing a ton of compile-time issues people were having as well as removing a lot of false-positives with binary detection.
",Internals,0,True,en
1183,"Note a search of github found 1.7 million code matches for ""modernizr"".
",Externals,2,True,en
1178,"This PR adds the .frag file extension for JavaScript as discussed in #1176.
GLSL also has this extension so I added a few samples for both languages.

Examples of JavaScript files misclassified as GLSL can be seen here:
https://github.com/search?q=return+extension%3Afrag&type=Code&ref=searchresults

It fixes the problem for the two repositories mentioned in #1176 ([katasemeion](https://github.com/Kazark/katasemeion) and [conway-game-of-life-with-angular-js](https://github.com/Kazark/conway-game-of-life-with-angular-js)).
",Externals,9,False,en
1172,"Let's get these somewhere visible.

cc @tnm @arfon @bkeepers 
",Internals,0,True,en
1168,,Internals,0,False,en
1167,,Internals,0,False,en
1166,"Cuda was first added to linguist in #758 without a type.
Because of this, it doesn't appear in the statistics bar.
This PR sets the type to programming.
",Externals,3,False,en
1165,,Internals,0,False,en
1160,,Internals,0,False,en
1159,"Get me some Travis action.
",Internals,0,True,en
1158,,Internals,0,False,en
1156,"Currently the PHP colour is very similar to C#, and seems to have been pulled from thin air. PHP has a perfectly nice distinctive purple, used on [php.net](http://php.net) since forever. This pull request changes PHP's colour to a dark shade of that purple.

| Before | After |
| --- | --- |
| ![](http://www.colorhexa.com/6e03c1.png) | ![](http://www.colorhexa.com/4f5d95.png) |
",Externals,8,True,en
1155,,Externals,0,False,en
1150,"Hello, I think that Red language deserve its place as well. It's source is here:
https://github.com/red/red

It is not recognized by Pygments yet, but I hope it will be soon.
https://bitbucket.org/birkenfeld/pygments-main/pull-request/341/initial-version-of-red-language-red/diff
",Externals,3,False,en
1146,"DOT language is a (graph) description language thus a subset of a data
language.
",Externals,0,False,en
1144,"Taken from the YoYoGames/GameMaker logos.
",Externals,0,True,en
1143,"Updated version of #949 (and neater).

Pull request taken up from #919.
Some example NewLISP repositories on GitHub:
https://github.com/kanendosei/artful-newlisp
https://github.com/taoeffect/dragonfly-newlisp
https://github.com/newlisponrockets/newLISP-on-Rockets
",Externals,6,True,en
1142,"This new sample file for R improves the Bayesian classifier and solves the issue #1139.
",Externals,4,True,en
1141,"Even though Haskell was included in languages.yml, there weren't any samples, so this commit will add a simple hello world program and an implementation of a sudoku solver.
",Externals,0,True,en
1136,,Externals,0,False,en
1135,,Internals,0,False,en
1132,"Zephir generates C code and php stubs, this pattern catch them.
https://github.com/phalcon/zephir/issues/341 here it was discussed
",Externals,3,False,en
1130,,Internals,0,False,en
1129,"This pull request was asked for in #1074. It adds support for the BitBake language.

It creates a conflict on the .bb extension with BlitzBasic.
I tested it on several BitBake repositories (which are currently recognized as BlitzBasic) and I didn't have a single perfect detection. I think this is because they aren't that different and, on the small files, the Bayesian classifier isn't very helpful. (It's better than before as BitBake files were not detected at all.)
@e8johan Do you have more representative BitBake files? It could help improve the accuracy of the Bayesian classifier.

I think it could be resolved with heuristics as discussed in #1074. I could write these when heuristics are enabled.

Because of the current restriction, I had to change the primary extension of BlitzBasic to .decls.
",Externals,9,True,en
1125,,Internals,0,False,en
1123,"JavaScript's colour was changed in the same batch of PRs that PureScript was added in, and now they have almost identical colours (see https://github.com/purescript/purescript-control for an example). Since both languages will almost always appear together in a project this isn't totally ideal!

Apologies if this is too frivolous a change.
",Externals,0,True,en
1122,,Internals,0,False,en
1121,"This PR adds `Linguist::VERSION` which returns the current version of Linguist.
",Internals,0,True,en
1120,"Combined #1117 and #1116 branch.
",Internals,8,True,en
1116,"[Liquid](https://github.com/Shopify/liquid) is a templating engine written by Shopify.
- [x] Add Liquid to languages.yml
- [x] Add samples (what are you looking for here?)

Ref: https://github.com/github/linguist/issues/767

/cc @benbalter
",Internals,3,False,en
1114,"@arfon @bkeepers @tnm 
",Internals,0,True,en
1110,"@tnm - can you take a look at this?
",Internals,0,True,en
1109,"Adding Crystal examples.
",Internals,0,True,en
1108,,Internals,0,False,en
1106,,Internals,0,False,en
1105,"Debugging build errors on #1072 
",Internals,4,True,en
1104,"When invoking bundle package,
These two files are added to the root directory, IMO can be safely ignored.
",Externals,0,False,en
1103,"In #1098 added the Mercury language, but that broke the Moocode language, this PR fixes that.
Also add ace_mode to Mercury
",Externals,4,False,en
1102,"[Movable Type](http://movabletype.org/), the content management system started more than a decade ago, commonly uses the `.mtml` extension to represent files written in its template language, based on XML and commonly intertwined with HTML.

There are [almost 10K](https://github.com/search?q=mt+extension%3Amtml&type=Code&ref=searchresults) such files on Github.
",Externals,3,True,en
1101,"This pull request adds 4 new extensions for SQL as requested here: #1099.
It doesn't add any new conflict on the extensions.
I also added a few samples (one per file extension) for SQL.

Examples of usages on GitHub:
- .prc - https://github.com/search?q=extension%3Aprc+create&type=Code&ref=searchresults
- .tab - https://github.com/search?q=extension%3Atab+create&type=Code&ref=searchresults
- .udf - https://github.com/search?q=extension%3Audf+create&type=Code&ref=searchresults
- .viw - https://github.com/search?q=extension%3Aviw+select&type=Code&ref=searchresults

I couldn't find many examples for .tab so I'm not sure we should add it.
I pushed it for the moment because it doesn't harm anything (no conflict).

I didn't push the regenerated `samples.json` because it had a lot of modifications which have nothing to do with this. However, I tested with it too and it works well.
",Externals,9,False,en
1100,"It is now in the Pygments repo at HEAD, so whenever GitHub gets that update, this should ""just work.""
",Externals,0,True,en
1098,"Adding Mercury in a way that can be merged now. More to come on removing `primary_extension` dependency. 
",Internals,0,True,en
1097,"Update on 1046
",Internals,4,True,en
1096,"Updating #989 
",Internals,3,True,en
1095,"http://jsoniq.org
",Externals,0,True,fr
1094,,Internals,0,False,en
1093,,Internals,0,False,en
1092,,Internals,0,False,en
1090,"Merging current master and regenerating `samples.json` to land #1011.

/cc @bkeepers @arfon @tnm @CrimsonTautology
",Internals,4,True,en
1089,"Merging current master and updating `samples.json` to land #668.

/cc @bkeepers @arfon @tnm @johnjcamilleri
",Internals,3,True,en
1088,,Internals,0,False,en
1087,"Just merging current `master` and doing a regen on `samples.json` to get things current.  Replaces #718.

/cc @bkeepers @arfon @tnm @SparkysWidgets
",Internals,3,True,en
1086,"Just for @jglovier 
",Internals,0,True,en
1085,"An update to #826 to merge current master and regen `samples.json`

/cc @bkeepers @arfon @tnm @mmhelloworld
",Internals,3,True,en
1084,,Internals,0,False,en
1083,"Regen `samples.json` data on merged master for #899.

/cc @TazeTSchnitzel @bkeepers @arfon @tnm 
",Internals,3,True,de
1082,"Update of #922 
",Internals,3,True,en
1081,"Updated version of #931 with master merged, conflicts resolved, new sample data regen'ed, etc.

/cc @cgranade @@pchaigno @arfon @bkeepers @tnm
",Internals,3,True,en
1080,,Internals,0,False,en
1075,"Treading carefully here as I've never touched this gem before, so would appreciate eyes from the listed maintainers and other folks interested / knowledgeable about linguist.

/cc  @charliesome @piki @tnm @defunkt @vmg @bkeepers @gjtorikian @izuzak @arfon @dgraham @balevine @rsese @jdennes
",Internals,0,True,en
1073,"I have seen .vshader and .fshader extensions being used for GLSL shaders in many places. I use them myself.

Although I have never seen .gshader, I added it too. It is logical by the pattern.
",Externals,0,True,en
1072,"![screenshot 2014-04-16 16 59 54](https://cloud.githubusercontent.com/assets/182290/2725138/1d7dface-c5aa-11e3-9369-6dc656828c5b.png)

/cc @benbjohnson
",Externals,45,True,en
1071,"This uses the pygments.rb Bash Session lexer to colorize shell sessions:
https://github.com/tmm1/pygments.rb/blob/master/vendor/pygments-main/pygments/lexers/shell.py#L110

I chose the `.sh-session` extension because that is what pygments specifies.  

I did not include an updated `samples.json` because when I ran `bundle exec rake samples` it changed a lot more than just my stuff.
",Externals,4,False,en
1068,"> Zephir is a compiled high level language aimed to the creation of C-extensions for PHP 
> http://zephir-lang.com/

https://github.com/phalcon/zephir
",Externals,0,False,en
1063,"The OpenStreetMap project (openstreetmap.org) uses the .osm extension for the OSM XML format (http://wiki.openstreetmap.org/wiki/OSM_XML).

Full “real-world” OSM files are usually too big to put in a repository, but small sample files may be used to test applications that process OSM files, for example [here](https://github.com/routeKIT/routeKIT/tree/master/test/edu/kit/pse/ws2013/routekit/precalculation).
",Externals,4,True,en
1060,"The Java build system 'Buildr' uses a Ruby build file, similar to Rake.  This change adds syntax highlighting for `Buildfile` and `buildfile`, the primary name(s) of the Buildr file.

All other Buildr filename options (as listed at https://github.com/apache/buildr/blob/master/lib/buildr/core/application.rb#L110) are already covered by other things here.
",Externals,3,True,en
1056,"Adds support for the Alloy language (see http://alloy.mit.edu/). Alloy is a language for describing structures and a tool for exploring them. It has been used in a wide range of [applications](http://alloy.mit.edu/alloy/applications.html) from finding holes in security mechanisms to designing telephone switching networks.

Some repositories using this language:

https://github.com/eskang/500lines
https://github.com/gchpaco/xacml
https://github.com/jonnybest/benchmark-results
https://github.com/juodaspaulius/BehavioralClafer
https://github.com/jschear/cs195y-case-studies

And the list goes on (an advanced search for ""model extension:als"" [shows 459 code results](https://github.com/search?q=model+extension%3Aals&type=Code)).

I'll be sending a pull request to Pygments for an Alloy lexer, but since it might take some time for that change to be integrated (and for it to appear on pygments.rb) I temporarily set `lexer` to `Text only` for Alloy.
",Externals,10,True,en
1052,"- Fixes #1051
- Any folder with ""cache"" in it was being ignored. This fixes it.
",Externals,4,False,en
1049,"lib/linguist/languages.yml:
    Add the declaration for the Mercury language.

samples/Mercury:
    Add samples for the classifier as Mercury shares it's filename extension
    with several other languages.
",Externals,0,False,en
1046,"Adds support for the GAP language, see http://www.gap-system.org/
Some repositories using this language:
- https://github.com/fingolfin/NormalizInterface
- https://github.com/gap-system/anupq
- https://github.com/neunhoef/orb
- https://github.com/homalg-project/AutoDoc

and in fact pretty much all repositories of these orgs / users:
- https://github.com/gap-system
- https://github.com/neunhoef
- https://github.com/homalg-project

I also made a pull request with Pygments for a GAP lexer, see https://bitbucket.org/birkenfeld/pygments-main/pull-request/311
",Externals,3,False,en
1042,"Ignore vignette and external data directories which contain no R source code
",Externals,0,True,en
1041,,Externals,0,False,en
1040,"[Latte](https://github.com/nette/latte) is a templating engine for php.

Even by my spartan measurements there are [tens of thousands](https://github.com/search?q=block+extension%3Alatte&type=Code&ref=searchresults) of latte files on github.
",Externals,1,True,en
1035,"Standard ML code (particularly the Poly/ML dialect) often has the .ML file extension. Probably the most prevalent example is in the theorem prover Isabelle. See:
- http://isabelle.in.tum.de/repos/isabelle/file/1d122af2b11a/src/Pure

Examples on github:
- Quantomatic/quantomatic
- Quantomatic/isaplib
- ggrov/psgraph
",Externals,7,False,en
1026,"This pull request adds jQuery IntelliSense files for Visual Studio to vendor.yml.
It has been requested in #1024 and it's used in this repo for example:
https://github.com/dejancaric/dibs-aspnetmvc-demo/search?l=javascript
",Externals,4,False,en
1014,"This pull request add the .inl file extension for C++.
This was requested in #615.
Many examples of unclassified C++ files with the inl extension can be found here:
https://github.com/search?q=define+extension%3Ainl&type=Code&ref=advsearch&l=
",Externals,4,False,en
1011,"SourcePawn is the language used for writing [SourceMod](http://www.sourcemod.net/about.php) plugins that modify games running on Valve's Half-Life 2 engine.

This language is becoming very popular on Github as can be seen [here](https://github.com/search?q=%23include+%3Csourcemod%3E&type=Code&ref=searchresults) and [here](https://github.com/search?q=if+extension%3Asp&type=Code&ref=searchresults).

This pull requests includes changes requested in my previous pull request #497.
",Externals,9,True,en
1008,"PureScript is a small strongly, statically typed programming language with expressive types, written in and inspired by Haskell, and compiling to Javascript.

http://www.purescript.org
https://github.com/purescript
",Externals,0,True,en
1005,"Historically Rebol used the .r extension which unfortunately clashes with the R Stats programming language :(

For example even the Rebol interpreter repo says it uses 9.7% R instead of Rebol! - https://github.com/rebol/rebol

So 3 changes here…

1) .reb is now the primary (and official) extension - http://www.rebol.com/article/0540.html

2) .rebol moved to list of extensions (some code does use it)

3) .r added back.  NB. The majority of Rebol code on Rebol uses this (followed by .r2 & .r3).  .r was present in languages.yml previously but was removed for some reason? (looks like here - https://github.com/github/linguist/commit/5a5d33499942d2a294ffec593539a9095f105882)
",Externals,42,True,en
1002,"I've added Stata extensions to languages.yml, including samples for each.
",Externals,0,True,en
997,"These two files are incorrectly classified as Perl.  They should be
classified as Prolog.  There are many distinctive tokens in each file
which clearly differentiate between Perl and Prolog.
",Externals,0,False,en
991,,Externals,0,False,en
989,"My MATLAB project is only showing up as ~46% MATLAB when ~90% of it should be.  I am attempting to fix this the best that I can.
",Externals,4,True,en
988,"Adds support for the Propeller Spin programming language, used by the Parallax Propeller microcontroller.
",Externals,0,True,en
985,"The language attribute is still maintained as the first extension found.

This allows Mercury to be properly detected by Linguist, as per #748.
",Externals,3,True,en
981,"now that there is `.hh` for the header, `.cc` should be there for the source.
",Externals,0,True,en
979,"Mr. Nyman and associates,

This pull request proposes subtle but important changes to the colors for JavaScript and CSS, updating them from their current colors, shown here:

![screen shot 2014-03-06 at 11 20 23 pm](https://f.cloud.github.com/assets/39759/2354715/1009a164-a5c9-11e3-8702-2420982c88a4.png)

And changing them to these:

![screen shot 2014-03-06 at 11 19 41 pm](https://f.cloud.github.com/assets/39759/2354717/1fefee80-a5c9-11e3-980c-01d357f8e992.png)

The existing colors play on the traditional and played out red and blue motifs, whereas the updated colors, purple and yellow, are not only a more 21st century color color tuple choice but also each come from existing globally proven use cases.

`#f7df1e`, the yellow used to represent JavaScript in this pull request, is also known as ""JavaScript yellow"" as it is the **official** yellow used in the JS logo: https://github.com/jsconf/logo.js/blob/master/js.svg#L19

`#563d7c`, aka ""bootstrap purple"", is an obvious choice for a CSS color refresh as this hex code represents the iconic brand of the most popular stylesheet in the universe.

In preparation for this pull request I first analyzed the current color distribution across all languages ([source available here](http://requirebin.com/?gist=9406519)):

![screen shot 2014-03-06 at 11 12 04 pm](https://f.cloud.github.com/assets/39759/2354681/d449ad50-a5c7-11e3-9c6e-550fa5d51b98.png)

As you can see, there are already a multitude of reds, yellows and purples, which assures me that these changes won't stand out relative to other colors used on GitHub today.

In closing I would like to leave you with this photo

![1efa19a864fe11e392800a3677605d12_8](https://f.cloud.github.com/assets/39759/2354756/5797eae4-a5ca-11e3-99f8-43147d02e9d3.jpg)
",Externals,218,True,en
978,,Externals,0,False,en
973,"The routine Comment.m has most of the rules for comments and tags.
",Externals,0,True,en
972,"Followed the commit pattern of a3e1420476c8dec309895e6bbde01a2101d0e1ed
",Externals,24,True,en
971,"Hopefully, this is enough to make Gemfile.lock syntax highlighting not look totally crazy. If not, please point me in the right direction and I'll do more.

For example, https://github.com/G5/g5-phone-number-service/blob/master/Gemfile.lock

<3
",Externals,3,True,en
969,"Support of AspectJ language as discussed here: #968.
AspectJ files are currently recognized as Java files.
They are currently the only language with the .aj extension (thus no conflicts).

Some examples on GitHub:
https://github.com/Migueli/AspectJ
https://github.com/migue/blog-examples
https://github.com/eclipsesource/com.eclipsesource.tycho.aspectj.demo

I added two sample codes.
",Externals,3,False,en
967,"Shen is a portable functional programming language that offers

pattern matching,
λ calculus consistency,
macros,
optional lazy evaluation,
static type checking,
an integrated fully functional Prolog,
and an inbuilt compiler-compiler.
Shen has one of the most powerful type systems within functional programming. Shen runs under a reduced instruction Lisp and is designed for portability. The word ‘Shen’ is Chinese for spirit and our motto reflects our desire to liberate our work to live under many platforms. Shen includes sources and is absolutely free for commercial use. It currently runs under CLisp and SBCL, Clojure, Scheme, Ruby, Python, the JVM and Javascript.
http://www.shenlanguage.org

Examples: 
https://github.com/samebchase/shen-json
https://github.com/vasil-sd/shen-libs
https://github.com/4DA/shen-safevec
https://github.com/gravicappa/shen_run
https://github.com/gravicappa/js-kl
https://github.com/deech/ShenVendingMachine
https://github.com/mstill/shen-lazy-list
https://github.com/kianwilcox/shenspec
",Externals,1,True,en
965,"Support of the SystemVerilog language as discussed here : #964.
[SystemVerilog files](https://github.com/search?l=Verilog&q=output+extension%3Asv&ref=advsearch&type=Code) are currently recognized as Verilog programs.
They have the .sv and .svh file extensions.
I added three sample codes.
",Externals,4,False,en
963,"Gradle Wrapper [1] files are auto-generated. They shouldn't count in the language statistics.

[1] http://www.gradle.org/docs/current/userguide/gradle_wrapper.html
",Externals,2,True,en
961,"React is a library quickly growing in popularity.  Let's exclude it from language stats.
",Externals,0,True,en
957,,Internals,0,False,en
952,"This adds an interpreter for AppleScript, so that executable AppleScript files without extensions, but with a shebang are correctly recognized. [`osascript`](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osascript.1.html) is an interpreter for AppleScript files.
",Internals,2,True,en
951,"This adds an interpreter for JavaScript, so that executable JavaScript files without extensions, but with a shebang are correctly recognized. [`node`](http://nodejs.org/) is one of the interpreters for JavaScript files.
",Internals,0,True,en
950,"Because it is (see https://github.com/waveform80/db2utils which hilariously claims to be 79% written in C!)
",Externals,5,True,en
944,"When we write R extensions for QGIS we have to end the files in .rsx [1]. But the code its pure R. It would be great if github acknowledge those scripts as R scripts.

[1] http://www.qgis.org/es/docs/user_manual/processing/3rdParty.html#r-creating-r-scripts
",Externals,3,True,en
938,"Hello,

adding support for the Mask markup language, designed for the Web. It is component-based, supports statements and expressions. Basically it renders directly to the DOM via the DOMBuilder, but also has a HTMLWriter.

Thank you for your time, Cheers.
",Externals,0,True,en
935,"This new extension has been requested in #934.
",Externals,3,True,en
933,"This adds the support of the .pro file extension for Prolog.
This extension is often used as a replacement for .pl (which is also the Perl file extension).
Currently, Prolog files with the .pro extension are detected as IDL files.
This search result displays some misdetected files:
https://github.com/search?l=IDL&q=%3A-&ref=advsearch&type=Code
I've added some heuristics and a sample file.
",Externals,1,False,en
931,"Though Mathematica notebooks are quite opaque, Mathematica uses a text-based format for _packages_. This pull request adds samples of Mathematica packages. I have tested this on some private repositories that contain Mathematica code, and am getting about 90% accuracy in distinguishing Mathematica from Objective-C and MATLAB.
",Externals,2,True,en
924,"[The Kit Language](http://incident57.com/codekit/kit.php) is a markup language primarily used with the CodeKit preprocessing app on OS X, but the compiler is [open source](https://github.com/bdkjones/Kit) for implementation by anyone.
It's just HTML with the ability to use variables and imports similar to server-side includes.
",Externals,2,False,en
923,"Many haxelib projects ([like this one](https://github.com/HaxeFoundation/hxcs) or [this](https://github.com/HaxeFoundation/hxjava)) contain a ""run.n"" (neko bytecode) file which linguist treats like Nemerle source code.
",Externals,0,True,en
922,"[Gnuplot](http://www.gnuplot.info/) is widely used on GitHub (you can find several examples using a search on its extensions, for example [here](https://github.com/search?q=extension%3Agp+a), [here](https://github.com/search?q=extension%3Agnu+a), [here](https://github.com/search?q=extension%3Agnuplot+a) or [here](https://github.com/search?q=extension%3Aplt+a)). Pygments has a [lexer](http://pygments.org/docs/lexers/#pygments.lexers.other.GnuplotLexer) for it.
",Externals,4,True,en
920,"This is a follow up to #389. The [E language](https://en.wikipedia.org/wiki/E_%28programming_language%29) (not to be confused with the [e Verification Language](https://en.wikipedia.org/wiki/E_%28verification_language%29)) is used on GitHub, for example in [acmeism/RosettaCodeData](https://github.com/acmeism/RosettaCodeData/blob/6f050a029e46f0c2c0e0c12c8c15ffdb543af9c5/Task/HTTP/E/http.e). It’s hard to find some samples because of the case-insensitive search (Eiffel’s and e’s primary extensions are both `.e`) and the short name. It has various implementations, written in [Haskell](https://bitbucket.org/nejucomo/eonhs/wiki/Home), [Java and Common Lisp](http://erights.org/#quickstart).
",Externals,34,True,en
916,"This adds the support of the .ecl file extension for Prolog.
.ecl is used for ECLiPSe Prolog files (as opposed to pure-Prolog files).
This search result displays misdetected files:
https://github.com/search?l=ECL&q=%3A-&ref=advsearch&type=Code
One of the best example being:
https://github.com/hakank/hakank/blob/d0de1db0f7b1f87847b2b2702dbcedd86cb7a5ff/eclipse_clp/discrete_tomography.ecl

The ECL language also uses this file extension thus I added some heuristics and a sample file to go with it.
",Externals,20,False,en
913,"This improves language detection for the `.cl` file extension.

These search results displays misdetected files:
http://github.com/search?l=opencl&q=extension%3A.cl+defun
http://github.com/search?l=common-lisp&q=extension%3A.cl+kernel
",Externals,2,True,en
911,"This subsumes @wdblair's pull request https://github.com/github/linguist/pull/828 primarily by adding several examples, and moving the .cats extension to be a C file, as these are actually C files intended to interface between C and ATS.

ATS is a statically typed programming language that unifies implementation with formal specification. It is equipped with a highly expressive type system rooted in the framework Applied Type System, which gives the language its name. In particular, both dependent types and linear types are available in ATS.

Language Website:
http://www.ats-lang.org

Latest Compiler (also includes many software projects in the contrib subdirectory):
http://github.com/githwxi/ATS-Postiats

Some other github projects using ATS (I'm sure I've missed some, and my laptop battery is about to die, so this is it for now.):
https://github.com/githwxi/ATS-CMake
https://github.com/bbarker/FALCON
https://github.com/doublec/ats-task
https://github.com/doublec/ats-libzmq
https://github.com/doublec/ats-libevent
https://github.com/doublec/ats-jansson
https://github.com/doublec/ats-bitcoin
",Externals,3,True,en
910,"Projects based on https://github.com/dockyard/ember-appkit-rails are starting to use `.es6` as a file extension for files using ECMAScript 6.

It would be great to have `.es6` files  highlighted. You can see an example file here https://github.com/abuiles/facturas/blob/master/app/models/client.es6
",Externals,4,True,en
909,"This adds an interpreter for CoffeeScript, so that executable coffee files without extensions, but with a shebang are correctly recognized. `coffee` is [the interpreter](http://coffeescript.org/#usage) for CoffeeScript files.
",Internals,0,True,en
907,"This adds an interpreter for Groovy, so that executable groovy files without extensions, but with a shebang (such as [this one](https://github.com/arturoherrero/sparky/blob/master/sparky)) are correctly recognized.
",Internals,0,True,en
906,"Cirru is a set of grammar rules designed for scripting langauges based on indentations.
Home page: http://cirru.org/

Pygments support merged but not released:
https://bitbucket.org/birkenfeld/pygments-main/pull-request/275/add-syntax-for-cirru/diff
Syntax support of Ace editor not merged yet: https://github.com/ajaxorg/ace/pull/1780
I'm not sure when they are possible to be run on GitHub, so I commented them by now.
",Externals,7,False,en
900,"Add some more Perl 6 examples so the classifier does a better job.
",Externals,1,True,en
899,"Game Maker Language (or GML) is the language used by YoYoGames's Game Maker and Game Maker: Studio products. It is used in several repositories on GitHub, for example (these are just a few I could find with a quick google search):
- https://github.com/Medo42/Gang-Garrison-2 (from which I got most of my samples)
- https://github.com/TazeTSchnitzel/Faucet-HTTP-Extension
- https://github.com/ouya/ouya-sdk-examples/tree/master/GameMaker
- https://github.com/Zetaphor/gamemaker-games
- https://github.com/Kojir0/Phase1.gmx
- https://github.com/RealFilling/makeitgrow-game.gmx
- https://github.com/tyrovc/SpelunkyCommunityUpdateProject
- https://github.com/oniofchaos/Game-Maker---AverEnum
- https://github.com/RealFilling/makeitgrow-game.gmx
- https://github.com/grixm/vrilda
- https://github.com/messhof/Networking-in-Game-Maker
- https://github.com/xbelanch/LudumDare25

**EDIT:** Ooh! Doing a search with a common GML function name finds thousands of results:
- [draw_set_color](https://github.com/search?p=1&q=draw_set_color&ref=searchresults&type=Code)
- [instance_create(0,0](https://github.com/search?q=instance_create%280%2C0&type=Code&ref=searchresults)
- [event_user(0)](https://github.com/search?q=event_user%280%29&type=Code&ref=searchresults)
- [ds_list_create](https://github.com/search?q=ds_list_create&type=Code&ref=searchresults)

This yields so many examples that I won't bother listing any of them.

(granted, not all of that's GML, but most of it is)

It's worth noting, however, that Game Maker has two output formats:
- .gmk/.gm8/etc files, which contain an entire project in one binary file (Linguist won't be able to recognise this)
- .gmx directories, which contain a project in hierarchical files and directories in a version control-friendly format (Linguist will be able to recognise .gml files in here). This is only supported by Game Maker: Studio.

As well as those, there is also an open-source tool called Gmk-Splitter which produces a similar source control-friendly hierarchy from a .gmk file for older versions of Game Maker. This is used by some older projects such as the aforementioned Gang Garrison 2.

For the .gmx sort and Gmk-Splitter, it's worth noting that this request only covers raw .gml files (which both Studio and Gmk-Splitter produces for scripts), and not .gmx XML files or Gmk-Splitter .xml files describing object events, which can also contain GML code. It could be possible to add these, but I think these might need to be covered as different ""languages"", due to needing to lex C-like source code embedded XML instead of C-like source code. Even though this means that the pull request offers only limited support, it does mean that all the GML code on GitHub will start being recognised as GML and not ""Shell"" ;)

As well as repositories, there are also many gists using GML.

So, please accept this request, if only such that GML respositories are recognised as GML and not ""Shell"" :)
",Externals,23,False,en
897,"Inform 7 is an interactive fiction design language.

The team account https://github.com/i7 has several active Inform 7 projects.
",Externals,3,True,en
896,"Adds pattern for typescript definition files (by convention named with a .d.ts extension). Typescript definition files may be very big. The jquery.d.ts file form the DefinitelyTyped repo on GitHub is 11k lines.
",Externals,2,True,en
892,,Externals,0,False,en
891,"Tcl uses modules which have the extension `.tm`, so I have added this extension for Tcl.

This is a new request without any samples, to replace the previous pull request which I have removed.

Reference to the `.tm` extension for modules can be seen in the Tcl manual:
  http://www.tcl.tk/man/tcl8.5/TclCmd/tm.htm#M9

Examples of Tcl modules are here:
  https://github.com/LawrenceWoodman/stream_tcl/blob/master/stream-0.1.tm
  https://github.com/LawrenceWoodman/xdgbasedir_tcl/blob/master/xdgbasedir-0.3.tm
",Externals,7,True,en
890,,Externals,0,False,en
889,"More than 2000 Forth files with the `.f` extension are misidentified as Fortran:
http://github.com/search?q=extension%3A.f+dup

This pull request adds
- `.f` as a Forth extension
- Fortran samples
- Heuristics to chose between Forth and Fortran
- Tests

Tested with these repos:
http://github.com/ruv/epurger
http://github.com/certik/fortran-utils
http://github.com/joamaki/jforth
http://github.com/nschloe/lapack
http://github.com/besser82/linpack
http://github.com/xianyi/OpenBLAS
http://github.com/robertord/SBP-MCAP
http://github.com/zwizwa/staapl
http://github.com/voidlizard/tdforth
http://github.com/wesleycyn/ezForth
http://github.com/Starlink/starlink
http://github.com/orenf/fvs
http://github.com/VoidVolker/spf64
",Externals,9,False,en
888,,Externals,0,False,en
886,"Both TypeScript and [Qt translation files](http://qt-project.org/doc/qt-4.8/linguist-translators.html#file-types) (XML-based) use the extension .ts .

TypeScript already existed in linguist, but not Qt translation files. I'm using the latter [here](https://github.com/ruben2020/codequery/tree/master/gui/translations).

It looks like heuristics was deactivated and only test code is added? I have modified my changes accordingly.
",Externals,6,True,en
885,"PAWN is a simple, typeless, 32-bit extension language with a C-like syntax. A pawn ""source"" program is compiled to a binary file for optimal execution speed. The pawn compiler outputs P-code (or bytecode) that subsequently runs on an abstract machine. Execution speed, stability, simplicity and a small footprint were essential design criteria for both the language and the abstract machine. 

[Official Website](http://www.compuphase.com/pawn/pawn.htm)
[Where is PAWN used?](http://www.compuphase.com/pawn/pawnprojects.htm)

You can see [here](https://github.com/search?q=%23include+%3Ca_samp%3E&type=Code&ref=searchresults) PAWN is used for SA-MP and also [here](https://github.com/search?q=if+extension%3Apwn&type=Code&ref=searchresults) all the .pwn extensions in GitHub.
",Externals,7,True,en
884,".cls extension for LaTeX document class files: 
https://www.tug.org/TUGboat/tb28-1/tb88flynn.pdf

adds another sample to the tex samples directory:
https://github.com/jmromer/linguist/tree/add-tex-cls-extension/samples/TeX 
",Externals,5,False,en
882,"See https://github.com/github/linguist/pull/411 for original PR.

/ cc @josharian
",Internals,3,True,en
880,"Following from my recent addition of some C# samples (thanks for the quick merge - wasn't sure about the etiquette of commenting on the closed issue with a thanks :), I thought I might as well make the most of my VS 2012 and produce some VB.Net samples on the same lines.
",Externals,4,True,en
879,"Option hash was reset to an empty hash every time you call `#colorize`. Removed this so you can pass options to Pygments' formatters.

Included a test case.
",Externals,0,True,en
878,,Externals,0,False,en
877,"My C# repos seem to be incorrectly identified as being mostly JavaScript. The main reason is that Visual Studio includes a bumper bundle of vendor JS files in an ASP.Net MVC application -- something to address in another pull request, maybe -- but is also due to the Razor View files (.cshtml) being ignored. As these are specific to C# and distinct from the aspx files that GitHub identifies as generic ASP, it seems logical to include them in a language count for C#.

I also noticed that there were no C# samples, so I have added a .cs and a .cshtml file to the samples, and ascertained that the tests ran successfully before my changes, failed before I rebuilt the json file, and are now passing locally.
",Externals,0,True,en
873,"The refactor in #836 is broken -- `scores` is undefined in the `debug_dump_probabilities` function.  This fixes it.

/cc @tnm
",Internals,3,True,en
872,"The `linguist` binary (and the `Repository` class) can now tell you the breakdown of what files in a repo match what language.
",Internals,0,True,en
870,".njs is an extension used to denote node javascript files.

Fixes https://github.com/github/linguist/issues/865
",Externals,3,True,en
868,"This pull request updates two things in the gemspec metadata: a bit of description text, and the MIT license.

This change allows RubyGems.org and other tools (such as gem2rpm) to report a license for your gem and display a helpful description to users.
",Externals,1,True,en
864,"Add AngularJS to vendor files list
",Externals,0,True,es
862,"Adds Bower Component files to the vendored files list.  This
uses the `bower_components` directory, which is the standard set by the
Bower package manager.
",Externals,0,False,en
861,"Updated version of https://github.com/github/linguist/pull/678
",Internals,3,True,en
860,"Adding .fun extension for Standard ML and a few examples. See https://github.com/github/linguist/pull/440 / cc @MatthewFluet
",Internals,3,True,en
859,"Adding support for Postscript (.ps and .eps) files.
",Internals,0,True,en
858,"Adding Perl 6 support. See https://github.com/github/linguist/pull/750 / cc @hoelzro @FROGGS
",Internals,4,True,en
857,"Adding IDL support. Basically updating https://github.com/github/linguist/pull/425
",Internals,3,True,en
856,"- bootstrap.min.js is already excluded, but bootstrap.js is not.

It seems like this may have been intentional (d5002ef06a9f3463919a3fe8919844c3aea46fc0), though I'm not sure. As it stands, it causes some of my projects (like https://github.com/ChimeraCoder/go-server-bootstrap) to be categorized in correctly).

(Thanks to @coyotebush for pointing this out, and @thedaniel as well: https://news.ycombinator.com/item?id=6955670)
",Externals,33,True,en
854,"See https://github.com/tailrecursion/hoplon-demos/blob/master/todoFRP/src/index.cljs.hl for an example and https://github.com/tailrecursion/hoplon for the full project.
",Externals,0,True,en
851,,Internals,0,False,en
850,"As far as I am aware (health warning, I'm no C++ expert) the following syntax is only ever used in C++:

```
#include <cstdint>
```

Searching .com for this string returns [overwhelmingly C++ results](https://github.com/search?l=c&q=%23include+%3Ccstdint%3E&ref=simplesearch&type=Code) and all of the 'C' results were actually mis-classifications by linguist already.

Those more obscure results would presumably be picked up in language.rb [here](https://github.com/github/linguist/blob/master/lib/linguist/language.rb#L118)?

Could do with a few more :eyes: on this to check I'm not making this stuff up.
",Internals,7,True,en
849,"Adding a few more C++ examples here. In particular ones that have been reported as problematic here: https://github.com/github/linguist/issues/651 .

From what I can tell running specs locally and checking repos that have shown erroneous stats in the past, these latest additions to the training set combined with [this commit](https://github.com/github/linguist/commit/4adbbc3fcc0d2405b706bc1832d4b35114c5843c) by @rhunter means linguist is correctly disambiguating C++ from Objective-C in the vast majority of cases.

Time to cut a new Gem to see if I'm right?
",Internals,27,True,en
848,"I got tired of seeing [this](https://github.com/aseemk/json5/blob/develop/package.json5) without syntax highlighting.

Not adding samples.json changes since rake task reordered the entire file (44859 additions, 44810 deletions, see [samples branch](https://github.com/rlidwka/linguist/compare/samples)), so I thought you don't want to have that in your git history. 
",Externals,12,True,en
847,"I was looking at one of my repos that uses SCons as the build system and was surprised that the SConstruct and SConscript files weren't being recognized as python. I've added the two to the filenames section of the Python rule.
",Externals,0,True,en
844,"Pulling in a few C++ examples from https://github.com/github/linguist/pulls/pull/710 and expanding on Objective C heuristic tests.
",Internals,3,True,en
839,"`Heuristics` shortcut the classification process, allowing us more fine-grained control of language detection beyond the statistical `Classifier`.
",Internals,0,True,en
838,"Had a pull request ready to go for rmd but 1cb1705f8e9b3e51433f044be83702fb19d02900 addressed this. Adding in an example file for completeness.
",Internals,28,True,en
836,,Internals,0,False,en
835,"JSHint tool for linting JavaScript uses `.jshintrc` configuration file. It is
in JSON format.

Example: https://github.com/jquery/jquery/blob/master/.jshintrc
",Externals,0,False,en
834,"Hy is a dialect of Lisp that’s embedded in Python.
- Documentation: http://docs.hylang.org/en/latest/index.html
- Try Hy: https://try-hy.appspot.com/
- Source code: https://github.com/hylang/hy
",Externals,0,False,en
832,"...m.

Because HOW does not yet have a standardized lexer, I left the ""lexer"" field as ""Text only"". 
",Externals,0,True,en
831,"RMarkdown is a markup language that allows combining Markdown with chunks of executable R code. It is increasingly used for literate programming and generating reproducible reports and papers in R.

Additional Details:
http://www.rstudio.com/ide/docs/r_markdown
",Externals,0,True,en
826,"## What is Frege?

[Frege](http://en.wikipedia.org/wiki/Frege_%28programming_language%29) is a non-strict, pure functional programming language in the spirit of Haskell for the JVM.
It enjoys a strong static type system with type inference.
Higher rank types are supported, though type annotations are required for that.

Frege programs are compiled to Java and run in a JVM.
Existing Java Classes and Methods can be used seamlessly from Frege.

The Frege programming language is named after and in honor of Gottlob Frege.
## Project State:

The compiler, an Eclipse plugin and a provisional version of the documentation can be downloaded
from here https://github.com/Frege/frege/releases.

The REPL can be downloaded from here
https://github.com/Frege/frege-repl/releases.

An online REPL is running here
http://try.frege-lang.org/.
## Examples:

1) Command Line Clock: https://github.com/Frege/frege/blob/master/examples/CommandLineClock.fr
2) Brainfuck: https://github.com/Frege/frege/blob/master/examples/Brainfuck.fr
3) Concurrency: https://github.com/Frege/frege/blob/master/examples/Concurrent.fr
4) Sudoku: https://github.com/Frege/frege/blob/master/examples/Sudoku.fr
5) Java Swing examples: https://github.com/Frege/frege/blob/master/examples/SwingExamples.fr
",Externals,9,True,en
824,"This sets .tex to wrap.

/cc @hayfield
",Internals,0,True,en
823,"[`.pod`](http://search.cpan.org/dist/perl/pod/perlpod.pod) is a markup language for perl. [github/markup](https://github.com/github/markup) already has support for it, but linguist just treats it as perl (which I think it technically is). This classifies it as a separate language and sets it to wrap.
",Internals,0,True,en
822,"Based on the SASS samples.

Looks like this depends on Pygments.rb adding support (which in turn relies on the upstream Pygments). Guess I got my work cut out for me ;)
",Externals,0,True,en
820,"Mostly because the file extension conflicts with that of Prolog files.

Continuation of #708, with fixed conflicts and build.
cc @tnm, because you said you were interested :smile: 
",Externals,3,True,en
819,"This also adds a new method called `by_type`. This way, one could call `Language.by_type(:prose)` to get a list of all prose language types.

Note that this intentionally is omitted from any sort of `compute_stats` calculation. The world is not yet ready for these statistics.

/cc @tnm 
",Internals,0,True,en
818,"as extension to https://github.com/github/linguist/pull/790

because of: https://twitter.com/dbu/status/409651620499038208

> dbu @dbu: is there a way in @github diffs to treat the composer.lock file like minified js and binary files (collapsed by default)? its bloating diffs
",Externals,21,True,en
817,"Dogescript: https://github.com/remixz/dogescript

Examples: 
- https://github.com/ngscheurich/doge-adventure
- https://github.com/Goos/dogenerator
- Dogescript compiling implemented in https://github.com/jenius/roots

```
 wow
     no dogescript on github
  much PR
      very syntax
    for great compile-to-JS
```
",Externals,0,True,en
816,"The OpenLMI project provides a scripting environment based on
Python (wrapping the Python interpreter with the 'lmishell'
command). Python scripts intended to be executed via lmishell are
conventionally given the suffix .lmi to identify them. Since the
syntax is identical to that of Python, it would be best to
identify it that way.
",Externals,0,False,en
814,"The nesC entry in the languages.yml file was missing a lexer entry
and thus wasn't getting picked up. This adds the required lexer line.
",Externals,0,False,en
813,"Brightscript is the language used to create [Roku applications.](http://www.roku.com/developer)

Here are some examples of implemented brightscript: 
https://github.com/computmaxer/roku-hdhomerun
https://github.com/plexinc/roku-client-public

The included sample is straight out of the samples included with the Roku SDK.
",Externals,0,True,en
812,,Externals,0,False,en
810,"Bumps to 0.5.4.
",Internals,3,True,en
809,"cc @tnm 
",Internals,0,True,en
807,"escape_utils 1.0.0 is now out, and works perfectly with linguist.
",Internals,3,True,en
806,"This pull request swaps out `YAML.load` for `JSON.load` in samples loading if JSON is available.

JSON is about 10x quicker than YAML:

``` irb
>> Benchmark.measure { YAML.load(File.read(""lib/linguist/samples.json"")) }.to_s
=> ""  0.690000   0.010000   0.700000 (  0.691805)\n""
>> Benchmark.measure { JSON.load(File.read(""lib/linguist/samples.json"")) }.to_s
=> ""  0.050000   0.000000   0.050000 (  0.056488)\n""
```

On Ruby 1.8 where JSON is not in the stdlib, this will fall back to YAML if it can't require JSON.
",Internals,60,True,en
804,"Since [pygments](https://bitbucket.org/birkenfeld/pygments-main) has been providing syntax highlighting for PostScript for [over three years](https://bitbucket.org/birkenfeld/pygments-main/commits/d4d11936bc90), it seems long overdue for GitHub. A [previous attempt](https://github.com/github/linguist/pull/61) failed, I've tried to avoid its mistakes. A few remarks:
- PostScript is a programming language in the sense of being Turing-complete: see [Wikipedia](http://en.wikipedia.org/wiki/PostScript). But since it's more often used as a page description language, `type: markup` seems to fit better.
- ""Encapsulated PS"" is not a language on its own, there are just semantic differences between PS and EPS. I also left out the very rare extensions `.epsf` and `.epsi`.
- PostScript is often generated (by `dvips`, for example). I hope that the code in `lib/linguist/generated.rb` covers all such cases.

[For a discussion, see #362. There I amended a commit which doesn't work with pull requests.]
",Externals,13,False,en
794,"Changed primary extension for Max to .maxpat 
.mxt is a legacy file format.
",Externals,0,False,en
791,"These extensions are in common use in packages part of ROS, the Robot Operating System.

[urdf](http://wiki.ros.org/urdf), [srdf](http://wiki.ros.org/srdf): These are Robot Description Files, XML documents which describe the physical realities of a robotics platform, for the purposes of consumption by common libraries.

[xacro](http://wiki.ros.org/xacro) is for input files to the XML macro processor xacro, which is used in ROS to output URDF and SRDF files.

[launch](http://wiki.ros.org/roslaunch/XML): Documents which describe sets of ROS nodes to launch together.

[rviz](https://github.com/ros-visualization/rviz/blob/hydro-devel/default.rviz): YAML configuration files belonging to the [rviz](http://wiki.ros.org/rviz#Overview) utility.

Each one has been in use for several years in various ROS-related applications; lots of examples should be apparent in orgs like ros, ros-drivers, ros-visualization, pr2, turtlebot, husky, etc.

Thanks for your consideration!
",Externals,1,True,en
790,"[Composer](http://getcomposer.org) uses one configuration file (composer.json)
and one lock file (composer.lock). They both use valid JSON.

Example: https://github.com/OpenBuildings/jam/blob/master/composer.lock
",Externals,0,False,en
783,"Hopefully fixes #881, but I don't know a way to test it.
",Externals,3,True,en
782,":baby_bottle: 

cc @plinehan
",Externals,0,True,de
780,"I recently committed two R scripts to GitHub (https://github.com/standage/tk-rnaseq/commit/ac51150a362cb2c4cdb5c30c2b45883834ee6b31) : one was classified as Perl and the other as JavaScript. One of the R samples uses the same approach as I have (no file extension, `/usr/bin/env Rscript` on the shebang) and yet it's wrong.

I don't have much Ruby experience and was unable to get tests running locally, so I am submitting this pull request to see the test results on Travis.
",Externals,25,True,en
779,"Language website: http://autoitscript.com
Example project on GitHub: https://github.com/jvanegmond/au3-minecraft-monitor
",Externals,1,False,en
775,"I noticed that the documentation comment for `Linguist::Generated#minified_files?` says “more than 5% spaces” while the test in the body of that method really tests for _less_ than 5% spaces.
",Externals,2,True,en
773,"_**Note:_\* This pull request was re-added due to Travis CI not checking the previous one. Sorry about that! *

Added the NetLogo programming language, a dialect of Logo—an adaptation of LISP.
# About

From [Wikipedia:](http://en.wikipedia.org/wiki/Logo_%28programming_language%29)

> Logo is a graphic oriented educational programming language, designed in 1967 by Daniel G. Bobrow, Wally Feurzeig, Seymour Papert and Cynthia Solomon. Today the language is remembered mainly for its use of ""turtle graphics"", in which commands for movement and drawing produced line graphics either on screen or with a small robot called a ""turtle"". The language was originally conceived to enable what Papert called ""body-syntonic reasoning"" where students could understand (and predict and reason about) the turtle's motion by imagining what they would do if they were the turtle. There are substantial differences between the many dialects of Logo, and the situation is confused by the regular appearance of turtle graphics programs that mistakenly call themselves Logo.

Source code for the language can be found @NetLogo .

Also added were 3 sample files:
- Ants.nlogo - An simple simulation of ants looking for food
- Life.nlogo - An implementation of Conway's game of life using patches
- Star Fractal.nlogo - A fractal design programmed in NetLogo

More models are available at git@github.com:NetLogo/models.git .
# In the Wild

Logo & NetLogo are very commonly used teaching languages—perhaps one of the most widely used. I have seen many teachers and students store their NetLogo data on github to share.

Netlogo is also often used to create models. Check out a bunch of them here: http://modelingcommons.org/account/login
",Externals,9,True,en
771,"Second attempt at adding UnrealScript support. Now updated to the current head.

The two sample files are needed, since they're for different UnrealScript generations. I could make one of them shorter, though.

Also, do I need to update samples.json? I can do that, but since it's generated, that would cause conflicts after every merge...
",Externals,0,True,en
770,"PHPUnit (a popular unit testing tool for PHP) uses `phpunit.xml` for its configuration.

However it would use `phpunit.xml.dist` as well if `phpunit.xml` is not available.

The reason is to track `phpunit.xml.dist` in your repo. And to ignore `phpunit.xml`. By default everyone (including a CI) would use `phpunit.xml.dist` except you add `phpunit.xml` locally.

`phpunit.xml.dist` has the same XML structure as `phpunit.xml`. So it should be detected as XML by linguist.

Example: https://github.com/erusev/parsedown/blob/master/phpunit.xml.dist

I don't know why linguist is not detecting this file as XML since it starts with `<?xml`. Perhaps it is another issue.
",Externals,0,True,en
765,"Uppercased Ecl to ECL
Uppercased Ecl samples folder to ECL (this requires two commits on windows).

Fixed issue with test by renaming Ecl samples folder to ECL
",Externals,0,False,en
764,"Thoughtbot's [appraisal](https://github.com/thoughtbot/appraisal) gem is nearing a 1.0.0 release! This super-helpful library allows you to test your Ruby library against different versions of gems by using separate Gemfiles. Appraisal files, like Gemfiles, are run by Ruby.

Here are a few examples of Appraisals being used on github:
- [thinking-sphinx](https://github.com/pat/thinking-sphinx/blob/master/Appraisals)
- [paperclip](https://github.com/thoughtbot/paperclip/blob/master/Appraisals)
- [factory_girl](https://github.com/thoughtbot/factory_girl/blob/master/Appraisals)
- [shoulda-matchers](https://github.com/thoughtbot/shoulda-matchers/blob/master/Appraisals)
- [secretary-rails](https://github.com/SCPR/secretary-rails/blob/master/Appraisals)
",Externals,3,True,en
763,"Describe how to update samples.json after adding new samples.
",Externals,0,True,en
760,"[xBase: https://en.wikipedia.org/wiki/xBase]

Reopened PR 593 with the two language additions split off.
",Externals,3,True,en
759,"[Harbour language: https://github.com/harbour/core]

Reopened PR 593 with the two language additions split off.
",Externals,3,True,en
758,"do I have to regenerate the `samples.json`? I want to but it includes more languages than just CUDA. I guess the tests fail because of that.
",Externals,0,True,en
757,,Externals,0,False,en
755,"If node_modules/ is added to index it should be suppressed in diffs. To avoid 300 generated files and 40k new additions in pull requests.

Reason to add node_modules/ to index: http://www.futurealoof.com/posts/nodemodules-in-git.html

Related issue: #714
",Externals,8,True,en
754,,Externals,0,False,en
751,"This adds Idris into the mix and uses the text-only parser for now, pending
upstream merging this patch in:
https://bitbucket.org/birkenfeld/pygments-main/pull-request/210/idris-lexer-added-lexer-for-idris/diff

Once that gets merged in, the lexer should change to idris.

Some repos that use it:
- https://github.com/idris-lang/Idris-dev - the compiler itself
- https://github.com/david-christiansen/idris-type-providers
- https://github.com/SimonJF/IdrisNet
",Externals,3,False,en
750,"Perl 6 is the next major revision of the Perl programming language.  Although the language and its implementations are still under development, most of those implementations are hosted here on GitHub, along with most of the libraries that currently exist.  For example:
- https://github.com/perl6/nqp
- https://github.com/perl6/doc
- https://github.com/perl6/roast
- https://github.com/rakudo/rakudo
- https://github.com/sorear/niecza
- https://github.com/jnthn/rakudo-debugger
- https://github.com/masak/ufo
- https://github.com/jnthn/zavolaj
- https://github.com/masak/xml-writer
- https://github.com/moritz/svg
- https://github.com/moritz/Math-RungeKutta
- https://github.com/moritz/svg-plot
- https://github.com/moritz/Math-Model
- https://github.com/tadzik/perl6-Term-ANSIColor
- https://github.com/jnthn/test-mock
- https://github.com/perlpilot/Grammar-Profiler-Simple
- https://github.com/jnthn/grammar-debugger
- https://github.com/moritz/json
- https://github.com/cosimo/perl6-digest-md5
- https://github.com/tadzik/panda
- https://github.com/supernovus/perl6-http-status
- https://github.com/supernovus/perl6-http-easy
- https://github.com/tadzik/Template-Mojo
- https://github.com/tadzik/Bailador
- https://github.com/perl6/DBIish
- https://github.com/colomon/uri
- https://github.com/cosimo/perl6-lwp-simple
- https://github.com/bbkr/jsonrpc
- https://github.com/perl6/Pod-To-HTML
- https://github.com/perl6/doc
- https://github.com/moritz/Perl6-MIME-Base64
- https://github.com/supernovus/perl6-psgi
- https://github.com/tadzik/Shell-Command
- https://github.com/tadzik/File-Find

Thanks,
Rob
",Externals,17,False,en
749,"The lexer for Haxe is no longer named haXe, so linguist is currently
unable to find it.  This fixes that.
",Externals,0,False,en
748,"Mercury is a logical/functional language.  It was first developed at The University of Melbourne and is now almost 20 years old.  Projects on github include:

https://github.com/Mercury-Language/mercury
https://github.com/PaulBone/protobuf-mercury
https://github.com/PaulBone/pbone_thesis
https://github.com/wangp/bower
https://github.com/juliensf/mercury-csv
https://github.com/juliensf/mercury-misc
https://github.com/juliensf/mercury-json
https://github.com/petdr/venus

Thanks.

lib/linguist/languages.yml:
    Add the declaration for the language.

samples/Mercury:
    Add samples for the classifier as Mercury shares it's filename extension
    with several other languages.
",Externals,2,True,en
746,"Everything in latest linguist minus prose detection
",Internals,0,True,en
745,"These two Matlab files languages were classified as M instead of Matlab
",Externals,0,True,en
741,"Add some common Verilog extensions that are missing. `.veo` is probably the most commonly used one that's missing, but there are a few others. See http://www.xilinx.com/support/answers/22777.htm for a list.
",Externals,5,True,en
740,"Many common VHDL file extensions aren't listed. `.vhd` is the main one, but there are others. See http://www.xilinx.com/support/answers/22777.htm for a list of VHDL extensions.
",Externals,5,True,en
739,"Add support for bluespec. It looks like this was attempted in #195, and that was fine except that it manually modified `lib/linguist/classifier.yml`.
",Externals,3,True,en
737,"extend the vendor/ exclusion to handle vendors/

Some projects use this folder to store external libaries (eg https://github.com/Elgg/Elgg)
",Externals,0,True,en
733,"Elm is its own language and should be counted as such
",Externals,0,True,en
732,"Bats (https://github.com/sstephenson/bats) test files are Bash with a little extra syntax on top. GitHub's Bash highlighting handles it just fine.

Some example files:
https://github.com/sstephenson/rbenv/blob/master/test/rbenv.bats
https://github.com/sstephenson/ruby-build/blob/master/test/mirror.bats
https://github.com/onehealth-cookbooks/sysctl/blob/master/test/integration/default/bats/attrs.bats
https://github.com/telemachus/quotecat/blob/master/test/runner.bash
",Externals,0,True,en
731,"> RobotFramework is a generic test automation framework for acceptance testing and acceptance test-driven development (ATDD). It has easy-to-use tabular test data syntax and utilizes the keyword-driven testing approach. Its testing capabilities can be extended by test libraries implemented either with Python or Java, and users can create new keywords from existing ones using the same syntax that is used for creating test cases.

Its homepage is http://robotframework.org
It also has a GitHub Org at https://github.com/robotframework

Searching on Github can see many projects has adopted RobotFramework as a part of their testing solutions.
https://github.com/search?l=&p=1&q=extension%3Arobot&ref=advsearch&type=Code

PS. The RobotFramework also supports using .txt as a file extension for test case files, but I don't know how to make the [Bayesian classifier](https://github.com/github/linguist/blob/master/lib/linguist/classifier.rb) work in this case, so I am just adding support for .robot for now.

Thanks.
",Externals,2,True,en
730,"See https://github.com/JuliaLang/julia/issues/4569
",Externals,4,True,en
728,"Objective-C and MUMPS both use the same primary file extension - .m.

This causes problems on gist where entering a filename ending in .m will pick Matlab. On the latest version of Linguist, it'll prefer MUMPS instead of Objective-C.

This pull request ensures that no two languages can share the same primary file extension and changes the `find_by_filename` logic to prefer a language with a matching primary file extension.

It also fixes the Objective-C/MUMPS clash by changing MUMPS' primary file extension to .mumps and adding .m as an alternate file extension. This means that the filename input on Gist will correctly pick Objective-C, while making sure that any MUMPS code on GitHub is still correctly detected as MUMPS.

cc @tnm @vmg
",Internals,0,True,en
721,"[Jelly](http://commons.apache.org/proper/commons-jelly/) is used heavily by stapler/stapler and jenkinsci/jenkins.
",Externals,0,True,en
718,"Added support for Eagle PCB files which are becoming common enough now on Github to make this addition. Taken from wickers PR ""Searching GitHub for ""eagle schematic"" yields 39 repositories and 16,531 code hits. Two high-profile communities with unlabeled Eagle repos are 'adafruit' and 'sparkfun'.""
",Externals,7,True,en
715,"The three core PowerShell language extensions are .psd1, .ps1 and .psm1 -- plus two xml file extensions: .ps1xml and .clixml which are for formatting rules and serialization.
.psm1 modules files use exactly the same syntax as scripts, but are imported rather than executed.
.psd1 are metadata files which use a subset of the same syntax (they can be highlighted using the same highlighter, it's just some commands, variables, and types aren't allowed in data files)

https://en.wikipedia.org/wiki/Windows_PowerShell#File_extensions
http://msdn.microsoft.com/en-us/library/dd878324

But there are pages about each one, if you look carefully:
- ps1xml
  - http://msdn.microsoft.com/en-us/library/dd878306 
  - http://msdn.microsoft.com/en-us/library/hh847881
- psm1 
  - http://msdn.microsoft.com/en-us/library/dd901839
  - http://msdn.microsoft.com/en-us/library/hh847841
- psd1 
  - http://msdn.microsoft.com/en-us/library/dd878297
  - http://msdn.microsoft.com/en-us/library/hh849919
",Externals,51,False,en
713,"jQuery recently passed 1.10, but the vendor regexp assumed each
component of the version number would be only one digit.  Allow
multiple digits for the minor and micro versions.
",Externals,3,False,en
707,"Common Lisp code using the .cl extension is misidentified as OpenCL:
http://github.com/search?q=extension%3A.cl+defun

This request adds .cl as a Common Lisp extension, and also two samples.

Tested with:
http://github.com/franzinc/imap
http://github.com/bempp/bempp (the .cl files in lib/fiber/CL)
http://github.com/skelcl/skelcl (the .cl files in include/SkelCL/detail and examples/mandelbrot)
",Externals,1,False,en
705,"https://en.wikipedia.org/wiki/J_(programming_language)
http://www.jsoftware.com/

This is a trivial change, please let me know if you require a test for this.

J is not too rare a language on GitHub: Searching for ""extension:ijs"" gives 3535 matching files.

Thanks.
",Externals,4,False,en
701,,Externals,0,False,en
697,,Externals,0,False,en
696,"Files named `.Rprofile` are R files like any other, executed automatically on startup. (some [Examples](https://github.com/search?q=extension%3ARprofile&type=Code&ref=advsearch&l=))
",Externals,1,True,en
695,"This adds detection in Linguist for prose documents, but only those supported via github-markdown.

@tnm I didn't really understand your comment for excluding vendored docs within _vendor.yml_. At this point I'm not sure there is anything to exclude beyond the basic README/LICENSE stuff.
",Internals,0,True,en
691,"Just a small addition to detect [Inno Setup](http://www.jrsoftware.org/isinfo.php) installer scripts. I'd :heart: to have syntax highlighting like NSIS scripts got in #423, but since I don't have the ability to do that, this will do for now. :smiley:
",Externals,3,True,en
687,"The first of these commits add a new `interpreters` array to languages.  When determining the language of scripts, the Shebang lines are parsed to find the interpreter used which may be matched against known interpreters to determine the language.  Works in local tests for scripts which are mis-classified by the current version of linguist.

The second commit populates the `interpreters` arrays for a number of languages.

The third commit adds the sed programming languages as the impetus for this change was a sed script misclassified as perl (which is a pretty good guess).

Cheers,
",Externals,0,True,en
682,"With the blue color from: http://wiki.clean.cs.ru.nl/Clean

Besides my own projects I could only find these other uses:
- https://github.com/Meidor/FuncProgrammeren
- https://github.com/Wassasin/clean-streams
",Externals,0,True,en
678,"http://crystal-lang.org/
",Externals,0,True,en
677,"Certain repositories (like https://github.com/graemeg/freepascal) are being shown as being written in Delphi instead of Pascal.

While Delphi is technically a different language to Pascal, I think it's still appropriate to call Delphi code Pascal, even if it may not be appropriate to call non-Delphi Pascal code (like a self-hosting Pascal compiler) Delphi. (does that make sense?)

cc @tnm 
",Internals,0,True,en
676,"Adding .x3d to the list of .xml extensions: [x3d specifications](http://www.web3d.org/x3d/specifications/x3d_specification.html)
",Externals,5,True,en
675,"I added a Lexer for the Pike Programming Language and have a pull request pending in pygments-main.

I have an open issue tmm1/pygments.rb#91 for the pygments update.

I've added this issue here for when it has been merged, and attached a pull request which adds the Pike lexer to linguist.
",Externals,3,True,en
672,"http://www.squirrel-lang.org/ - WWW page of the language

example of repository using this language: https://github.com/Bulwersator/AIAI
",Externals,0,True,en
669,"Some people start writing portable Clojure/Clojurescript code and use
the "".cljx"" file extension for that. This is driven by this project:

https://github.com/lynaghk/cljx
",Externals,0,False,en
668,"The Grammatical Framework (GF) is a programming language for multilingual grammar applications. http://www.grammaticalframework.org/

Examples of GF usage on GitHub:
- https://github.com/GrammaticalFramework/GF
- https://github.com/johnjcamilleri/Maltese-GF-Resource-Grammar
- https://github.com/Attempto/ACE-in-GF
- https://github.com/GF-Estonian/GF-Estonian
",Externals,0,True,en
664,"NQP is a subset of Perl 6 that is being used by implementations of Perl 6.

See:
https://github.com/perl6/nqp
and
https://github.com/rakudo/rakudo/tree/nom/src/Perl6
",Externals,4,True,en
663,,Externals,0,False,en
657,"This file was incorrectly identified as Perl.
",Externals,0,True,en
656,":ghost: 
",Externals,0,True,en
643,"I changed current extjs pattern , because it exclude java net.w3des.extjs namespace in my project:
https://github.com/zulus/extjs-eclipse
",Externals,1,False,en
642,"Volt is a new language actively developed on GitHub, mainly in the @VoltLang Organization.

I added `D` as lexer, since D and Volt are still very similar syntax-wise, as Volt progresses this needs to be updated to its own Volt Lexer. The color is chosen after one of Volts logos.
The example is taken from [@VoltLang/Tesla](https://github.com/VoltLang/Tesla), Volts test-runner.

I would like to add Volts own lexer to the list, unfortunately I couldn't find out how to do it, also no one in your IRC-Channel was able to help me. It seems like GitHub uses a Ruby-Pygments-Wrapper, does this mean, I have to add Volt to Pygments? Any help here would be much appreciated.

Best regards.
@Dav1dde
",Externals,1,True,en
628,,Externals,0,False,en
626,"COPYING is added to excludes as a file that contains copyright information.
",Externals,0,True,en
621,"Linguist is currently misclassifying .xmi files produced by [Umbrello](http://umbrello.kde.org/) (containing an XML representation of a UML model) as Logos files. You can see an example of this in action by looking at the language stats of [genetik](https://github.com/abahgat/genetik).

According to Wikipedia,

> The [XML Metadata Interchange](http://en.wikipedia.org/wiki/XML_Metadata_Interchange) (XMI) is an Object Management Group (OMG) standard for exchanging metadata information via Extensible Markup Language (XML).
> It can be used for any metadata whose metamodel can be expressed in Meta-Object Facility (MOF).
> The most common use of XMI is as an interchange format for UML models, although it can also be used for serialization of models of other languages (metamodels).

This pull request fixes the problem by adding .xmi to the list of extensions for XML.
",Externals,0,True,en
620,"Closes #619
",Externals,3,True,en
614,"Hello,

Add `.mspec` files to the list of files parsed as Ruby.

Have a nice day.
",Externals,0,True,en
612,"[ConTeXt](http://wiki.contextgarden.net/) is a macro language build on TeX (just as LaTeX is build on
TeX). It tends to use `.mkii` and `.mkiv` extensions to represent files used in
Mark II (MkII) version and Mark IV (MkIV) version of ConTeXt.
",Externals,0,False,en
606,"YAML does stand for ""YAML **Ain't Markup** Language""
",Externals,0,True,en
603,"My R scripts, using shebang and no file extension, are being detected as JavaScript.
Hopefully this sample will fix it.

Take 2 on #601 
",Externals,4,False,en
599,"Add support for the OpenGL Shading Language.  Edit: Now also including samples from @julik (but not sampes.json).

Encounters in the wild:
http://github.com/larsbrinkhoff/glsl-sphere-tracing
http://github.com/b01xy/glsl/tree/master/Atelier_Pure-Data_Gem_GLSL
",Externals,2,True,en
598,"Adds CSS detection for linguist when calculating stats.
",Internals,0,True,en
596,"- Add .frm extension as VB file
",Externals,0,True,en
595,".hpp and .tpp extensions are of common use respectively for headers files and separate implementation of template classes/methods.
",Externals,0,True,en
594,"Use shell highlighter for Dockerfiles.

Before:

![image](https://f.cloud.github.com/assets/1050/865751/ca3ee214-f643-11e2-9e5f-671e68995a4c.png)

After:

![image](https://f.cloud.github.com/assets/1050/865747/a6305b14-f643-11e2-92c7-081b1fc78c84.png)
",Externals,64,True,en
592,"...Racket, Ruby or else
",Externals,0,True,en
590,"Add .adp for AOL Server Tcl files.
",Externals,0,True,en
589,"Added config for Kinetic Rule Language (https://github.com/kre/Kinetic-Rules-Engine)
",Externals,0,True,en
588,"In case a Mac user uploads lots of folders with .DS_Stores, and changes their project language as such.
",Externals,0,True,en
584,,Externals,0,False,en
583,"yo
",Internals,0,True,en
582,,Internals,0,False,en
579,,Internals,0,False,en
578,"I'm porting to github my ""auk"" pre-processor language for ""awk"". currently, auk is in auk.googlecode.com

a "".auk"" file gets converted to "".awk"" after pulling out multi-line comments and add in support for structures.

when browsing, a "".auk"" file, it  should be syntax highlighted as a "".awk"" file

hence, i've changed languages.yml accordingly

t
",Externals,0,True,en
575,"VS creates a bunch of files that, while important to version, are often also huge and boring. We should suppress them.
",Externals,0,True,en
574,,Externals,0,False,en
572,"Added REALbasic support
",Externals,0,True,en
568,"For issue: https://github.com/github/linguist/issues/466

Before:
% ruby -Ilib ./bin/linguist ~/work/mp/trunk/cgi-bin/index.fcgi
/home/cono/work/mp/trunk/cgi-bin/index.fcgi: 14 lines (7 sloc)
  type:      Text
  mime type: text/plain
  language:

After:
% rake -Ilib samples
% ruby -Ilib ./bin/linguist ~/work/mp/trunk/cgi-bin/index.fcgi 
/home/cono/work/mp/trunk/cgi-bin/index.fcgi: 14 lines (7 sloc)
  type:      Text
  mime type: text/plain
  language:  Perl
",Externals,9,True,la
567,"Better Python shebang detection.
",Internals,0,True,tl
562,"Sublime Text editor uses some extensions of its own which uses the JSON format.

It's popular to track such configuration files on GitHub so it would be useful to have JSON highlighting for them.
",Externals,0,True,en
561,"Since the _vendor.yml_ file is already excluding all kinds of dependencies, wouldn't it also make sense to also exclude a folder dedicated only for dependencies? I'm not sure how widespread a folder called _""dependencies""_ is, but I'm at least using it in my own projects. There's already a pattern for a _""deps""_ folder, but I don't feel that's verbose enough.

Let me know what you think. Thanks!
",Externals,0,True,en
559,"Berksfile is the equivalent of a Gemfile for Chef cookbooks. It should be treated like any other Ruby file.
",Externals,0,True,en
555,"[Agda](http://wiki.portal.chalmers.se/agda/pmwiki.php?n=Main.HomePage) is a dependently type programming language and proof assistant, which is quite popular in the type theory community and is used [a lot](https://github.com/search?q=extension%3Aagda&type=Code&ref=advsearch&l=) on GitHub, for example in the [HoTT](https://github.com/HoTT/HoTT-Agda) cutting edge math research project

There is another [pull request](https://github.com/github/linguist/pull/252) adding support for Agda but that has been closed because of the lack of a Pygments lexer. Now, I've implemented a lexer which is in the main branch of pygments but hasn't landed in a release yet. I'm creating a new pull request because apparently the old one can't be reopened. Are there any additional steps I have to take because the lexer isn't in a released version of either pygments or pygments.rb?
",Externals,4,True,en
550,"QML itself has distinct extension .qml, but was misidentified as Prolog.
",Externals,0,True,en
549,"Hey all,

LFE has been in existence since 2008, created by one of the co-creators of the Erlang language. LFE is managed on github and there are numerous projects spanning the period of time between 2008 and now that use LFE as their primary and/or secondary language. Recently, the language has been getting more attention, including a set of documentation pages for the language hosted on github.

Here are some additional links:
- http://lfe.github.io/
- http://rosettacode.org/wiki/LFE

As new LFE projects are created or identified, we are putting them here:
- https://github.com/lfe

Thanks so much!
",Externals,8,True,en
548,"the current color makes erlang programmers sad and depressed. this new one is slightly more joyous
",Externals,0,True,en
543,"[Esri](https://github.com/esri) introduced [Python Toolboxes in ArcGIS 10.1](http://resources.arcgis.com/en/help/main/10.1/index.html#//001500000022000000). They are simply Python source code with a different extension. [A user requested syntax highlighting of `.pyt` files on GitHub](http://ideas.arcgis.com/ideaView?id=087E00000004m2eIAA). Should be a trivial merge. Thanks.
",Externals,36,True,en
541,"Files with the `.tmTheme` extension similar to `.tmCommand`, `.tmLanguage`, `.tmPreferences` and `.tmSnippet` are configuration XML files for TextMate or SublimeText.

The `.tmTheme` extension was missing from this list.
",Externals,0,True,en
536,"Added .podsl extension for Common Lisp language
",Externals,0,True,en
531,"Projects using the [PhoneGap](https://github.com/phonegap) framework for creating cross-platform mobile applications contain one or more copies of a `cordova.js` file, which serves as a bridge between the project's code (written in JavaScript) and the device. Each platform has a slightly different version of this large library, so a mobile application can contain 5 or more copies of the file, even though it's really a library (and not part of the application's code).

PhoneGap is widely used, and there are many projects on GitHub using it. For example, the [phonegap-start](https://github.com/phonegap/phonegap-start) project has over 3,000 forks.

This pull request treats files with names like ""cordova.js"", ""cordova-1.2.0.js"", ""cordova.min.js"", etc. as libraries and does not count them as part of a project's codebase.
",Externals,8,True,en
530,"Assuming that if a file has a `\r`, its automatically a ""mac format"" is a bad assumption.

This leads to strange truncation issue like https://github.com/emacs-ess/ESS/blob/master/lisp/ess-julia.el.

Lets always split on known line breaks.

Also axed the `#mac_format?` all together. Sorta an effort to kill all the helpers under `BlobHelper`.

/cc @tnm 
",Internals,0,True,en
529,"Added samples for Nu, Racket, and Scala, because previously they had only hello world.

Added a debug mode so we can see which token(s) are at fault when linguist's Bayes filter guesses wrong.
",Internals,0,True,en
528,"Added some Erlang, escript, and shell examples.
",Internals,0,True,en
520,"Some projects written in Standard ML use the .fun extension.  For example:
- [RedBlackTree.fun](https://github.com/clf/celf/blob/master/RedBlackTree.fun)
- [main.fun](https://github.com/MLton/mlton/blob/master/mlton/main/main.fun)

Also, the Pygments Standard ML lexer recognizes the .fun extension; see:
- [functional.py](https://bitbucket.org/birkenfeld/pygments-main/src/0710694cba81a1544e6f789953ef164c7cfc4251/pygments/lexers/functional.py?at=default#cl-1082)

In contrast to pull request #440, this pull request only modifies `lib/linguist/languages.yml` and does not modify `samples/Standard ML/` (which makes the volatile `lib/linguist/samples.json` out of date).
",Externals,35,False,en
519,"COBOL projects on github are getting incorrectly classified based on other files like XML.
",Externals,0,True,en
515,,Externals,0,False,en
512,"The .rbxs file extension is used for ROBLOX script files. ROBLOX is a game engine that uses the Lua language for game scripts. Adding the .rbxs extension as an alternative to .lua would allow Lua code meant for ROBLOX to be highlighted properly on GitHub.
",Externals,0,True,en
510,"Adding [wisp](https://github.com/gozala/wisp) language support.
",Externals,0,True,en
508,,Externals,0,False,en
504,"This pull request adds the filename `riemann.config` as a filename for Clojure, because [Riemann](http://riemann.io/index.html) configuration files are Clojure code.
",Externals,0,True,en
503,,Externals,0,False,en
500,"Attempt 2: lexer now exists in Pygments
",Externals,1,True,en
499,"nesC is an embedded systems language. It it is a stable product (~10
years old) primarily used for TinyOS, an embedded operating system.
Development has recently moved to github (https://github.com/tinyos/nesc).

Pygments has now pulled the nesC lexer as of 2013/5/6:
  https://bitbucket.org/birkenfeld/pygments-main/pull-request/166/

Please let me know if I need to do anything else / add more information.
",Externals,11,False,en
495,"If you analyze a project sometimes the statistic outputs a language with 0%. At first it seems that the language is not part of this project, but there are only some decimal places
missing.

This pull request adds two decimal places to the statistic output `linguist /folder/` or `bundle exec linguist /folder/`

**Original output (of a personal project)**

```
50%  Python
45%  Ruby
5%   PHP
```

**Output with PR (of a personal project)**

```
50.31%  Python
45.13%  Ruby
4.56%   PHP
```

**Original output (of [TYPO3 master](https://git.typo3.org/TYPO3v4/Core.git))**

```
84%  PHP
10%  JavaScript
6%   ActionScript
0%   XSLT
0%   Perl
0%   TypeScript
0%   Racket
0%   Shell
```

**Output with PR (of [TYPO3 master](https://git.typo3.org/TYPO3v4/Core.git))**

```
83.92%  PHP
9.96%   JavaScript
5.88%   ActionScript
0.13%   XSLT
0.04%   Perl
0.03%   TypeScript
0.02%   Racket
0.02%   Shell
```
",Externals,60,False,en
494,,Externals,0,False,en
493,"Closes #491
",Externals,3,True,en
484,"http://upc.gwu.edu/
",Externals,0,True,de
483,"Added section to languages.yml for scriptcs detection.

(http://scriptcs.net/)
",Externals,0,True,en
479,"This silences this warning:

```
The source :rubygems is deprecated because HTTP requests are insecure.
Please change your source to 'https://rubygems.org' if possible, or 'http://rubygems.org' if not.
```
",Externals,0,True,en
477,"rt.
",Externals,0,True,en
475,"Glyph, the Tcl-based scripting language in the Pointwise mesh generation software for computational fluid dynamics (CFD), offers the ability to automate all or part of the CFD meshing process.
",Externals,0,True,en
471,"Detects Python, C++ and Java code generated by the Protocol Buffer compiler (https://developers.google.com/protocol-buffers/).

The sample generated files were generated from the input:

```
package persons;

message Person {
  required string name = 1;
}
```

Let me know if that should be checked in too (though #392 is still open about detecting .proto files, and has its own sample)
",Externals,4,True,en
461,"Add the `csv?` test to `BlobHelper` defined as a text file with a `.csv` extension and a simple test for it.
",Externals,0,True,en
460,"trying a new pull request after updating to latest master. Hopefully that solves the odd test failures, who knows...
",Externals,0,True,en
455,"Common format for android development, especially for Xamarin
",Internals,0,True,en
451,"For great awesomeness.
",Internals,0,True,en
450,"Added:
- DM (Dream Maker) language.
- Sample DM file.

The DM language is used in an engine known as BYOND which allows users to easily create their own games in a language that is designed to be accessible for newcomers. I do not know how much a language has to be used on the site to be considered but searching for ""BYOND"" does show a lot of people using the language. I am also still learning git so if I have missed something then please let me know.
",Externals,0,False,en
448,"Update samples file.
",Internals,0,True,fr
446,,Internals,0,False,en
443,"Fixes #236
",Externals,3,True,en
441,"XProc and XSLT are two distinct programming languages, they should both appear individually in the programming language stats.
This PR removes them from a common ""XML"" group to fix this.
",Externals,0,False,en
438,"Update the sample db, fix a 2000 line diff in the test output
",Externals,4,True,en
436,"We should ignore stuff in `test/fixtures` — https://github.com/brianmario/charlock_holmes is a good example (`racket` comes up at 21 percent)
",Internals,2,True,en
425,"I'm redoing pull-request to IDL to the list of languages without the changes to the `samples.json`.
",Externals,0,True,en
423,"http://nsis.sourceforge.net/
",Externals,0,True,en
422,"This attempts to turn on the pygments lexer for Rust.

Pygments added support for Rust in 0.6, so assuming that GitHub has deployed 0.6, this should start highlighting Rust code. Unfortunately, Rust has changed a lot since so the results will probably not be great. Pygments was most recently updated for Rust [in January](https://bitbucket.org/birkenfeld/pygments-main/commits/5127d7fd8d30308b83a8e7481965c1b906a6f157), with a grammar that is much closer to final. I am hopeful that, even without the updated lexer, the results will at least be better than not having highlighting.

This also adds a big Rust sample, taken from the core library, MIT/ASL2 licensed.

Per the suggestions in the README file I have not tested this, and am simply hoping the bots enjoy it.
",Externals,34,True,en
421,"I have added the ABAP language and included a sample file.
",Externals,0,True,en
419,,Externals,0,False,en
416,,Externals,0,False,en
413,"This space left intentionally blank.
",Internals,0,True,en
410,"Also ensures capitalized extension names will still work and fixes typo in comment :metal:

/cc @sshirokov @tnm 
",Internals,0,True,en
408,"As of 1.5.0, CoffeeScript supports code to be written in ""literate"" mode (as a Markdown document).
http://coffeescript.org/#literate

Just trying to add Literate CoffeeScript to the language list, in the same way Literate Haskell does.
",Externals,3,False,en
405,"Bump to latest pygments and add support for TOML.
",Internals,0,True,en
404,"New lexers, updates in pygments.rb
",Internals,0,True,en
402,"Added support for TypeScript language (http://www.typescriptlang.org/).

This is a new clean PR overriding the previous one.
",Externals,0,True,en
401,"Related to #285
",Externals,3,True,en
400,"Add:
- TXL language
- Sample TXL file

This is PR is related to #260.
",Externals,3,False,en
399,"Reattempting #370, after working out that you need to add filenames to languages.yml, prior to adding files inside samples/filenames/ and only after you regenerate the samples.json can you remove the references in languages.yml.

See http://editorconfig.org
",Externals,3,True,en
397,"Redone #283 without touching the samples. :)
",Internals,3,True,en
396,"All of these code samples currently are mis-identified in my repositories. I'm
donating them to the cause.
",Externals,0,False,en
395,"Just file extension (*.pogo) detection plus a sample file.

No changes to `samples.json` this time.

Thanks!
",Externals,0,True,en
392,,Externals,0,False,en
391,"We need more Forth samples to train the Bayesian classifier (cf #387).
",Externals,3,True,en
390,"ASDF is a build system for common lisp. The .asd extension is just convention, as far as I can tell. The file is plain CL.

http://www.cliki.net/asdf

Some examples:
- https://github.com/edicl/hunchentoot/blob/master/hunchentoot.asd
- https://github.com/cmoore/inez/blob/master/inez.asd
",Externals,0,True,en
388,"Language is new in pygments 1.6.

I checked, it also already is in [pygments.rb/lexers/compiled.py](https://github.com/tmm1/pygments.rb/blob/master/vendor/pygments-main/pygments/lexers/compiled.py#L3061)

After doing `rake samples` and `rake test`, the diff for _samples.json_ was huge, i did not dare include it in this PR. If somebody tells me that it's ok, I will add it :)
",Externals,7,True,en
386,,Externals,0,False,en
385,"XSLT should be identified as a programming language, rather than just a generic markup syntax.
",Externals,0,True,en
384,"This extension is also often used.
",Externals,0,True,en
383,,Externals,0,False,en
380,"Tapestry template files are well-formed XML documents.

http://tapestry.apache.org/component-templates.html
",Internals,0,True,en
377,"This adds detection for the XC programming language (http://en.wikipedia.org/wiki/XC_Programming_Language), a C like language for developing embedded applications on XMOS devices.

There are various examples of projects using XC to be found at https://github.com/xcore
",Externals,0,True,en
376,"My projects use .opencl as the file extension for OpenCL files. It would be great if they were properly detected.
",Externals,0,True,en
373,"[Iced Coffeescript](http://maxtaco.github.com/coffee-script/) is a relatively popular extension of Coffeescript. The only difference is the addition of two new keywords, so syntax highlighting should work pretty much 99% out of the box.
",Externals,2,True,en
372,"Adds `.tmux` and `.bash` as valid extensions for shell
",Internals,0,True,en
368,"Most Verilog files use the *.vh extension for header files.

Since the IEEE 1800-2009 SystemVerilog standard, it is common for
hardware and verification files written using the newer language
constructs to use the *.sv extension for design elements, and *.svh for
headers.
",Externals,8,True,en
367,"All of these code samples currently are mis-identified in my repositories. I'm
donating them to the cause.
",Externals,0,False,en
364,"- Adds [Ragel](http://www.complang.org/ragel/) with Ruby Host to languages.yml
- Adds some Ragel Ruby samples to distinguish it from Ragel using other host languages
",Externals,0,False,en
363,"Add DOT language: http://www.graphviz.org/content/dot-language
",Externals,0,True,sq
361,"Kinda frustrating to have to do two separate searches for this gem.
",Externals,0,True,en
360,"This helper allows you to check if a blob is a 3D model file. Currently just working with the most common, STLs and OBJs.

I'd be open to different method names, but @ymendel suggested solid? and it seems to fit.

/cc @sshirokov
",Internals,1,True,en
359,"Add [fish](https://github.com/fish-shell/fish-shell) support.

Using `lexer: Text only`, as Pygments currently does not have a dedicated fish lexer.
Have tried `lexer: Bash` but the result was not acceptable.
",Externals,0,True,en
358,"According to issue #224 : I added extensions for Max/MSP ; (with sample files only it does not match the proper language). 
",Externals,3,True,en
357,"2nd try. Add dita file extention to the XML markup.
DITA is the OASIS Darwin Information Typing Architecture used for technical documentation.
@see https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=dita
",Externals,1,False,en
354,"Check whether a blob is C/C++ code generated from Cython `.pyx` files
",Externals,0,True,en
349,"Qt Designer uses .ui files to store ui in xml. This commit should highlight all *.ui files to XML - it's very important.
",Externals,0,True,en
346,"This removes the superfluous extensions when we already have the `primary_extension`.
",Internals,0,True,en
344,"Cheating slightly as it uses the CSS lexer, as pygments currently does
not have a dedicated less lexer. But I figure language recognition and
90% percent correct syntax highlighting is better than neither.

---

If the lexer is deemed to be ill-fitting then even using the ""Text Only"" lexer would be worthwhile, just so the primary language of Github's most popular repo (i.e [twitter/bootstrap](https://github.com/twitter/bootstrap)) can be recognized as such.
",Externals,2,False,en
342,"Please add Xtend to languages.yml.
",Externals,0,True,en
335,".dfm is Delphi formulars
.dpr is the main source file, before any .pas.

if your Delphi app does not use any formulars or units
(e.g. console app), there is basically only one .dpr file.
",Externals,0,False,en
331,"This bumps us to the latest pygments.rb with updated lexers, and it also switches to the pessimistic version constraint for greater stability.

cc @josh
",Internals,0,True,en
325,"Racket files had been using the Scheme lexer.
",Externals,0,True,en
324,"Lexer for this is finally there.
",Externals,0,True,en
321,"This Prolog file was misclassified as Perl.  I assume linguist
was confused because the file has many comments.  Nevertheless,
there are plenty of Prolog-distinguishing tokens such as `:-`,
`module`, `%%`, capitalized variables names, `foo/2`, etc.
",Externals,1,False,en
318,"Datomic data uses edn (https://github.com/edn-format/edn) which is a subset of Clojure data. Using Clojure syntax coloring should work great.
",Externals,0,True,en
312,"```
Added to vendor.yml the following dependencies related to automake and autoconf:
- (^|/)configure
- (^|/)configure.ac
- (^|/)config.guess
- (^|/)config.sub

Before changing:
```

```
    [herbert@vps11071 linguist]$ bundle exec linguist ../atmi++/
    75%  Shell
    15%  C++
    10%  C
    0%   Perl
```

```
After changing:
```

```
    54%  C++
    37%  C
    9%   Shell
    0%   Perl
```
",Externals,18,False,en
308," Hello,

Ok uppercase C is rather an old fashioned C++ extension. But yet it's there, all my code is using that extension ??!!

So if it could be merged, I would be an even happier GitHub user :-)
",Externals,0,True,en
307,"- ""yml"" ☞ YAML
- ""rss/xsd/xsl/wsdl"" ☞ XML
- ""latex"" ☞ TeX
- ""obj-j"" ☞ Objective-J
- ""obj-c/objc"" ☞ Objective-C
- ""make"" ☞ Makefile
- ""erb"" ☞ RHTML
- ""xhtml"" ☞ HTML

Also added ""HTTP"" language (useful for `curl -i` dumps).
",Internals,0,False,la
305,"PHP cli scripts without a file extensions are interpreted as Perl instead of PHP (reported in issue #304).
Added samples of php cli scripts (with hashbang) and updated tests.

Fixes #304.

/cc @josh
",Externals,6,False,en
301,"Fix #106.
",Externals,3,True,en
298,"Adds elm.  http://elm-lang.org
",Externals,0,True,hu
295,"Downcase the extname, so the methods such as image? can determine properbly
",Externals,0,True,en
294,"Logos is a language implemented on top of Objective-C and sees widespread use in the iPhone jailbreaking community.
Its main purpose is to make the creation of Objective-C-method-implementation-replacing ""tweaks"" easier.

Pygments support awaits the merging of a pull request (https://bitbucket.org/birkenfeld/pygments-main/pull-request/130/add-a-lexer-for-the-logos-language). The Travis build will likely fail until the aforementioned pull request is merged.

The included example is the example from the Pygments repository. A better example is at https://github.com/rpetrich/DietBar/blob/master/Tweak.x.
",Externals,3,False,en
293,"A shebang like this currently throws an exception all the way up.

```
#!/usr/bin/env 
```

Fixed.
",Externals,0,True,en
288,,Externals,0,False,en
278,"CLIPS or C language integrated production system is a tool for writing expert
systems.

I did not add a syntax highlighter nor test files because my objective was to make sure that github tags my projects as CLIPS because right now they're blank. 
",Externals,0,False,en
261,,Externals,0,False,en
259,"SyntaxHighlighter should be recognized as a vendor library. 
Also enhance detection of the django template and treat _admin_media_ directory and files as vendor.
",Externals,0,False,en
255,"Various Python development communities (https://github.com/plone, https://github.com/collective, others) and developers on github using Zope page templates (.pt) and Zope Configuration Markup Language (.zcml) would greatly benefit from syntax highlighting of files with these extensions as XML.  languages.yml is updated and tests pass without regressions.
",Externals,0,True,en
253,"Based on #238, I changed the mime-type based binary skip to include extensions from `languages.yml`, because it's more domain specific than mime types.
",Externals,3,True,en
251,"The primary extension .sc is usually used for class/library files.

The extension .scd is usually used for files where code is evaluated directly from the editor. (live coding)
",Externals,0,True,en
250,"Fixes this basic situation:

https://github.com/abdul/php-proxy/blob/master/src/proxy.php

That's a :sparkles:**Mac Format**:sparkles: file that's being truncated because we're splitting on ""\n"" only:

```
$ git cat-file -p a61f37c8e4f043666afdade4e938a9ab8e84f031 | hexdump -C
00000000  3c 3f 70 68 70 0d 2f 2a  0d 20 2a 20 50 48 50 20  |<?php./*. * PHP |
00000010  50 72 6f 78 79 0d 20 2a  20 52 65 73 70 6f 6e 64  |Proxy. * Respond|
00000020  73 20 74 6f 20 62 6f 74  68 20 48 54 54 50 20 47  |s to both HTTP G|
...
```

The detection is simple and shouldn't be too expensive. If the file is detected to be :sparkles:**Mac Format**:sparkles: then we split on ""\r"" instead of ""\n"".
",Externals,129,True,en
247,"Otherwise, charlock_holmes will allocate another large binary
buffer for testing the encoding, which is a problem if the binary
blob is many hundreds of MB large. It'll just fail and crash ruby.

@watsonian and I were investigating a GitHub enterprise customer that was affected by this today.
",Externals,0,False,en
246,"Adds MoonScript to the list of languages.

I didn't add a code sample because I can't run the script to regenerate the database because ruby pygments does not run on my system due to old version of rubypython: https://github.com/tmm1/pygments.rb/issues/10
",Externals,3,True,en
245,"Add the sbt script of [sbt-extras](https://github.com/paulp/sbt-extras), which was being incorrectly interpreted as Perl, as a Shell sample.
",Externals,0,True,en
239,"[Ocsigen](http://ocsigen.org/) is a web server and framework using OCaml.

It uses a syntax extension to manage the client-side, server-side or shared code. It also has its own compiler which requires a different file extension `.eliom`.

**OCaml syntax** seems fine to correctly display the Ocsigen code.
",Externals,0,True,en
232,".pd_lua is the required extension for any Lua files written to directly communicate with Puredata, via the pdlua library.
",Externals,0,True,en
231,"Extensions & colors & sample files added.
",Externals,0,True,en
228,"From #225

Build is failing, some regression. Need to tweak the tokernizer or parser.
",Internals,3,True,en
222,"Debian packaging stuff should not count to the main source and debian/cron.d files are no D source.
",Externals,0,True,en
221,"Add .ccxml, .grxml, .scxml, .vxml (from W3C specs) into the XML syntax group
",Externals,1,True,en
218,"As per @josh 's request in #217, this is a sample bash script that is currently being classified as Perl, hopefully this will help the filter.
",Externals,3,True,en
215,"jQuery UI is used in quite some projects and should be recognized as a vendor library too. Also enhance detection of the jQuery validation plugin that is Microsoft adds to ASP.NET MVC projects by default. 
",Externals,0,True,en
211,"Finally I found out why AppleScript is not recognized - it was not marked as a programming language.

While .applescript is plaint text and to be considered as a programming language, .scpt is not - it's binary, the compiled version of the applescript.
However, there is still a sample file with extension scpt in the directory and I don't want to bother anyone, so I left it there.
To be precise, it should be removed, because it contains plaint text.

I considered adding a new type: ""Applescript compiled"" or something like that with type: data, but since there is no lexer available and bin/linguist complained about that, I left it.
",Externals,0,True,en
208,"This is extensions for Max/MSP 5.1.9 files.
",Externals,3,True,en
204,""".ant"" and "".ivy"" files are both XML
I've attached samples files
",Externals,0,False,en
202,"New Verilog examples and Coq examples for additional training have
been added since linguist is currently failing Coq/Verilog recognition
tasks (see #201). In case it wasn't obvious, linguist will not
currently pass these new, added test cases.
",Externals,3,False,en
200,"This pull request adds support for `.rabl` files (as Ruby) for the popular [RABL](https://github.com/nesquena/rabl) templating engine.
",Externals,0,True,en
196,"show -> should
",Externals,0,True,en
194,"Using the new ECL Lexer from Pygments 1.5 and
providing the same source file as a test.
",Externals,2,False,en
187,"Added Ceylon to the master language list.
",Externals,0,True,en
180,"Context: https://github.com/michaelficarra/CoffeeScriptRedux/commit/377adb2a3f24b6315e6266b9555c69336e117dc4#commitcomment-1472750
",Externals,35,True,en
172,"Initial work on bayesian classifier.

This includes the custom tokenizer for input into the classifier.

/cc @TwP 
",Internals,0,True,en
171,"I noticed that my REALbasic projects are often incorrectly set as being in the Ruby language, hopefully these changes to the linguist/languages.yml will correct this problem.
",Externals,0,True,en
170,"Pike is an object-oriented, interpreted programming language with a syntax similar to Java and C, high-level data types, automatic memory management, highly efficient string handling, easy to use APIs for network and database programming, and 18 years of active development behind it.

http://pike.ida.liu.se/
",Externals,2,True,en
169,"Albino is no longer being used.

mime-types was 404ing.
",Externals,3,True,en
164,"I've tried to follow recent pull requests for this, but also adding accompanying unit tests. When trying to run the tests, I get the following error. Perhaps someone can point me in the right direction.

```
/home/mmior/apps/linguist/lib/linguist/language.rb:231:in `initialize': Awk is missing lexer (ArgumentError)
```
",Externals,3,True,en
163,"[waf](http://code.google.com/p/waf/)'s wscript files are simply python files. It would be nice to have them correctly syntax highlighted on github.
",Externals,0,True,en
162,"Support for Objective-C detection fully intact; all tests pass. Detection of Objective-C keywords @implementation, @property, @interface, and @synthesize removed to avoid possible conflicts with user-created Matlab function handles. Only @end is detected, which is not valid in Matlab. Matlab class files (classdef) now detected in addition to function files. Comments preceded by whitespace detected for Objective-C and Matlab.

I know Matlab intimately and I'm willing to do a bit of work to finally get Matlab and Objective-C .m files to be reliably distinguished from one another (there are Matlab repositories on GitHub that are misclassified, including one of mine: github.com/horchler/QTWriter). Let me know how I can help.

Signed-off-by: Andrew D. Horchler adh9@case.edu
",Externals,1,True,en
161,"Added .pm6 to Perl extensions. 

Conventionally, some Perl6 modules use pm6 as extension to differentiate from the currently common Perl 5 modules. Here are some examples: 
-   https://github.com/uasi/messagepack-pm6/blob/master/lib/MessagePack.pm6
-   https://github.com/supernovus/perl6-mime-types/blob/master/lib/MIME/Types.pm6

So I believe adding .pm6 to perl syntax blob sets makes sense.
",Externals,9,True,en
160,"Added Fakefile to Fancy's filenames list
",Externals,0,True,en
157,"This adds support for the Arch Linux [PKGBUILD format](https://www.archlinux.org/pacman/PKGBUILD.5.html).
",Externals,1,True,en
156,"Add detection for Dart (dartlang.org). Pygments 1.5+ has the lexer in place already. 
",Externals,2,True,en
155,"Use the newly created pygments lexers for augeas & puppet
",Externals,0,True,en
152,"Julia is a newly developed technical computing language, with source at JuliaLang/julia. This is basic filetype support.
",Externals,0,True,en
151,"Streamline.js by Bruno Jouhier (@Sage) is a library/tool that lets you write
synchronous-looking JavaScript/CoffeeScript, and have it compile to Node-style
asynchronous JavasScript/CoffeeScript. (It's amazing and super elegant.)

https://github.com/Sage/streamlinejs

From the start, Streamline was designed to be exactly JavaScript/CoffeeScript,
so that it works with existing editors and tools. No new keywords or syntax --
it simply reserves `_` as a function parameter name.

Streamline files have thus kept `.js` and `.coffee` as extensions, so that no
changes need to be made to tools; Streamline has just used the convention of
ending file basenames with `_`, like `foo_.js` or `foo_.coffee`.

Unfortunately, to get the most optimal Node.js integration, with on-the-fly
compilation (like CoffeeScript), files now need to have their own extension.
So Bruno has decided to make `._js` and `._coffee` the extensions of choice.

The good news is that the language is still exactly JavaScript/CoffeeScript;
it's only the extension that's changed. It's simple to add these extensions
into our editors, but I'm wondering if we can add this to GitHub too. =)

This change is super simple and shouldn't affect any other language, so I hope
you guys are open to it. Thanks for your consideration!
",Externals,0,False,en
150,"This add detection for the M programming language (see https://en.wikipedia.org/wiki/MUMPS or the ISO/IEC standard of the language http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=29268).

I have successfully tested this using `bundle exec rake test`.

I have also called `bundle exec linguist` on all the projects hosted on GitHub which I know have M files (not .m files) in them, and they would now all be correctly categorized as M instead of Objective-C or Matlab :

```
90%  M
6%   C
3%   Objective-C
1%   Matlab
0%   Shell
0%   Assembly
0%   Python
```

I have also called `bundle exec linguist` on all the popular Objective-C projects found on GitHub (https://github.com/languages/Objective-C) with the following result :

```
62%  Objective-C
11%  C
10%  JavaScript
9%   Java
5%   Python
3%   C++
0%   PHP
0%   Shell
0%   C#
0%   Ruby
0%   Perl
0%   Lua
```

This patch clearly doesn't impact Objective-C detection based on defaulting to Objective-C for .m files.

This patch won't affect Matlab because Matlab's regex comes before the ones this patch is adding.
",Externals,28,True,en
149,"## What is this?

Many repositories for large libraries store their samples along with the library (the motivating example being https://github.com/signalr/signalr). These libraries often get incorrectly marked as other languages, especially JavaScript if they are web libraries.
## How can we fix it on the cheap?

This PR establishes a new convention, that the `Samples` folder will not be considered part of the repo's codebase. We considered recognizing files by hash (i.e. building a list of SHA1s => JS libs), but AutoCRLF throws some salt in that game.

Thoughts? Comments? Concerns? :shipit:?
",Externals,1,True,en
147,"Hi gh,

Like JavaScript, the 'S' should be capitalized.
",Externals,0,True,en
146,"This commit adds support for syntax highlighting (PHP) of Phakefiles.

Phake is PHP's version of Rake. See: https://github.com/jaz303/phake
",Externals,3,True,en
144,"Hi,

I have included ExtJS in a project I'm working on, but it doesn't appear to be excluded in the stat graph. I added a line at the bottom here which should match most installs of ExtJS, from my own personal, to the various forms you can get off their website.

Hope you'll consider it.

Graham
",Externals,0,True,en
143,"There are some languages showing up under [OpenEdge ABL](https://github.com/languages/OpenEdge%20ABL) in the language list that are not actually that language.  Apparently Visual Basic and some language called Apex also use the .cls file extension.  I've therefore improved the disambiguation detection for .cls files, adding Apex to the language list.

Apex doesn't have a lexer in Pygments, so I left it as Text-only.  It is similar to Java, but was generating a lot of Pygments parse errors on single-quoted strings, so I didn't use the Java lexer.
",Externals,2,True,en
142,"Depends on https://github.com/tmm1/pygments.rb/pull/15

This pull-request is a duplicate of #129 which was closed accidentally by @josh because tmm1/pygments.rb#15 hasn't been completed yet. 
",Externals,9,True,en
141,"I've seen this used especially with newLISP, but I think giving it Common Lisp highlighting as a default makes a lot of sense.

I don't see any tests related to existing Lisp-highlighting functionality, so I haven't added any myself.
",Externals,0,True,en
140,"The dependent lexer is now available the recent pull request https://github.com/tmm1/pygments.rb/pull/15 

Many thanks in advance!
",Externals,3,True,en
138,"Puppet modules should contain a Modulefile, and so it should be a Puppet file.
",Externals,0,True,en
135,,Externals,0,False,en
132,,Externals,0,False,en
131,"Elixir is a programming language built on top of the Erlang VM. As Erlang, it is a functional language built to support distributed, fault-tolerant, non-stop applications with hot code swapping.

Learn more at: http://elixir-lang.org/

The lexer is already on pygments:
https://bitbucket.org/birkenfeld/pygments-main/pull-request/57/add-elixir-and-elixir-console-lexers

/cc @josevalim
",Externals,2,True,en
129,"Uses the Java Server Page lexer (closest match) until a Tea lexer is added to Pygments.
https://bitbucket.org/birkenfeld/pygments-main/pull-request/56
",Externals,2,False,en
128,"Pygments now offers a Bro lexer [1] and officially supports the Bro IDS
scripting language. Time to integrate it in linguist!

[1] https://bitbucket.org/birkenfeld/pygments-main/pull-request/5/add-lexer-for-the-bro-language
[2] http://www.bro-ids.org
",Externals,4,False,en
126,"Cweb is Don Knuth's literate programming system for C programming.

Caveats: I have NOT tested, and do NOT know Ruby.  In other words, I'm guessing this is the fix.
",Externals,0,True,en
125,"Tests won't pass 'til pygments.rb gets updated.
",Externals,0,True,en
124,"C2hs program assists in the development of Haskell bindings to C libraries. It extracts interface information from C header files and generates Haskell code with foreign imports and marshaling. This ensures that C functions are imported with the correct Haskell types.

The .chs files are Haskell files that include normal Haskell code with C-like preprocessor directives and binding hooks that defines how to generate final binding code.

I added the chs file extension in the linguist module.
",Externals,1,True,en
122,"As the title says, I have added linguist detection for Windows powershell files (.ps1 and psm1). For now I am using a 'Text only' lexer.
I have updated the tests, but please let me know if you would like me to make other changes for this pull request.
",Externals,2,False,en
118,"Lazarus Project files (similar to Delphi's).
",Externals,0,True,en
117,"Adds detection of TinyMCE's langs, plugins, themes, and utils directories if contained inside the default tiny_mce folder.
",Externals,0,True,en
115,"The tests won't pass until pygments.rb gets updated to a new version of Pygments ([already pull requested](https://github.com/tmm1/pygments.rb/pull/12)).  They pass using a custom pygments.rb gem built from that branch.
",Externals,3,True,en
114,"Added detection for http://moonscript.org

An associated lexer was recently added to pygments-main as well: https://bitbucket.org/birkenfeld/pygments-main/changeset/e483f89414dc
",Externals,8,True,en
113,"Added NetLogo support (http://en.wikipedia.org/wiki/NetLogo)
",Externals,0,True,en
112,"The title says all. Please let me know if anything is missing or not.

Thanks
",Externals,0,True,en
111,"As requested by Petros Amiridis:

> Hi Rob,
> You can try creating a pull request. We'll examine it and if it is not a problem we'll accept it.
> Thanks

I branched and ran the tests:

$ pwd
/path/to/linguist

$ bundle install

``` ruby
Using rake (0.9.2.2) 
Using blankslate (2.1.2.4) 
Using charlock_holmes (0.6.8) 
Using escape_utils (0.2.4) 
Using ffi (1.0.11) 
Using mime-types (1.17.2) 
Using rubypython (0.5.3) 
Using pygments.rb (0.2.4) 
Using linguist (1.0.0) from source at . Enter your password to install the bundled RubyGems to your system: 

Using bundler (1.0.21) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
```

$ bundle exec rake

``` ruby
/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/1.8/pathname.rb:263: warning: `*' interpreted as argument prefix
/Library/Ruby/Gems/1.8/gems/rubypython-0.5.3/lib/rubypython/operators.rb:67: warning: `*' interpreted as argument prefix
/Library/Ruby/Gems/1.8/gems/rubypython-0.5.3/lib/rubypython/operators.rb:75: warning: `*' interpreted as argument prefix
/Library/Ruby/Gems/1.8/gems/rubypython-0.5.3/lib/rubypython/operators.rb:86: warning: `*' interpreted as argument prefix
/Library/Ruby/Gems/1.8/gems/rubypython-0.5.3/lib/rubypython/pygenerator.rb:43: warning: `*' interpreted as argument prefix
/Library/Ruby/Gems/1.8/gems/pygments.rb-0.2.4/lib/pygments/ffi.rb:116: warning: private attribute?
Loaded suite /Library/Ruby/Gems/1.8/gems/rake-0.9.2.2/lib/rake/rake_test_loader
Started
.............................................................
Finished in 4.128323 seconds.

61 tests, 1730 assertions, 0 failures, 0 errors
```

Thanks for your consideration.
- Rob
",Externals,99,True,en
109,,Externals,0,False,en
108,"Original discussion here - https://github.com/mozilla/rust/issues/1512
",Externals,4,True,en
107,,Externals,0,False,en
105,"Otherwise, Bundler raises an error.
",Externals,0,True,en
104,"Adds the `.mako` file extension for [Mako templates](http://makotemplates.org).
",Externals,0,True,en
103,,Externals,0,False,en
101,"Added an extra extension (.nimrod) for Nimrod and also gave it the ""programming"" type.
",Externals,0,True,en
100,,Externals,0,False,en
99,"Added Fantom definition to languages.yml
",Externals,0,True,en
98,"Perl .plx files are now picked up. The .plx file extension is used to denote a Perl file that is executable.

`bundle install && bundle exec rake test` passed.

Cheers.
",Externals,0,True,en
97,"There are plenty of users that I think would benefit from having syntax highlighting work on non-hidden bashrc and zshrc files
",Externals,0,True,en
96,"Makefiles sometimes named with `.mk` extension. You can look at [Android NDK](https://github.com/CyanogenMod/android_ndk) for example. Added highlighting for that extension.
",Externals,0,True,en
94,"This adds some .NET specific exclusions that will help language stats on C# projects. The only things I'm a bit unsure about here is if you want the special case for the jQuery validation plugin. It could be written as part of the main jQuery regex, but I thought this way was a bit clearer since this particular plugin is actually being distributed with ASP.NET MVC and ends up being part of projects by default.
",Internals,0,True,en
93,"This adds the XLIFF extension as XML for translation files. `.xlf` is the official one but `.xliff` is also used by some projects (including Symfony2)
",Externals,1,True,en
92,"GNU make manpage says: ""If  no  -f  option  is present,  make will look
for the makefiles GNUmakefile, makefile, and Makefile, in that order.""

@Tekkub HERE IT IS! KTHXBYE :cake:
![](http://memegenerator.net/cache/instances/400x/11/11329/11601590.jpg)
",Externals,18,False,en
91,"This adds support for .sage file syntax highlighting. Sage uses python for syntax, but I added a separate section instead of adding an entry to the Python extensions list in case a separate lexer is needed in the future.

More information on sage is at http://sagemath.org
",Externals,0,True,en
90,"Detects the Turing programming language. It is used by high school programmers to learn programming. It is mainly used in Canada. Currently Github detects Turing as Perl because of the .t extension.

This detects Turing and makes sure it is not Perl. Does not have a lexer yet. Uses the plain text lexer.

More info on Turing: http://en.wikipedia.org/wiki/Turing_(programming_language)
",Externals,0,True,en
89,"Detect Arduino 1.0 files

With the 1.0 release of the Arduino ide the file extension will be changed from .pde to .ino, this change will make detection of Ardino repos possible.

For more info on the extension change: http://code.google.com/p/arduino/wiki/Arduino1
",Externals,5,True,en
88,"CocoaPods is an Objective-C library package manager (like RubyGems/Bundler): https://github.com/alloy/cocoapods

As people are starting to add [related documents to their repositories](https://github.com/samsoffes/sstoolkit/blob/master/SSToolkit.podspec), it would be nice if these documents were recognized as Ruby source files. (I did not see any tests for specific extensions, let me know if I missed it.)

I have also included an addition to the README, which would save the next person running into this error a couple of minutes. After installing the CharlockHolmes gem as indicated in its README it all worked for me.
",Externals,0,True,en
87,,Externals,0,False,en
86,"I saw a couple of tests weren't included for aliases.
",Externals,0,True,en
85,"Lets you use `#!/usr/bin/env emacs --script` shebang line in Emacs Lisp scripts.
",Externals,0,True,en
84,".vapi files are vala interface definitions for external C libraries,
and use the same syntax as regular .vala files. Support highlighting them
as well.
",Externals,0,False,en
83,"Many people place their dotfiles on github or distribute their `.vimrc`. However some of those people elect to remove the dot from the filename when placing it under version control. Examples can be found [here](https://github.com/oryband/dotvim/blob/master/vimrc) and [here](https://github.com/carlhuda/janus/blob/master/vimrc). 

Currently these files have no syntax highlighting and it's quite annoying.
",Externals,0,True,en
81,"The .dtx and .ins files are  used in TeX world, to generate .cls, .sty and documentation
",Externals,0,True,en
80,"This adds the suffix `.bones` to the JavaScript parser. `.bones` is used by the [bones framework](https://github.com/developmentseed/bones), a client/server-targeting Backbone-based system. It's used in [TileMill](https://github.com/mapbox/tilemill), [TileStream](https://github.com/mapbox/tilestream), and in plugins like [bones-admin](https://github.com/developmentseed/bones-auth).

All `.bones` files are proper JavaScript files with no language changes.
",Externals,0,True,en
77,"Standard ML files still haven't been showing up as languages in GitHub's ""what languages does this project use"" view; is the lack of a ""type: programming"" line the reason why? 

Additionally, the Standard ML-specific lexer has been added to Pygments on Bitbucket's; GitHub may not use bleeding-edge Pygments, but it should be eventually possible to use Standard ML-specific lexer rather than the OCaml one.
",Externals,0,True,en
76,"I use waf on a couple of C-based projects, but because of the size of the waf file they're marked as Python projects instead of C. I've added the file to vendor.yml to ignore it.
",Externals,0,True,en
75,"See #73
",Externals,2,True,en
71,"These changes add [AutoHotkey](http://www.autohotkey.com/) support.

Syntax highlighting is in progress. Lexer has been completed but awaits approval from Pygments team. For now ""lexer: Text only"" is in effect.
",Externals,0,True,en
69,"`.project` and `.classpath` are XML files that contain information about the project.

`.prefs` files are preferences that are Java properties files.
",Internals,0,True,en
68,,Internals,0,False,en
67,"Fixed the gsp guess function for Ruby 1.8.7
",Externals,3,True,en
66,"Adding support to detect the difference between a Grails gsp and a Gosu gsp.

This is important to get working because checking under explore github and looking at Gosu many of the top projects are actually Grails projects.
",Externals,0,True,en
65,"This PR adds support to highlight coffeescript files with the following shebang:

`#!/usr/bin/env coffee`
",Externals,0,True,en
63,,Externals,0,False,en
62,,Externals,0,False,en
60,"see http://gosu-lang.org
",Externals,0,True,en
59,"With the introduction of NuGet (.NET's version of Rubygems), people end up checking in a lot of assemblies into source (it basically makes you).  While we suppress the DLLs and PDBs, we don't suppress the XML documentation, which makes diffs look horrific. This patch detects these files and suppresses them. 
",Externals,0,True,en
58,,Externals,0,False,en
57,,Externals,0,False,en
56,"Visual Studio project files (.csproj, .vbproj, etc.), solution files (.sln) and resource files (.resx) marked as generated. 
Windows Installer XML files, XAML, settings and config files marked as XML.
",Externals,0,False,en
55,,Externals,0,False,en
54,"Vagrantfiles, used by [Vagrant](http://vagrantup.com) to control virtual machines, are ruby scripts.
",Externals,0,True,en
53,"Add commonly used filenames and extensions for scripts used by the CMake build system.
",Externals,0,True,en
50,,Externals,0,False,en
48,"This request adds support for the Rust programming language (http://github.com/graydon/rust).  

I don't care about syntax highlighting for the time being; I just want to register Rust as a language GitHub recognizes.  But to make the tests pass, I have to manually add Rust to lexers.yml, and that file looks like it's supposed to be automatically generated.  So, if I'm doing something wrong, let me know and I'll update the pull request.  Thanks.
",Externals,0,True,en
47,"Xcode 4 generates more XML files than ever: update `generated?` to recognize them as such.
",Externals,1,True,en
46,"related discussion: https://github.com/github/linguist/issues/45
",Externals,2,True,en
42,"Hi. 

Merge Nemerle language detection please.
",Externals,0,True,en
40,"This sets the language type of REBOL in `languages.yml` to `programming`.
",Externals,0,True,en
38,".dpr files usually contain the project's entry point, and some compilation directives.
",Externals,0,True,en
36,"Sbt, Simple Build Tool, is a build tool for Scala projects which enables you to define your projects behavior in a Scala source file or in a `build.sbt` [1](https://github.com/harrah/xsbt/wiki/Quick-Configuration-Examples) file which contains code that will get evaluated as Scala. This changeset registers the .sbt file extension with the Scala programming language for syntax highlighting support on github.

An example of one in the wild is https://github.com/softprops/sbt-gh-issues/blob/sbt_0_10_0/build.sbt which currently gets rendered as simple plain text.
",Externals,5,True,en
35,"/cc @tmm1
",Internals,1,True,en
34,,Externals,0,False,en
33,"This adds support for Prolog in the list of languages (the lexer is already there, from Pygments) and adds a disambiguation rule for .pl files which can be either Perl or Prolog source files. The rules for disambiguation are: 
1. Many Perl files start with a shebang line, so if it's there, the code calls the function shebang_script to get the language and check it is perl
2. Most Prolog files have at least one rule somewhere, so if a "":-"" operator occurs in the file, it is assumed to be Prolog
3. If none of the previous two tests succeed, assume it is a Perl file, because it is the more popular language. 

Tests included for the added language and disambiguation code. When ran on local Prolog repositories, statistics show ""100% Prolog"" correctly. 
",Externals,6,False,en
31,"I believe it's spelled ""highlighted"", and not ""hightlighed"". My spell checker also thinks I'm right.

I hope just committing to the master branch and not a separate branch was correct for such a small fix.
",Externals,0,True,en
29,"https://developer.mozilla.org/en/JavaScript_code_modules
",Externals,0,True,hu
20,".r is the default extension used widely for both, R and REBOL. This patch attempts to guess if .r is a REBOL file by looking for the following very common REBOL code fragments:
- `REBOL`
- `: func [`
- `make object! [`
- `context [`

If any of those is found in a .r file, it is identified as a REBOL file. Otherwise the language for a .r file is R.

A few examples of repositories on Github containing REBOL code which are currently incorrectly classified as R:
- https://github.com/carls/R3A110
- https://github.com/dockimbel/Red
- https://github.com/earl/vanilla
- https://github.com/henrikmk/VID-Extension-Kit
- https://github.com/oldes/REBOL-scripts
- https://github.com/rebolsource/rebol-test
",Externals,4,False,en
16,,Externals,0,False,en
14,,Externals,0,False,en
13,"Hope it's not a problem to add a minor thing in the extensions, rbuilds are build scripts for my package manager written in Ruby, so it would make me happy to have them highlighted in Ruby on github.

Thanks.
",Externals,0,True,en
11,"Hopefully this will make github track lilypond files. Let me know any needed changes.
",Externals,0,True,en
10,"kinda weird thing but small. enjoy it!
",Externals,0,True,en
6,"This is our documentation language, http://docs.racket-lang.org/scribble/,
and the files are still racket files even though the syntax looks completely
different.
",Externals,0,False,en
