"","pull_request","number_of_commits","number_of_comments","number_of_reviews","user_type","user_login","merged_at","number_of_additions","number_of_deletions","number_of_files_changed","number_of_days","message","number_of_characters","second_line_is_blank","language","number_of_test_files"
"58",3811,4,4,0,"Externals","DoctorWhoof","2018-01-11T09:23:55Z",412,0,4,128,"These compile with the latest Monkey2 release (V1.1.06).

Don't know how to add a Public Domain license, but I made those from scratch so, yes, they're public domain.",166,"True","en",0
"107",3648,7,22,0,"Externals","MaickelHubner","2017-10-14T17:12:17Z",240,0,3,141,"",0,"False","en",1
"175",3466,1,24,0,"Externals","jlec","2017-06-26T08:07:37Z",30,0,2,135,"The hpcugent/easybuild-framework is a python framework for installation of applications on HPC envirnments. The actual package build description are written in python but having _.eb_ as extension.",197,"False","en",0
"297",3145,2,39,5,"Externals","MartinNowak","2017-03-30T17:25:54Z",663,3,10,236,"- properly recongnize dtrace probes
- recongnize \ in Makefile paths
- recongnize single line `file.ext : dep.ext` make targets
- recognize D module, import, function, and unittest declarations
- add more representative D samples

`rake benchmark:compare`
D changed from 31.2% to 28.1%
DTrace changed from 33.5% to 32.5%
Makefile changed from 35.3% to 39.4%

diff of `rake benchmark:generate`
https://gist.github.com/MartinNowak/6fba5aed9401dba4d4bfd7969a168c61 (URLs relative to github.com/)
- no misclassifications except for 2 /etc/init.d shell scripts

see https://gist.github.com/MartinNowak/fda24fdef64f2dbb05c5a5ceabf22bd3 for the scraper used to get test corpora for D, DTrace, and Makefile with `extension:d`.
- corpus had ~276K lines (~22MiB) from 3K files
- had to filter out lots of .d files from the binutils testsuite (apparently references file diff tests)",871,"False","en",2
"298",3142,17,17,12,"Externals","Crissov","2016-12-06T02:50:05Z",50,4,6,123,"- Text: ← filenames: FONTLOG http://scripts.sil.org/cms/scripts/page.php?item_id=OFL-FAQ_web#43cecb44
- OpenType: ← extensions: .fea https://www.adobe.com/devnet/opentype/afdko/topic_feature_file_syntax.html
- Spline Font: ← extensions: .sfd http://fontforge.github.io/en-US/documentation/developers/sfdformat/
",317,"False","ps",0
"311",3092,1,6,0,"Externals","pchaigno","2016-11-01T11:18:18Z",9,0,1,124,"This pull request adds Python console highlighting, as discussed in #1939.

The goal is to enable Python console highlighting in Markdown documents and comments with the `pycon` identifier. Thus, the entry in `languages.yml` doesn't define extensions or filenames.

[Here is an example of the result in Lightshow](https://github-lightshow.herokuapp.com/?utf8=%E2%9C%93&scope=from-url&grammar_url=https%3A%2F%2Fgithub.com%2Fatom%2Flanguage-python%2Fblob%2Fmaster%2Fgrammars%2Fpython-console.cson&grammar_text=&code_source=from-text&code_url=&code=%3E%3E%3E++try%3A%0D%0A...+++++from+io+import+StringIO%0D%0A...+except+ImportError%3A%0D%0A...+++++from+StringIO+import+StringIO).
",677,"True","en",0
"428",2843,5,21,1,"Internals","bkeepers","2016-10-28T04:24:06Z",20,0,4,252,"This is an update to https://github.com/github/linguist/pull/2620 that only treats `.go` files in `vendor` as generated.

I'm not a gopher, so one question I have about go 1.6: does it vendor non-`.go` files as well? If it does, then this won't work.

/cc @kr @rakyll @cespare @parkr @arfon 
",292,"True","en",2
"455",2773,1,24,0,"Externals","nixel2007","2016-08-19T16:12:49Z",864,0,11,246,"Hi there!

I would like to add 1C:Enterprise 8 (BSL) language.
1C:Enterprise is a very commonly used platform for automating a company’s financial and wider operational activities in CIS.  
Official site (english version): http://1c-dn.com/1c_enterprise/what_is_1c_enterprise/
Russian version: http://v8.1c.ru/

As a grammar i used [this](https://github.com/xDrivenDevelopment/atom-language-1c-bsl) Atom package developed by me as a part of [xDrivenDevelopment community](https://github.com/xDrivenDevelopment).

1C:Enterprise uses many file extensions. The main ones are `.bsl` for modules and `.xml` for metadata and config-stuff (actually it's an XML files). Those extensions were introdused this autumn, so it's not so much search results (so far) [link](https://github.com/search?l=&q=%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D0%B4%D1%83%D1%80%D0%B0+extension%3A.bsl&ref=advsearch&type=Code&utf8=%E2%9C%93), but the number of repos will grow fast.

`.os` extenstion used by external scripts written in 1C (BSL) language as part of `OneScript` project (no english link, sorry. [russian one](http://oscript.io/)). 

Samples are included for bsl and os.
",1148,"True","en",1
"469",2735,8,10,2,"Externals","tschf","2017-04-26T18:03:02Z",69,0,3,522,"I recently converted the Oracle text mate bundle [[1](https://github.com/mulander/oracle.tmbundle)] to an Atom grammar [[2](https://atom.io/packages/language-oracle)]. As such, I thought it would be good to also bring all the related extensions that have been introduced, into linguist, for the Oracle PL/SQL language.

Below is the list of extensions identified along with the number of results when searching that extension in GitHub with the string `create or replace` which is common in any database object.
- bdy - 732 entries [[3](https://github.com/search?p=1&q=%22create+or+replace%22+extension%3Abdy&ref=searchresults&type=Code&utf8=%E2%9C%93)]
- spc - 748 entries [[4](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Aspc&type=Code&ref=searchresults)]
- trg - 1489 entries [[5](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Atrg&type=Code&ref=searchresults)]
- tps - 193 entries [[6](https://github.com/search?p=19&q=%22create+or+replace%22+extension%3Atps&ref=searchresults&type=Code&utf8=%E2%9C%93)]
- vw - 1317 entries [[7](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Avw&type=Code&ref=searchresults)]
- fnc - 654 entries [[8](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Afnc&type=Code&ref=searchresults)]

The extensions `ddl` and `prc` both with an existing mapping to `SQL`, but I feel should also have cases where they are mapped to PL/SQL - it seems `create`, `replace` for example aren't syntax highlighted in the phrase `create or replace`. Example case - https://github.com/gordynor/Demo/blob/0ddb72599c26b935d5731cf2d5e9680f6ac73c5a/sql/test.prc
- ddl - 417 entries [[9](https://github.com/search?p=41&q=%22create+or+replace%22+extension%3Addl&ref=searchresults&type=Code&utf8=%E2%9C%93)].
- prc - 21777 entries [[10](https://github.com/search?utf8=%E2%9C%93&q=%22create+or+replace%22+extension%3Aprc&type=Code&ref=searchresults)]

I added opposing samples in the samples directory for `prc` and `ddl` which contain a `create or replace` statement. https://github.com/tschf/linguist/tree/master/samples/PLSQL. Is this sufficient?

The other extension added to the grammar was `dml`. Upon searching with phrases like `create or replace` (only 5 code files - expected to be low, since it's DML) or `insert into` (still only 99 code entries). As such left this one out.

The contributing guide states that extensions should be in use in hundreds of repositories, so I'm not sure if the above analysis means the majority of these extensions fail that requirement or not.

Also, the contributing guidelines mention about testing the performance of the Bayesian classifier. I wasn't really sure where to begin with this?
",2767,"True","en",0
"511",2613,12,9,7,"Externals","ghost","2016-01-22T01:10:36Z",21,6,1,142,"These are effected languages and the reason behind the proposed colors:
- Ant Build System: The color of logo (http://ant.apache.org/images/project-logo.gif).
- AppleScript: AppleScript editor logo (https://en.wikipedia.org/wiki/AppleScript#/media/File:AppleScript_Editor_Logo.png).
- Batchfile: Batch file icon in Windows (https://en.wikipedia.org/wiki/Batch_file#/media/File:Batch_file_icon_in_Windows_Vista.png).
- Bison: A color taken from a bison (https://en.wikipedia.org/wiki/Bison#/media/File:Americanbison.jpg).
- Cucumber: Official logo color (https://cucumber.io/images/cucumber-logo.svg).
- Cuda: Nvidia(creator of CUDA) logo color (http://www.nvidia.com/content/includes/redesign2010/images/redesign10/nvidia_logo.png).
- Gradle: Official Gradle logo color (https://gradle.org/wp-content/uploads/2015/03/GradleLogoReg.png).
- Hack: Hack logo color (http://hacklang.org/wp-content/themes/hack/hack.png).
- Haml: Haml logo color (http://haml.info/images/haml.png).
- LLVM: Eye color of the dragon logo of LLVM (http://llvm.org/img/DragonMedium.png).
- Less: Less logo color (http://lesscss.org/public/img/logo.png).
- Markdown: The Daring Fireball logo color (http://daringfireball.net/graphics/logos/).
- Maven POM: The maven logo color (https://en.wikipedia.org/wiki/Apache_Maven#/media/File:Maven_logo.svg).
- Nginx: The nginx logo color (http://nginx.org/nginx.png).
- NumPy: The NumPy logo color (http://www.numpy.org/_static/numpy_logo.png).
- RDoc: I couldn'd find any logo, so have used the color of the name of RDoc in the official site (http://docs.seattlerb.org/rdoc/).
- SCSS: The Sass logo color (http://sass-lang.com/assets/img/logos/logo-b6e1ef6e.svg).
- Sass: The Sass logo color (http://sass-lang.com/assets/img/logos/logo-b6e1ef6e.svg).
- XML: A random color.
- XSLT: A random color.
- YAML: The color of the name of YAML in the official site (http://yaml.org/).
- Yacc: A random color.
- reStructuredText: The official logo color (http://docutils.sourceforge.net/rst.png).
",2003,"False","en",0
"619",2341,1,5,0,"Internals","bkeepers","2016-03-17T03:15:50Z",85,41,5,335,"It has always bothered me that the main public method for linguist was buried in the `Language` class in the middle of a bunch of other internal methods.

This renames `Linguist::Language.detect` to `Linguist.detect` and deprecates the old method. Thoughts?

Since this is a new method, I would recommend we release this in 4.6.0, and then remove the deprecated method in 5.0.

/cc @arfon @pchaigno @larsbrinkhoff 
",415,"True","en",2
"699",2179,2,6,0,"Externals","pchaigno","2015-07-04T15:57:43Z",273,2,3,126,"I am opening this pull request to get some help on it.
I am trying to implement the change suggested in #1685 to ignore symbolic links.

@bkeepers suggested to change [these lines in `repository.rb`](https://github.com/github/linguist/blob/master/lib/linguist/repository.rb#L153-L155). Is that going to affect the search results as well? (as @quasado wanted)

I made the changes which should ignore symlinks based on the mode attribute. I tested on the two files that I added in `test/fixtures/SVG/`. It doesn't work, the mode doesn't seem to change for a symbolic link at all... :/
",583,"False","en",0
"716",2146,2,7,0,"Externals","pchaigno","2016-03-09T12:02:58Z",1989,0,4,381,"This pull request adds support for two Text extensions mis-recognized as Mathematica (reported at #2137).

@arfon Could you send me a corpus of files from this search: https://github.com/search?o=asc&q=er+en+som+extension%3Ano+extension%3Anb&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93 and one from https://github.com/search?o=desc&q=mathematica+extension%3Ano+extension%3Anb&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93 to test this changes? Thanks.
",468,"True","en",0
"749",2070,1,15,0,"Externals","R4PaSs","2017-05-15T08:02:06Z",1536,0,12,832,"Hi,

PEP-8 is not only Python's conventions for code formatting, it is also a dead simple toy assembly language, the repo of the language/environment itself is available on [Google Code](http://code.google.com/p/pep8-1/).

There's not a lot of use for it, being a toy language, it is never used in production environments.

However, we do use it for teaching purposes in a course at the university I'm attending, being a simplified assembly-level language, it is easier for students to approach machine-level concerns without getting too overwhelmed by the complexity of real-world assembly languages such as x86 or ARM.

I'm using Github as a platform for [teaching material](https://github.com/R4PaSs/PEP8-examples), since there will be some PEP-8 code hosted here, I figured this would be a good time to try and have the language recognized and highlighted by Github.

Some students also use Github as a mean to versionize their code, I have a few examples of assignments done by students during previous sessions of the course:
- [4-in-a-row](https://github.com/Freddrickk/Puissance4)
- [Brainfuck interpreter](https://github.com/madeinqc/Pep8-assembly---Brainfuck-interpreter)
- [CamelCase to snake_case converter](https://github.com/madeinqc/Pep8-assembly---Snake-case-converter)

There might be other examples of PEP-8 code on Github, but not that I personally know of.
",1377,"True","en",0
"762",2006,2,17,4,"Externals","pchaigno","2016-12-12T20:34:33Z",435,29,10,687,"I think we should separate the detection by filenames from the detection by file extensions. I'm opening this issue to discuss the pros and cons of this approach.

So I think we should have a new Strategy that checks if a file match one of the filenames defined in `languages.yml`. If it does, then it can return directly the language associated. If none is found, the process can continue as usual.

This new strategy would fix many _miss-detections_ currently happening:
- [`CMakeLists.txt` detected as Text instead of CMake](https://github.com/search?l=text&o=desc&q=filename%3ACMakeLists.txt+cmake_minimum_required&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93)
- [`pom.xml` detected as XML instead of Maven POM](https://github.com/search?l=xml&q=filename%3Apom.xml+xml&ref=searchresults&type=Code&utf8=%E2%9C%93) (all `.xml` filenames have miss-detections)
- Executable files: see [Makefile](https://github.com/search?l=perl&q=filename%3AMakefile+all&ref=searchresults&type=Code&utf8=%E2%9C%93), [Dockerfile](https://github.com/search?l=bash&o=desc&q=filename%3ADockerfile+env&ref=searchresults&s=indexed&type=Code&utf8=%E2%9C%93) or [Cakefile](https://github.com/search?l=javascript&q=filename%3ACakefile+if&ref=searchresults&type=Code&utf8=%E2%9C%93).

The only drawback I see so far is that there might be some cases where developers use filenames defined in `languages.yml` for other language than what there are usually associated to. I think it's an acceptable drawback because the filenames defined in `languages.yml` are sufficiently specific and if it does happen, they can always use the Overrides.

/cc @arfon @bkeepers 
",1644,"True","en",1
"790",1965,4,13,0,"Internals","aroben","2016-03-09T12:35:31Z",11,26,7,426,"Now that all our grammars are licensed (or grandfathered in), we can distribute them as part of the standard github-linguist gem. This makes it easier for projects to get up and running with Linguist.

/cc @bkeepers @arfon @vmg
",228,"True","en",0
"823",1899,3,5,0,"Externals","sethvargo","2015-07-29T13:14:38Z",27,0,3,222,"More information on HCL: https://github.com/hashicorp/hcl
",58,"True","en",0
"881",1770,11,17,0,"Externals","fushnisoft","2015-04-10T20:32:46Z",370,0,11,135,"Clarion is a Rapid Application Development tool (RAD) with a 4th Generation language. The language was create by Bruce Barrington back in the early 1980 and operated in DOS until Clarion for Windows came out in 1994.

Some examples of Clarion on GitHub:
https://github.com/devroadmaps/DevroadmapsClarionLibrary
https://github.com/fushnisoft/ClarionMetroWizard
https://github.com/CarlosGtrz/ClarionJson
https://github.com/MarkGoldberg/ClarionCommunity
https://github.com/MarkGoldberg/CwUnit
https://github.com/Rick-UpperPark/ClarionLiveDLLTutor
https://github.com/ClarionLive?tab=repositories
",592,"True","en",0
"963",1604,1,6,1,"Externals","geoff-codes","2015-04-01T20:18:40Z",1520,0,6,166,"- Add `--` and `""` style single-line comments.
  - Rearrange `elsif`s so `""` comments don't interfere with removing double-quoted strings.
- Don't fail to detect valid `#!/usr/bin/env` shebangs which actually ""`env`"" environmental variables.

**Edit**:

---
- Add tests to test_tokenizer.rb to match tokenizer.rb.
- Add samples for `""` and `--` comments and complicated `env` shebangs.
- Also, add `.tool` as shell extension (basically, exactly as #1622).
",456,"False","en",1
"976",1573,7,7,0,"Externals","ztmr","2015-04-10T20:54:05Z",4955,0,10,188,"Search here on GitHub:
- `vms extension:mms extension:mmk` gives 10,840 code results,
- `vms extension:com` gives 27,922 code results.

(Note that not all the files contain `vms` keyword...)
",191,"False","en",0
"1000",1523,4,18,2,"Externals","fingolfin","2015-01-23T20:50:33Z",200,2,5,132,"This adds a fourth extension for the ""GAP"" language: .tst, which is used for test cases (which use a slightly different set of syntax rules). Currently, such .tst files are mis-detected as SciLabg, see e.g. here:

  https://github.com/gap-system/SingularInterface/search?l=scilab

Indeed, for that project, GitHub thinks it is written in 67.% Scilab and 28.1% GAP -- but all that ""Scilab"" code is GAP code.

Secondly, it removes the 'lexer: Text only' mark, as my Pygments patch adding support for GAP was merged in April. I also verified that it is live on GitHub, e.g.:

``` gap
# This is GAP code
if x = fail then
  Print(""Failure\n"");
else
  Print(""All seems well\n"");
fi;
```
",681,"True","en",0
"1006",1511,8,6,4,"Externals","edmundito","2015-02-16T19:23:08Z",15,5,2,163,"Went into the Explore languages feature within github to see the ""AGS Script"" projects and noticed a couple of things:
1. .asc files were getting marked as AGS Script but formatted as AsciiDoc
2. .asc files that were neither format were also getting marked as AsciiDoc.

So, I added a heuristics checker for .asc files. ~~Additionally, because AGS Script is a nameless language  designed specifically for the Adventure Game Studio tool (and mentioned as `'C'-style script` within the AGS source code, but no one calls it that), I renamed the script to Adventure Game Studio to avoid ambiguity (similar to how the ColdFusion's language is called ColdFusion), and brings more clarity to Adventure Game Studio game projects within github~~.

After making these changes, I cloned a selection of the projects that were incorrectly marked as AGS Script and ran a `exec rake linguist <clone_path> --breakdown` on them to ensure that things were working properly.
",956,"False","en",1
"1099",1267,1,5,0,"Externals","pchaigno","2014-09-24T21:50:58Z",67055,66495,7,106,"This PR adds support for the `.pp` file extension for Pascal as mentioned in #1265.
`.pp` is already the primary extension for Puppet so I added a few samples for both languages.
I tested it on most of the trending Puppet repository as well as on [graemeg/lazarus](https://github.com/graemeg/lazarus).
",302,"False","en",0
"1153",1143,10,12,4,"Externals","pchaigno","2015-01-24T14:58:07Z",483,0,6,271,"Updated version of #949 (and neater).

Pull request taken up from #919.
Some example NewLISP repositories on GitHub:
https://github.com/kanendosei/artful-newlisp
https://github.com/taoeffect/dragonfly-newlisp
https://github.com/newlisponrockets/newLISP-on-Rockets
",264,"True","en",1
"1160",1129,6,6,0,"Externals","pchaigno","2014-12-12T02:58:06Z",68,8,5,230,"This pull request was asked for in #1074. It adds support for the BitBake language.

It creates a conflict on the .bb extension with BlitzBasic.
I tested it on several BitBake repositories (which are currently recognized as BlitzBasic) and I didn't have a single perfect detection. I think this is because they aren't that different and, on the small files, the Bayesian classifier isn't very helpful. (It's better than before as BitBake files were not detected at all.)
@e8johan Do you have more representative BitBake files? It could help improve the accuracy of the Bayesian classifier.

I think it could be resolved with heuristics as discussed in #1074. I could write these when heuristics are enabled.

Because of the current restriction, I had to change the primary extension of BlitzBasic to .decls.
",808,"True","en",1
"1240",933,3,6,0,"Externals","pchaigno","2014-10-13T19:57:19Z",94,0,4,245,"This adds the support of the .pro file extension for Prolog.
This extension is often used as a replacement for .pl (which is also the Perl file extension).
Currently, Prolog files with the .pro extension are detected as IDL files.
This search result displays some misdetected files:
https://github.com/search?l=IDL&q=%3A-&ref=advsearch&type=Code
I've added some heuristics and a sample file.
",392,"False","en",1
"1253",900,4,36,7,"Externals","hoelzro","2014-12-02T16:52:46Z",4427,3,20,316,"Add some more Perl 6 examples so the classifier does a better job.
",67,"True","en",0
"1260",889,2,7,2,"Externals","larsbrinkhoff","2014-11-18T21:05:23Z",882,0,10,309,"More than 2000 Forth files with the `.f` extension are misidentified as Fortran:
http://github.com/search?q=extension%3A.f+dup

This pull request adds
- `.f` as a Forth extension
- Fortran samples
- Heuristics to chose between Forth and Fortran
- Tests

Tested with these repos:
http://github.com/ruv/epurger
http://github.com/certik/fortran-utils
http://github.com/joamaki/jforth
http://github.com/nschloe/lapack
http://github.com/besser82/linpack
http://github.com/xianyi/OpenBLAS
http://github.com/robertord/SBP-MCAP
http://github.com/zwizwa/staapl
http://github.com/voidlizard/tdforth
http://github.com/wesleycyn/ezForth
http://github.com/Starlink/starlink
http://github.com/orenf/fvs
http://github.com/VoidVolker/spf64
",724,"False","en",1
"1265",882,6,3,0,"Internals","arfon","2014-04-21T16:52:25Z",2916,5,4,107,"See https://github.com/github/linguist/pull/411 for original PR.

/ cc @josharian
",82,"True","en",0
"1267",879,1,0,0,"Externals","s0meone","2014-04-21T16:04:22Z",10,1,2,111,"Option hash was reset to an empty hash every time you call `#colorize`. Removed this so you can pass options to Pygments' formatters.

Included a test case.
",157,"True","en",1
"1296",826,1,11,0,"Externals","mmhelloworld","2014-04-21T16:21:41Z",45981,43526,6,131,"## What is Frege?

[Frege](http://en.wikipedia.org/wiki/Frege_%28programming_language%29) is a non-strict, pure functional programming language in the spirit of Haskell for the JVM.
It enjoys a strong static type system with type inference.
Higher rank types are supported, though type annotations are required for that.

Frege programs are compiled to Java and run in a JVM.
Existing Java Classes and Methods can be used seamlessly from Frege.

The Frege programming language is named after and in honor of Gottlob Frege.
## Project State:

The compiler, an Eclipse plugin and a provisional version of the documentation can be downloaded
from here https://github.com/Frege/frege/releases.

The REPL can be downloaded from here
https://github.com/Frege/frege-repl/releases.

An online REPL is running here
http://try.frege-lang.org/.
## Examples:

1) Command Line Clock: https://github.com/Frege/frege/blob/master/examples/CommandLineClock.fr
2) Brainfuck: https://github.com/Frege/frege/blob/master/examples/Brainfuck.fr
3) Concurrency: https://github.com/Frege/frege/blob/master/examples/Concurrent.fr
4) Sudoku: https://github.com/Frege/frege/blob/master/examples/Sudoku.fr
5) Java Swing examples: https://github.com/Frege/frege/blob/master/examples/SwingExamples.fr
",1270,"True","en",0
"1300",820,1,4,0,"Externals","waddlesplash","2014-06-20T11:42:21Z",19257,18291,6,192,"Mostly because the file extension conflicts with that of Prolog files.

Continuation of #708, with fixed conflicts and build.
cc @tnm, because you said you were interested :smile: 
",181,"True","en",0
"1303",817,1,0,0,"Externals","remixz","2014-04-21T16:24:39Z",51,3,3,135,"Dogescript: https://github.com/remixz/dogescript

Examples: 
- https://github.com/ngscheurich/doge-adventure
- https://github.com/Goos/dogenerator
- Dogescript compiling implemented in https://github.com/jenius/roots

```
 wow
     no dogescript on github
  much PR
      very syntax
    for great compile-to-JS
```
",316,"True","en",0
"1305",814,1,0,0,"Externals","ppannuto","2014-06-06T17:12:09Z",1,0,1,182,"The nesC entry in the languages.yml file was missing a lexer entry
and thus wasn't getting picked up. This adds the required lexer line.
",137,"False","en",0
"1318",780,3,0,0,"Externals","standage","2014-05-03T23:31:50Z",103,0,2,169,"I recently committed two R scripts to GitHub (https://github.com/standage/tk-rnaseq/commit/ac51150a362cb2c4cdb5c30c2b45883834ee6b31) : one was classified as Perl and the other as JavaScript. One of the R samples uses the same approach as I have (no file extension, `/usr/bin/env Rscript` on the shebang) and yet it's wrong.

I don't have much Ruby experience and was unable to get tests running locally, so I am submitting this pull request to see the test results on Travis.
",476,"True","en",0
"1336",748,1,55,5,"Externals","PaulBone","2014-04-21T22:13:46Z",15610,8,0,174,"Mercury is a logical/functional language.  It was first developed at The University of Melbourne and is now almost 20 years old.  Projects on github include:

https://github.com/Mercury-Language/mercury
https://github.com/PaulBone/protobuf-mercury
https://github.com/PaulBone/pbone_thesis
https://github.com/wangp/bower
https://github.com/juliensf/mercury-csv
https://github.com/juliensf/mercury-misc
https://github.com/juliensf/mercury-json
https://github.com/petdr/venus

Thanks.

lib/linguist/languages.yml:
    Add the declaration for the language.

samples/Mercury:
    Add samples for the classifier as Mercury shares it's filename extension
    with several other languages.
",682,"True","en",0
"1349",718,2,4,0,"Externals","SparkysWidgets","2014-04-21T16:38:24Z",8,8,3,189,"Added support for Eagle PCB files which are becoming common enough now on Github to make this addition. Taken from wickers PR ""Searching GitHub for ""eagle schematic"" yields 39 repositories and 16,531 code hits. Two high-profile communities with unlabeled Eagle repos are 'adafruit' and 'sparkfun'.""
",299,"True","en",0
"1361",678,3,0,0,"Externals","kethomassen","2013-12-23T21:02:57Z",7,0,2,105,"http://crystal-lang.org/
",25,"True","en",1
"1364",675,2,3,0,"Externals","webhat","2014-06-20T11:29:20Z",404,1,5,287,"I added a Lexer for the Pike Programming Language and have a pull request pending in pygments-main.

I have an open issue tmm1/pygments.rb#91 for the pygments update.

I've added this issue here for when it has been merged, and attached a pull request which adds the Pike lexer to linguist.
",291,"True","en",0
"1367",668,5,3,0,"Externals","johnjcamilleri","2014-04-21T16:49:36Z",2034,0,42,230,"The Grammatical Framework (GF) is a programming language for multilingual grammar applications. http://www.grammaticalframework.org/

Examples of GF usage on GitHub:
- https://github.com/GrammaticalFramework/GF
- https://github.com/johnjcamilleri/Maltese-GF-Resource-Grammar
- https://github.com/Attempto/ACE-in-GF
- https://github.com/GF-Estonian/GF-Estonian
",360,"True","en",0
"1388",590,1,0,0,"Externals","jsocol","2013-11-01T18:04:07Z",2,0,1,101,"Add .adp for AOL Server Tcl files.
",35,"True","en",0
"1389",589,3,0,0,"Externals","windley","2013-11-05T05:09:36Z",21,0,2,108,"Added config for Kinetic Rule Language (https://github.com/kre/Kinetic-Rules-Engine)
",85,"True","en",0
"1395",578,1,1,0,"Externals","timm","2013-11-05T19:57:11Z",1,0,1,116,"I'm porting to github my ""auk"" pre-processor language for ""awk"". currently, auk is in auk.googlecode.com

a "".auk"" file gets converted to "".awk"" after pulling out multi-line comments and add in support for structures.

when browsing, a "".auk"" file, it  should be syntax highlighted as a "".awk"" file

hence, i've changed languages.yml accordingly

t
",349,"True","en",0
"1398",572,1,0,0,"Externals","Aaron1011","2013-10-31T06:46:09Z",12,0,1,112,"Added REALbasic support
",24,"True","en",0
"1401",562,1,0,0,"Externals","hkdobrev","2013-11-05T03:40:48Z",8,0,1,126,"Sublime Text editor uses some extensions of its own which uses the JSON format.

It's popular to track such configuration files on GitHub so it would be useful to have JSON highlighting for them.
",196,"True","en",0
"1402",561,2,1,0,"Externals","aleksijuvani","2013-11-05T05:00:51Z",6,0,2,126,"Since the _vendor.yml_ file is already excluding all kinds of dependencies, wouldn't it also make sense to also exclude a folder dedicated only for dependencies? I'm not sure how widespread a folder called _""dependencies""_ is, but I'm at least using it in my own projects. There's already a pattern for a _""deps""_ folder, but I don't feel that's verbose enough.

Let me know what you think. Thanks!
",399,"True","en",1
"1404",555,3,4,0,"Externals","timjb","2013-11-05T19:36:20Z",135,1,3,129,"[Agda](http://wiki.portal.chalmers.se/agda/pmwiki.php?n=Main.HomePage) is a dependently type programming language and proof assistant, which is quite popular in the type theory community and is used [a lot](https://github.com/search?q=extension%3Aagda&type=Code&ref=advsearch&l=) on GitHub, for example in the [HoTT](https://github.com/HoTT/HoTT-Agda) cutting edge math research project

There is another [pull request](https://github.com/github/linguist/pull/252) adding support for Agda but that has been closed because of the lack of a Pygments lexer. Now, I've implemented a lexer which is in the main branch of pygments but hasn't landed in a release yet. I'm creating a new pull request because apparently the old one can't be reopened. Are there any additional steps I have to take because the lexer isn't in a released version of either pygments or pygments.rb?
",870,"True","en",0
"1405",550,1,0,1,"Externals","rschiang","2013-11-05T06:11:03Z",5,0,1,135,"QML itself has distinct extension .qml, but was misidentified as Prolog.
",73,"True","en",0
"1411",531,3,2,0,"Externals","chriskuehl","2013-11-05T04:43:46Z",10,0,2,147,"Projects using the [PhoneGap](https://github.com/phonegap) framework for creating cross-platform mobile applications contain one or more copies of a `cordova.js` file, which serves as a bridge between the project's code (written in JavaScript) and the device. Each platform has a slightly different version of this large library, so a mobile application can contain 5 or more copies of the file, even though it's really a library (and not part of the application's code).

PhoneGap is widely used, and there are many projects on GitHub using it. For example, the [phonegap-start](https://github.com/phonegap/phonegap-start) project has over 3,000 forks.

This pull request treats files with names like ""cordova.js"", ""cordova-1.2.0.js"", ""cordova.min.js"", etc. as libraries and does not count them as part of a project's codebase.
",829,"True","en",1
"1415",520,1,0,0,"Externals","MatthewFluet","2013-12-23T21:02:20Z",2,0,1,206,"Some projects written in Standard ML use the .fun extension.  For example:
- [RedBlackTree.fun](https://github.com/clf/celf/blob/master/RedBlackTree.fun)
- [main.fun](https://github.com/MLton/mlton/blob/master/mlton/main/main.fun)

Also, the Pygments Standard ML lexer recognizes the .fun extension; see:
- [functional.py](https://bitbucket.org/birkenfeld/pygments-main/src/0710694cba81a1544e6f789953ef164c7cfc4251/pygments/lexers/functional.py?at=default#cl-1082)

In contrast to pull request #440, this pull request only modifies `lib/linguist/languages.yml` and does not modify `samples/Standard ML/` (which makes the volatile `lib/linguist/samples.json` out of date).
",672,"False","en",0
"1420",508,2,0,0,"Externals","AdamFerguson","2013-11-05T04:30:20Z",16,0,3,172,"",0,"False","en",0
"1423",500,1,0,0,"Externals","Leushenko","2013-11-07T04:45:30Z",591,0,4,181,"Attempt 2: lexer now exists in Pygments
",40,"True","en",0
"1424",499,1,6,0,"Externals","ppannuto","2013-11-05T23:13:32Z",5,0,1,183,"nesC is an embedded systems language. It it is a stable product (~10
years old) primarily used for TinyOS, an embedded operating system.
Development has recently moved to github (https://github.com/tinyos/nesc).

Pygments has now pulled the nesC lexer as of 2013/5/6:
  https://bitbucket.org/birkenfeld/pygments-main/pull-request/166/

Please let me know if I need to do anything else / add more information.
",409,"False","en",0
"1425",495,1,1,0,"Externals","andygrunwald","2013-11-05T05:46:33Z",3,2,1,188,"If you analyze a project sometimes the statistic outputs a language with 0%. At first it seems that the language is not part of this project, but there are only some decimal places
missing.

This pull request adds two decimal places to the statistic output `linguist /folder/` or `bundle exec linguist /folder/`

**Original output (of a personal project)**

```
50%  Python
45%  Ruby
5%   PHP
```

**Output with PR (of a personal project)**

```
50.31%  Python
45.13%  Ruby
4.56%   PHP
```

**Original output (of [TYPO3 master](https://git.typo3.org/TYPO3v4/Core.git))**

```
84%  PHP
10%  JavaScript
6%   ActionScript
0%   XSLT
0%   Perl
0%   TypeScript
0%   Racket
0%   Shell
```

**Output with PR (of [TYPO3 master](https://git.typo3.org/TYPO3v4/Core.git))**

```
83.92%  PHP
9.96%   JavaScript
5.88%   ActionScript
0.13%   XSLT
0.04%   Perl
0.03%   TypeScript
0.02%   Racket
0.02%   Shell
```
",897,"False","en",0
"1432",475,2,1,0,"Externals","pointwise","2013-11-05T03:28:18Z",6,0,1,200,"Glyph, the Tcl-based scripting language in the Pointwise mesh generation software for computational fluid dynamics (CFD), offers the ability to automate all or part of the CFD meshing process.
",193,"True","en",0
"1435",460,6,5,0,"Externals","dwarfland","2013-11-05T23:14:34Z",187,0,3,216,"trying a new pull request after updating to latest master. Hopefully that solves the odd test failures, who knows...
",117,"True","en",0
"1438",450,6,7,0,"Externals","Giacom","2013-11-05T03:53:26Z",96,1,2,224,"Added:
- DM (Dream Maker) language.
- Sample DM file.

The DM language is used in an engine known as BYOND which allows users to easily create their own games in a language that is designed to be accessible for newcomers. I do not know how much a language has to be used on the site to be considered but searching for ""BYOND"" does show a lot of people using the language. I am also still learning git so if I have missed something then please let me know.
",456,"False","en",0
"1441",443,1,1,0,"Externals","stuartpb","2013-07-08T06:32:59Z",3,0,1,113,"Fixes #236
",11,"True","en",0
"1445",425,1,0,0,"Externals","mgalloy","2013-12-23T19:47:34Z",121,0,5,290,"I'm redoing pull-request to IDL to the list of languages without the changes to the `samples.json`.
",100,"True","en",0
"1450",416,4,15,0,"Externals","upsuper","2013-08-06T06:00:10Z",7192,8,4,157,"",0,"False","en",1
"1463",392,1,5,0,"Externals","qqshfox","2013-11-05T03:33:43Z",35,0,2,255,"",0,"False","en",0
"1472",377,1,3,0,"Externals","rlsosborne","2013-06-19T20:30:45Z",17,0,2,130,"This adds detection for the XC programming language (http://en.wikipedia.org/wiki/XC_Programming_Language), a C like language for developing embedded applications on XMOS devices.

There are various examples of projects using XC to be found at https://github.com/xcore
",269,"True","en",0
"1500",301,1,4,0,"Externals","andyli","2014-02-16T22:55:08Z",1,1,1,447,"Fix #106.
",10,"True","en",0
"1502",295,2,3,0,"Externals","yandy","2013-03-10T22:39:56Z",1,1,1,108,"Downcase the extname, so the methods such as image? can determine properbly
",76,"True","en",0
"1503",294,2,5,0,"Externals","DHowett","2013-03-06T22:42:46Z",82,3,3,104,"Logos is a language implemented on top of Objective-C and sees widespread use in the iPhone jailbreaking community.
Its main purpose is to make the creation of Objective-C-method-implementation-replacing ""tweaks"" easier.

Pygments support awaits the merging of a pull request (https://bitbucket.org/birkenfeld/pygments-main/pull-request/130/add-a-lexer-for-the-logos-language). The Travis build will likely fail until the aforementioned pull request is merged.

The included example is the example from the Pygments repository. A better example is at https://github.com/rpetrich/DietBar/blob/master/Tweak.x.
",608,"False","en",0
"1506",278,2,2,0,"Externals","DrItanium","2013-02-23T10:38:51Z",6,0,1,124,"CLIPS or C language integrated production system is a tool for writing expert
systems.

I did not add a syntax highlighter nor test files because my objective was to make sure that github tags my projects as CLIPS because right now they're blank. 
",248,"False","en",0
"1507",261,1,0,0,"Externals","justinclift","2013-01-08T12:21:29Z",1,1,1,108,"",0,"False","en",0
"1508",259,1,1,0,"Externals","afronski","2013-02-22T05:28:37Z",8,0,1,153,"SyntaxHighlighter should be recognized as a vendor library. 
Also enhance detection of the django template and treat _admin_media_ directory and files as vendor.
",162,"False","en",0
"1509",255,3,5,0,"Externals","seanupton","2013-02-22T06:49:18Z",2,0,1,156,"Various Python development communities (https://github.com/plone, https://github.com/collective, others) and developers on github using Zope page templates (.pt) and Zope Configuration Markup Language (.zcml) would greatly benefit from syntax highlighting of files with these extensions as XML.  languages.yml is updated and tests pass without regressions.
",357,"True","en",0
"1510",253,2,18,0,"Externals","reactormonk","2013-02-22T05:49:09Z",16,3,4,161,"Based on #238, I changed the mime-type based binary skip to include extensions from `languages.yml`, because it's more domain specific than mime types.
",152,"True","en",1
"1511",251,1,0,0,"Externals","ptrv","2013-02-12T00:05:53Z",53,0,2,154,"The primary extension .sc is usually used for class/library files.

The extension .scd is usually used for files where code is evaluated directly from the editor. (live coding)
",177,"True","en",0
"1514",246,3,20,0,"Externals","leafo","2013-01-08T12:15:38Z",907,0,2,131,"Adds MoonScript to the list of languages.

I didn't add a code sample because I can't run the script to regenerate the database because ruby pygments does not run on my system due to old version of rubypython: https://github.com/tmm1/pygments.rb/issues/10
",256,"True","en",0
"1516",239,2,3,0,"Externals","db0company","2013-02-22T06:01:03Z",50,0,2,178,"[Ocsigen](http://ocsigen.org/) is a web server and framework using OCaml.

It uses a syntax extension to manage the client-side, server-side or shared code. It also has its own compiler which requires a different file extension `.eliom`.

**OCaml syntax** seems fine to correctly display the Ocsigen code.
",306,"True","en",0
"1517",232,2,6,0,"Externals","strangewarp","2013-01-09T00:25:56Z",201,0,4,143,".pd_lua is the required extension for any Lua files written to directly communicate with Puredata, via the pdlua library.
",122,"True","en",0
"1518",231,3,7,0,"Externals","bfontaine","2013-01-08T12:37:18Z",55,0,4,143,"Extensions & colors & sample files added.
",42,"True","en",0
"1520",222,2,3,0,"Externals","tiwe-de","2013-01-08T12:23:18Z",5,0,2,146,"Debian packaging stuff should not count to the main source and debian/cron.d files are no D source.
",100,"True","en",1
"1521",221,1,2,0,"Externals","fkg","2013-01-08T12:31:45Z",4,0,1,146,"Add .ccxml, .grxml, .scxml, .vxml (from W3C specs) into the XML syntax group
",77,"True","en",0
"1523",215,2,7,0,"Externals","oxan","2013-06-17T18:01:06Z",28,1,2,311,"jQuery UI is used in quite some projects and should be recognized as a vendor library too. Also enhance detection of the jQuery validation plugin that is Microsoft adds to ASP.NET MVC projects by default. 
",206,"True","en",1
"1534",171,1,2,0,"Externals","ianmjones","2013-02-22T06:04:53Z",11,0,1,260,"I noticed that my REALbasic projects are often incorrectly set as being in the Ruby language, hopefully these changes to the linguist/languages.yml will correct this problem.
",175,"True","en",0
"1535",170,2,8,0,"Externals","johan","2013-02-25T06:50:44Z",8,0,1,263,"Pike is an object-oriented, interpreted programming language with a syntax similar to Java and C, high-level data types, automatic memory management, highly efficient string handling, easy to use APIs for network and database programming, and 18 years of active development behind it.

http://pike.ida.liu.se/
",310,"True","en",0
"1537",164,1,14,2,"Externals","michaelmior","2013-02-22T05:41:57Z",130,0,2,283,"I've tried to follow recent pull requests for this, but also adding accompanying unit tests. When trying to run the tests, I get the following error. Perhaps someone can point me in the right direction.

```
/home/mmior/apps/linguist/lib/linguist/language.rb:231:in `initialize': Awk is missing lexer (ArgumentError)
```
",321,"True","en",1
"1547",150,6,19,2,"Externals","lparenteau","2013-03-23T04:32:50Z",45791,34343,30,359,"This add detection for the M programming language (see https://en.wikipedia.org/wiki/MUMPS or the ISO/IEC standard of the language http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=29268).

I have successfully tested this using `bundle exec rake test`.

I have also called `bundle exec linguist` on all the projects hosted on GitHub which I know have M files (not .m files) in them, and they would now all be correctly categorized as M instead of Objective-C or Matlab :

```
90%  M
6%   C
3%   Objective-C
1%   Matlab
0%   Shell
0%   Assembly
0%   Python
```

I have also called `bundle exec linguist` on all the popular Objective-C projects found on GitHub (https://github.com/languages/Objective-C) with the following result :

```
62%  Objective-C
11%  C
10%  JavaScript
9%   Java
5%   Python
3%   C++
0%   PHP
0%   Shell
0%   C#
0%   Ruby
0%   Perl
0%   Lua
```

This patch clearly doesn't impact Objective-C detection based on defaulting to Objective-C for .m files.

This patch won't affect Matlab because Matlab's regex comes before the ones this patch is adding.
",1102,"True","en",0
