"","pull_request","number_of_commits","number_of_comments","number_of_reviews","user_type","user_login","merged_at","number_of_additions","number_of_deletions","number_of_files_changed","number_of_days","message","number_of_characters","second_line_is_blank","language","number_of_test_files"
"184",15498,7,6,0,"Externals","MoritzKn","2018-01-10T18:50:24Z",124,61,3,133,"### Description of the Change

* Some refactoring on the install script (mainly on the linux part) (1.-3. commit).
* Change the install script to create a separate installation for the dev channel (`atom-dev`) like it is already done for the beta channel (`atom-beta`) (4. commit).
* Change the way icons are handled in the xdg desktop file. This replaces the absolute path used previously with a icon name. The name will then be interpreted by the desktop environment, which in turn selects the icon from a icon theme. This is also how the desktop files in the dep and rpm packages already work. (5. commit).
* Change the install script to copy the application icons (in all resolutions) to the default icon theme. This is required to make to point above work when no alternative icon theme is used or the alternative icon theme does not provide an icon. (5. commit).

### Alternate Designs

None

### Why Should This Be In Core?

* Refactors core code.
* The beta channel is already installed in parallel so the dev channel should be too.
* The new way desktop files are handled is more ""linuxy"" and preferable as default.

### Benefits

* Cleaner code
* Allows all channels to be installed in parallel.
* Users are able to use alternative icon themes with atom; makes atom more hackable.
* The desktop environment gets to choose between different resolutions.
* Aligns the way the manually installed version behaves with the what is installed from a package.

### Possible Drawbacks

None known

### Applicable Issues

* Perhaps fix #12993 (icon scaling issue).
* Fixes icon behavior mentioned in #14480 (wrong icon path). This is fixed with the 2. commit and with the alternative design from the 5. commit.",1742,"True","en",0
"267",15081,1,13,7,"Externals","mortenpi","2017-12-18T00:52:21Z",9,3,1,146,"**What problems does this solve?** Let's assume I have two `$ATOM_HOME` directories `A/` and `B/`, with different packages, themes etc. Currently, if I start Atom in the following way

```bash
$ ATOM_HOME=A/ atom
$ ATOM_HOME=B/ atom
```
the second one opens up a new Atom window, but uses packages etc. from `A/`, which feels counter-intuitive. Instead I propose that instances would be per `$ATOM_HOME`. On Linux this can be achieved by having sockets be per-`$ATOM_HOME` it seems.

This would be helpful for IDEs (e.g. [Juno](http://junolab.org/)) which load a lot of IDE-specific features and UI components. With this PR you could simply have a `juno` ""executable"" that wraps around an existing Atom installation, but does not interfere with normal Atom usage:

```sh
#!/bin/sh
export ATOM_HOME=$HOME/.juno
exec atom $@
```

**How does it solve it?** This PR puts the socket into `$ATOM_HOME`, instead of `os.tmpdir()`.

I've been running `1.20.0-dev` with this change for a week or so now and it has been working fine so far. But I'm not sure whether this particular PR is the best solution.

Also, it is Linux-specifc (and macOS?). I can't test this on macOS, nor provide a solution for Windows. If someone could provide a more complete solution I'd be happy if this PR would be superseded.

**Drawbacks/alternatives.** I don't see this affecting normal Atom usage in any way.

In case sockets have to be under `os.tmpdir()` (due to potential filesystem permission issues or something like that?), then an alternative would be to have a `abspath(process.env.ATOM_HOME)`-dependent piece in the socket name, where `abspath` would resolve any relative paths etc.",1688,"True","en",0
"288",14931,8,21,2,"Externals","UziTech","2018-01-09T13:12:46Z",37,11,2,192,"### Description of the Change

adds an `atom.commands.onDidFinish` function that is called after commands actually finish.

This will require commands that are asynchronous to return a promise so onDidFinish can know when a command is still working asynchronously.

### Alternate Designs

This comes from trying to return a commands value in #14720 

I decided to go with a `did-finish` event to keep backwards compatibility and use the event emitter already attached to `atom.commands`

This event is emitted once `Promise.all` on the return values of the command listeners finishes. Therefore it will be emitted when all listeners are resolved or one listener is rejected. And only the dispatched event is provided. A couple things could be changed here:

- We could wait until all listeners are resolved or rejected.
- We could emit a different event if rejected.
- We could include the returned values of the commands.

### Why Should This Be In Core?

It requires changes to the command registry and package creators to return a promise if the command is async.

### Benefits

- Ability to tell when an async command actually finishes.
- Ability to dispatch commands in series.

### Possible Drawbacks

Package creators will need to come on board for this to be very usefull

### Applicable Issues

#13195
",1345,"True","en",0
"323",14654,2,2,0,"Externals","UziTech","2017-09-20T20:07:46Z",4,1,1,117,"### Description of the Change

Updated atom.confirm documentation to include what happens if dialog is closed without selecting an option

### Possible Drawbacks

I'm not 100% sure this is correct on all OSes 

I had to do quite a bit of experimentation on Windows to figure out all the edge cases.

Most of the information I got from the [dialog.showMessageBox](https://github.com/electron/electron/blob/master/docs/api/dialog.md#dialogshowmessageboxbrowserwindow-options-callback) documentation but there seems to be quite a few differences between Oses

<!-- What are the possible side-effects or negative impacts of the code change? -->
",654,"True","en",0
"332",14495,4,13,3,"Externals","warrenpnz","2017-09-12T18:32:42Z",41,5,5,116,"### Description of the Change

This change enables the maximum softWrapColumn in the display layer object to be set using a configuration parameter rather than using the MAX_SCREEN_LINE_LENGTH constant. This value is returned by the getSoftWrapColumn function.

The default and minimum is still set at 500 to satisfy the design decision to address performance issues for those opening minified files, however it can be adjusted upwards for those who require a more flexible option.

### Alternate Designs

As the getSoftWrapColumn function used a constant as the default return value, there are no alternate design options.

### Why Should This Be In Core?

This needs to be in core as it is affecting the editor display layer parameters directly 

### Benefits

Benefits are that the number of people who work with long line files that are not necessarily minified are able to customise their maximum width by the settings editor instead of using the constant value

### Possible Drawbacks

Possible drawbacks are that a user sets the width high enough to cause performance issues with minified files, however this can be mitigated by reverting the setting to defaults in the editor settings

### Applicable Issues

* https://discuss.atom.io/t/atom-editor-line-length-wraps-at-500-chars-on-1-15/40589/3
* https://discuss.atom.io/t/1-14-1-16-is-forcing-a-line-wrap-even-with-soft-wrap-toggled-off/41758/4
* https://discuss.atom.io/t/how-do-i-turn-off-soft-wrap/40417/11

Related to: https://github.com/atom/atom/pull/13820
",1552,"True","en",0
"460",13731,1,8,0,"Externals","Ingramz","2017-10-26T16:43:02Z",1,1,1,265,"Just a friendly reminder to occasionally update coffee-script.

Allows new syntax to be used and also provides better source maps.

After merging, make sure to clear compile-cache for updated source maps to take effect.

Changelogs can be found at http://coffeescript.org/#1.12.0 and then by scrolling up.",311,"True","en",0
"464",13691,21,10,9,"Externals","50Wliu","2017-05-31T01:17:08Z",197,186,33,126,"### Requirements

* Filling out the template is required. Any pull request that does not include enough information to be reviewed in a timely manner may be closed at the maintainers' discretion.
* All new code requires tests to ensure against regressions

### Description of the Change

Removes a restriction that prevented people from trying to build Atom using Node 7+.  Now that apm has been updated this should work again.
In addition, I fixed a potential bug where `stdout` was being declared as a constant but then being reassigned.  I'm not sure this would work; even if it did, it's best that it's rewritten to be a `let` instead.

### Alternate Designs

None.

### Why Should This Be In Core?

Already in core.

### Benefits

More supported Node versions when building.

### Possible Drawbacks

None.

### Applicable Issues

None.

If CI is green, I will revert the CI changes and :boat:.",928,"True","en",0
"487",13597,1,0,0,"Externals","Ingramz","2017-10-20T20:30:52Z",5,2,3,281,"When detecting grammar to use, the grammar scoring system's bundled/not bundled criteria should be lower priority than first line match. This would enable the use case where user installed grammar intentionally hands over the victory to bundled grammar based on first line match. If the two grammars were equal in terms of first line match, they would be still judged by bundled/non bundled, thus not breaking old intended behavior.

Cases where grammar relied on being a non bundled package, we'll have to at least copy the firstLineMatch of the bundled grammar or have a better one if the bundled package had one. This will be useful in the future nonetheless.

For more details, see https://github.com/atom/first-mate/issues/85",734,"True","en",0
"589",12946,2,2,0,"Externals","jamsinclair","2017-05-13T22:00:47Z",17,1,2,214,"## Bug

Fixes the bug described in issue #11848

![move-line-up-bug](https://cloud.githubusercontent.com/assets/5964236/19289643/31871060-9068-11e6-89ad-055e0d2bb5d5.gif)
## Fix

From what I explored it looks like a previous dev has tried to fix this bug. Although because rows are 0 indexed, to select the penultimate row for the range it requires using `-2`. 

I wonder whether it's worth rewriting the line:

``` coffeescript
lines += '\n' unless lines[lines.length - 1] is '\n'
```

I've attempted to add a valid test. Suggestions to improve or better represent the test welcome 😸 

![move-line-up-fix](https://cloud.githubusercontent.com/assets/5964236/19289650/3aee8e58-9068-11e6-8fc9-9066c1306ebb.gif)
",712,"True","en",0
"614",12783,2,3,0,"Externals","vedharish","2018-01-09T00:00:25Z",36,0,2,469,"Closes Issue #12744 

New behaviour can be seen from this screen cast

![screen cast](https://cloud.githubusercontent.com/assets/2497481/18846601/581b4bd6-8444-11e6-9b03-23ada04530af.gif)
",188,"True","en",0
"629",12696,250,83,0,"Externals","thomasjo","2017-05-19T11:38:22Z",8961,15463,88,245,"### Reported Issues

* [x] Object undefined errors from Electron https://github.com/atom/atom/pull/12696#issuecomment-261263408 and https://github.com/atom/atom/pull/12696#issuecomment-261527755
* [x] Default CSP changed, breaking file-icons and specs
* [x] `os.tmpDir()` deprecation warnings https://github.com/atom/atom/pull/12696#issuecomment-288871751
* [x] Drag image in `tree-view` incorrect (https://github.com/atom/tree-view/pull/1054)
* [x] Drop marker on `tabs` and `tree-view` missing (https://github.com/atom/tree-view/pull/1055, https://github.com/atom/tabs/pull/426)
* [x] Changes from https://github.com/atom/atom/pull/13795 cause exceptions in minimap (https://github.com/atom-minimap/minimap/pull/582)
* [x] Dragging pane items between docks mistakenly shows drop indicators due to new security constraints for the `dragover` event `dataTransfer` object (https://github.com/atom/tabs/pull/437)
* [x] Developer tools stop updating after reloading a window in dev mode
* [x] Issues folding soft-wrapped lines https://github.com/atom/atom/pull/12696#issuecomment-301161445
* [x] Dev tools reload exception (https://github.com/atom/atom/pull/12696#issuecomment-301207979, filed a bug for this in https://github.com/electron/electron/issues/9493)
* [x] Dev tools reload crash (end of https://github.com/atom/atom/pull/12696#issuecomment-301207979, filed a bug for this in https://github.com/electron/electron/issues/9493)
* [ ] White flash when hiding toolbar https://github.com/atom/atom/pull/12696#issuecomment-301182375
* [ ] Warnings from tree-view https://github.com/atom/atom/pull/12696#issuecomment-301208739
* [ ] Consistently crashing when continuing from a devtools breakpoint (filed a bug for this in https://github.com/electron/electron/issues/9078)

Reported issues resolved by #13880:

* [x] Scrollbars misbehaving on first file that is opened/restored https://github.com/atom/atom/pull/12696#issuecomment-251299649
* [x] Shift-scrolling scrolls vertically instead
* [x] Failing `spec/text-editor-component-spec.js` tests

---

During my initial testing on macOS 10.12, this seems to be working. Haven't noticed any regressions.
Would be great if more folks could give this a spin 🙇

/cc @atom/maintainers 

---

Fixes #11692 
Resolves #12690
Fixes #8006
Fixes #12832 
Fixes #13767 
Fixes #4084 (Will be fixed by the editor rendering rewrite)
Fixes #13265 (Will be fixed by the editor rendering rewrite)",2470,"True","en",1
"662",12545,3,2,2,"Externals","yuanwhy","2017-01-09T19:29:43Z",4,0,2,133,"Fixes https://github.com/atom/atom/issues/12495

When we add or remove project folder,  the window's current project path will be changed, then ""initialPaths"" will be reloaded, it is the best time to save state

/cc @maxbrunsfeld @lee-dohm 
",241,"True","en",0
"762",11852,8,16,0,"Externals","MikeInnes","2016-12-12T17:51:07Z",64,18,4,199,"Right now overlays will often move up and down as you scroll, attempting to stay within the editor view. This makes sense for autocomplete, but less sense for things like annotations in code (see e.g. Ink, Hydrogen packages). Indeed in these cases the jumpiness feels very unstable.

So I added a simple option which turns it off. The name could probably do with refinement.

Edit: [more helpful diff](https://github.com/atom/atom/pull/11852/files?w=0). Also, same testing concern as #11864.
",492,"True","en",0
"774",11803,1,2,0,"Externals","lexicalunit","2017-03-13T21:46:51Z",11,5,2,296,"Following a call to `replaceSelectedText()`, the previous selected text range is not necessarily still relevant as that text has been replaced. The newly inserted text can possibly have a totally different range. Use the range of the newly inserted text as the final selection range.
",284,"True","en",0
"813",11541,3,6,4,"Externals","BrainCrumbz","2016-10-31T17:05:35Z",13,0,1,194,"Comments came out while discussing issue #11137
",48,"True","en",0
"839",11399,43,44,15,"Internals","BinaryMuse","2017-10-17T23:29:28Z",475,18,15,558,"See update below: https://github.com/atom/atom/pull/11399#issuecomment-330396536

---

This PR implements the `MessageRegistry`, which is similar to the `CommandRegistry` in that it maps string types of some kind to callback functions, but it differs in that messages originate from outside the application via `atom://` URIs handled via [the `open-url` event](http://electron.atom.io/docs/v0.37.4/api/app/#event-open-url-os-x).

This partially implements https://github.com/atom/atom/issues/5262, provides a mechanism for hitting things like https://github.com/atom/settings-view/pull/614 from outside the application (e.g. ""View in Atom"" links on package pages on the Atom site), and would enable package authors to implement things like https://github.com/atom/atom/issues/2037 for external debuggers, etc.

There is still some additional work to do around registering Atom as a system-level handler for `atom://` URIs on non-Mac systems, but that probably will be installer-based work.

/cc @atom/core @atom/feedback for review. Some open questions I have are:
- I restricted messages to URIs starting with `atom://atom` as we already [have a mechanism that utilizes URIs with hosts that match package names](https://github.com/atom/atom/blob/822e0c95108aadb91631570e386d8cf96d7cfdd0/src/browser/atom-application.coffee#L550-L557) to perform some work. (What is this used for? I'm not familiar with it.) I'd love to get rid of this, as it means we can't use any host that might match a package name. If anyone has bright ideas for URI schemes, that'd be awesome. (I thought maybe something like `atom://.message/...`?)
- Right now, the callback function is called with the string message (just the `namespace:name` portion) and the params, but maybe it makes more sense to pass the entire URI, or the parsed URI object.
",1837,"True","en",1
"842",11388,1,10,0,"Externals","ypresto","2016-08-06T13:07:30Z",12,0,2,121,"https://github.com/atom/atom/issues/8295#issuecomment-206484993
",64,"True","en",0
"864",11284,1,2,0,"Externals","jonmast","2016-08-06T16:06:34Z",1,1,1,133,"The desktop entry specification states that %U is for URLs and %F is for
files. Since atom doesn't support URLs, we should use %F. Fixes #2320.
",144,"False","en",0
"873",11216,1,2,0,"Externals","ypresto","2016-07-25T17:29:35Z",4,3,1,127,"When config.setDefaults() is called ""did-change"" event emitted per one config key.
This hits performance when package has large set of default configs (like [atom-beautify](https://github.com/Glavin001/atom-beautify/issues/679).

Without transact: 

<img width=""637"" alt=""2016-03-20 1 29 10"" src=""https://cloud.githubusercontent.com/assets/400558/13903054/ab40c602-eeac-11e5-807b-953c18cbdded.png"">

With transact:

<img width=""641"" alt=""2016-03-20 14 47 49"" src=""https://cloud.githubusercontent.com/assets/400558/13903071/1def58bc-eead-11e5-8cd7-5394d0ee017a.png"">

Thanks!
",575,"False","en",0
"953",10748,1,0,0,"Internals","lee-dohm","2016-09-29T19:10:51Z",1,1,1,232,"Ultimately we should add some stuff to the Flight Manual about file globs in various places in Atom. I just wanted to get something in place for now because of:

https://discuss.atom.io/t/tree-view-not-ignoring-ignored-names-names/25258
",237,"True","en",0
"1051",9748,2,5,0,"Externals","fscherwi","2016-05-05T21:48:48Z",1,1,1,165,"Upgrade pathwatcher, which has no API-changes and better support for UNIX-like systems!
",88,"True","en",0
"1066",9642,4,3,0,"Externals","colllin","2016-03-01T03:32:49Z",28,5,2,104,"Before:

![before](https://cloud.githubusercontent.com/assets/185923/11204338/0318921e-8cbb-11e5-824c-39e1c72b3a8e.gif)

After:

![after](https://cloud.githubusercontent.com/assets/185923/11204340/09fa03b0-8cbb-11e5-8423-26c2dc6279e6.gif)
",239,"True","en",0
"1076",9554,4,24,17,"Externals","didrocks","2016-04-06T20:29:32Z",105,6,6,145,"Now that Atom has a relocable/portable config directories and different channels, it makes sense to have a way to distribute an archive on Linux (as suggested on bug #7102) containing latest available code for each channels.

This has two advantages:
- this will enable (in a later step) to enable auto-upgrade to follow multiple channels (optionally in parallel in different directories). We can even think giving a way for people to switch between channels as needed (given the user config stay backward compatible). I'm happy to work on those 2 problematics after/if this PR is merged at some point.
- if all dependencies are installed in the distribution, the atom installation is then just a question of extracting an archive, requiring non root permission contrary to the .deb or .rpm packages.

We can then integrate this archive to be downloaded to some tools like Ubuntu Make (https://github.com/ubuntu/ubuntu-make/issues/6).

We generate a .tar.gz compressed archive (we could switch to a more performant .tar.xz, but the first format is more widespread and usual). I did add the `mktar` to the `CI task` (I saw the rpm wasn't in there, so I guess, it's only running on an Ubuntu machine) and tested it. I did add the task as well to `upload-assets`, but of course, I couldn't test it ;) The changes there are though minimal, but I can modify what's necessary as needed.

As _version_ contains _upstream version + channel name_, I didn't change anything in the naming of the archive publication, and the folder in archive contains thus an uniquely defined build.

Of course, the resulting archive is linked against the libraries available in the builder version. mktar is run where the .deb is built, which is, I guess, the latest ubuntu LTS. I tried the built archive on 14.04 LTS, 15.04, 15.10 and xenial (dev version), and everything is working as expected. If this doesn't work on other distros (which, looking at the deps, seems unlikely and we already only have one deb for debian/ubuntu and one rpm for fedora/opensuse…), we can build multiple archives. But I propose we starts with this one.

I'm happy to do any changes that you feel are necessary!
",2170,"True","en",0
"1122",9198,2,22,0,"Externals","alexchandel","2016-02-10T19:53:54Z",10,1,2,115,"Fixes #8261 
Fixes #9147
",25,"False","en",0
"1177",8793,1,0,0,"Externals","BrainCrumbz","2016-03-11T19:38:06Z",59,32,1,178,"",0,"False","en",0
"1320",7953,4,46,6,"Externals","acontreras89","2016-02-09T01:51:16Z",231,29,13,206,"**Updated** as of Feb 2016 (see discussion below):
Improve multi-pane API to allow creating empty panes, as well as moving or copying files among them. 
Addresses #4738.
- [x] Add an option (namely `moveActiveItem`) to `Pane::split`, allowing to move the active item when splitting, instead of copying it
- [x] Rewrite `pane:split-<direction>` commands to create empty panes
- [x] Add `pane:split-<direction>-and-<action>-active-item` commands, to achieve original behaviour of the split commands and, alternatively, move the current item instead of copying it
- [x] Add `window:<action>-active-item-to-pane-<direction'>` to allow moving and copying files between panes

Where
- `<direction>` is either `up`, `down`, `right` or `left`
- `<action>` is either `copy` or `move`
- `<direction'>` is either `above`, `below`, `on-right` or `on-left`

Behavior for current key bindings is kept. For example, <kbd>cmd-k left</kbd> (<kbd>ctrl-k left</kbd>) will now trigger `pane:split-left-and-copy-active-item` instead of `pane:split-left`.
",1034,"False","en",0
"1324",7916,1,10,0,"Externals","oggy","2016-01-26T22:45:00Z",44,3,2,195,"The ""enum"" property may now specify options as a list of [value,
description] pairs.

This goes with atom/settings-view#589.
",125,"False","en",0
"1508",6631,17,23,2,"Externals","mnquintana","2016-03-31T05:30:19Z",203,0,9,332,"_See https://discuss.atom.io/t/shift-selection-by-column/16545?u=mnquintana for more background_

![screencap1](https://cloud.githubusercontent.com/assets/823545/7448891/7c64c1ea-f1f4-11e4-94bf-dfbaab1a5ee6.gif)

This adds the column-equivalent of `TextEditor::moveLineUp()` and `TextEditor::moveLineDown()` - instead of moving a line up or down, these commands move any active selections left or right by one column. This is especially useful if you're refactoring / generally trying to clean up your code.

TODO:
- [x] Add keybindings for Linux and Windows (anyone have any suggestions for good keybindings for this?)
- [x] Consider renaming commands? (Is Move Selection Left / Right too vague?)
- [x] Fix case when moving multiple one-line selections to either the beginning or end of the line

Shoutout to @lee-dohm for helping with the implementation :wave: 

/cc @atom/feedback 
",885,"True","en",0
"1648",5806,2,6,0,"Externals","dsandstrom","2015-07-01T17:47:35Z",386,0,8,121,"Add commands for moving, selecting, and deleting camelCase words.

Fixes #1982 and an alternative to #3961. Also, hopefully can used with atom/vim-mode#377.

Replaces #4429.
",174,"True","en",0
