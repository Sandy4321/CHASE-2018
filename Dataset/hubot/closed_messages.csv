1418,,0,False,en
1415,,0,False,en
1378,"This PR will address several issues in hubot v3 script loading.

1. Can't parse documentation in js files #1375 
2. Can't load coffee script files (to support legacy scripts) #1376
3. Warnings are misleading and some errors silent #1377
3. Can't process es6 exports #1374 

Currently just adds failing tests for #1375 ",26,True,en
1370,"Resubmitting PR #1339 with middleware.execute returning promise allowing async response methods - for v2 hubots, another PR coming for v3",6,False,en
1367,"Began to make slight white-space consistency changes, making code more readable.",0,False,en
1366,"I started this as part of https://github.com/hubotio/evolution/pull/3 . The idea is to make the `Robot` a little easier to construct, so you don't have extra parameters that are unused/null (`adapterPath`), or boolean (`httpd`):

```javascript
// before
robot = new Hubot.Robot(null, 'shell', true, '/')

// after
robot = new Hubot.Robot({adapter: 'shell',  alias: '/'})
```

I updated `Robot` to take just the one `params`. It still works in the old way, but uses [depd](https://github.com/dougwilson/nodejs-depd) to print a deprecation warning. I'm open to just logging a message, but I was looking for something with decent output, and included line information. I was also thinking it'd make sense to have an 'upgrading' guide, that talks about specific things that need to be fixed, like this, and the deprecation could link back to it somehow.

I also deprecated `Hubot.loadBot` in favor of the constructor, since it doesn't seem to be doing a whole lot except constructing a bot. I could remove that if it it seems like that would be problematic.

TODO

- [x] write a test for using the old constructor arguments
- [ ] fix coveralls failure (probably addressed by the above?)
- [ ] cleanup commit history so semantic-release will like it",1,True,en
1342,"â€¦ctor.

Fixes #1297 ",4,True,bn
1339,"Fixes #1338 
Related #1279

Needs help / feedback...
- The sinon fake timers don't seem to effect setTimeout, so it's actually taking the full half second to run the tests.
- How should I reject the promise if the middleware is cancelled or throws?
- I can change inline comments with new return values, but how should I update published docs?",8,False,en
1325,tiny fix noticed on issue #1294 ,4,False,en
1319,Add a third party adapter for the DC / DCPP / ADC Protocol.,0,False,en
1303,"Sometimes the default 1mb limit on json body is not enough. 
Adding the option to overide default by setting env variable `EXPRESS_REQUEST_SIZE`",1,False,en
1276,,0,False,en
1275,,0,False,en
1274,,0,False,en
1273,use ejs view engine to render pages as response.,0,False,en
1268,,0,False,en
1267,Unauthorized,0,False,fr
1266,Unauthorized,0,False,fr
1265,Unauthorized ,0,False,fr
1264,Unacceptable,0,False,es
1263,Unauthorized ,0,False,fr
1256,"make it look like a typical license file without extension
",0,True,en
1239,"Makes logs easier to read, more consistent with npm logs for shell debugging.
Date formats are localised and styles allow more obvious log level and separation of headers/prefix/message from a glance.

Could also be extended to log [error stacks](https://github.com/npm/npmlog/blob/master/example.js#L34-L37) from within hubot for more transparent debugging of external script functions.

![screenshot 2016-09-21 17 33 29](https://cloud.githubusercontent.com/assets/1774379/18702111/860b44e4-8023-11e6-96ed-9c8333cd9815.png)
",57,False,en
1228,"Updating the adapter list as per https://github.com/github/hubot/issues/1216
",4,True,en
1225,,0,False,en
1222,,0,False,en
1221,"pull request for #1219 issue
",4,True,en
1215,"Hello,

By this PR 'm trying to resolve #1207.

regards,
",4,True,en
1206,,0,False,en
1203,"It changes to work on the web site, too. Currently, you get 404 error.
https://hubot.github.com/docs/deploying/azure/

The bug included PR
#1148

Add more information to install coffee-script package for azure
",7,False,en
1202,"Since Node current version is 6 I changed travis to test this version instead of node 5
",2,True,en
1200,"Hello I'm a developer of https://github.com/ivadim/hubot-skypebots adapter for Skype. 
This adapter is using new Bots API provided by Skype (http://blogs.skype.com/2016/03/30/skype-bots-preview-comes-to-consumers-and-developers/).
",8,False,en
1197,,0,False,en
1196,"I fixed a broken link on the deploying to hubot page.  The link to ""Getting Started"" results in a 404.  I've updated it to point to the /docs/index.md page.
",3,True,en
1188,"`userForFuzzyName` doesn't seem to exist in `brain.coffee`.
What does exist are:
`usersForFuzzyName` (note plural) and `usersForRawFuzzyName`

Update docs accordingly.
",0,False,en
1174,"This is just an early PR to see what kind of appetite there is for this change. We've got some Hubot scripts which make use of `async`/`await` [via Babel](https://babeljs.io/docs/plugins/transform-async-to-generator/). It keeps things fairly readable while we do stuff like make API calls.

Here's a simplified example (please excuse the JS and any CS weirdness... I rarely write CS!):

``` js
// test.js

module.exports = function(robot){
  robot.respond(/test/i, async function(msg){
    msg.send('starting');
    await delay(1000);
    msg.send('ending');
  });
};

function delay(ms) {
  return new Promise(function(resolve){
    setTimeout(resolve, ms);
  });
}
```

And an example test script that uses [hubot-test-helper](https://github.com/mtsmfm/hubot-test-helper):

``` js
// test.spec.js

import Helper from 'hubot-test-helper';

const helper = new Helper('./test.js');

describe('test script', function(){
  it('should complete', async function(){
    const room = helper.createRoom();
    await room.user.say('seinfeld', '@hubot test');
    expect(room.messages).to.deep.eq([
      ['seinfeld', '@hubot test'],
      ['hubot', 'starting'],
      ['hubot', 'ending']
    ]);
    room.destroy();
  });
});
```

Currently the above test fails, since the `ending` message is not received before the test finishes. [On closer inspection](https://github.com/github/hubot/blob/master/src/listener.coffee#L62), this appears to be due to the `listener` not handling callbacks that return promises.

One way to fix things is to update the `listener` as per this PR, but is this worth progressing further?
",6,True,en
1171,,0,False,en
1164,"Recreate a new PR based on this [PR](https://github.com/github/hubot/pull/744).

cc @technicalpickles 
",3,True,en
1162,"- migrate user.coffee to es6
- introduce babel to compile it.
- add npm build scripts to put compiled file into dist/ folder
- fix the require path of modules
",1,False,en
1155,,0,False,en
1154,"Adding node-env-file to bin/hubot so it can read standard node .env files 
Reference:  issue #1153 

If someone can suggest where this should be documented I will add documentation changes to pull request.
",4,False,en
1142,"Update a link in custom listeners section that points to design patterns document
",0,True,en
1136,"I have created a PowerShell Module called `PoshHubot` which handles the full installation and configuration of Hubot on Windows, including running it in the background using [forever](https://www.npmjs.com/package/forever).
",0,True,en
1134,"Refactor `robot` into four files:
- A very basic robot class which manages the running of middleware, the event emitter, and other core functionality;
- One class subclasses the base robot class and provides autoloading scripts, ""help"" documentation, and auto-starting an express server;
- express.coffee, which contains functionality to create the web server
- scopedHTTPClient.coffee, which contains functionality for `robot.http`

**There should be no user-facing changes to how hubot works**. bin/hubot works as normal; http servers, aliases, etc use the same defaults as before. (It does expose a `setupRouter` function, but that functionality already existed by overwriting `@router` anyways.)

The purpose of this is so that one can use the ""basebot"" for all of hubot's functionality, without having to also require autoloading of files. For example, one may want to precompile hubot + scripts into a single, dead-code-eliminated javascript file for lower memory usage and startup time (which is my particular usecase- precompile the coffeescript.) Or, maybe you want a client-side hubot loaded because you're a mad genius doing crazy things. _many possibilities._

We could also call basebot ""batteries"" or something clever.

<3 hubot is the best
",1,False,en
1128,"Hey, I'm the author of [babel-hubot](https://github.com/kossnocorp/babel-hubot), minimalistic Hubot wrapper that allows to use Babel to compile scripts written in JS.

Prior to Babel 6, integration was super simple:

``` diff
--- a/bin/hubot
+++ b/bin/hubot
@@ -3,4 +3,4 @@
 npm install
 export PATH=""node_modules/.bin:node_modules/hubot/node_modules/.bin:$PATH""

-exec node_modules/.bin/hubot ""$@""
+exec node_modules/.bin/babel-hubot ""$@""
```

Unfortunately in 6th version, Babel [changed the way how `export default` is handled](http://stackoverflow.com/questions/33505992/babel-6-changes-how-it-exports-default), so now:

``` js
export default function() {}
```

... is not equal to:

``` js
module.exports = function() {}
```

... but to:

``` js
module.exports = {default: function() {}}
```

To make it work properly I had to change Hubot itself and check if `script.default` is a function and then use it instead of `script`.
",15,True,en
1127,"# Conflicts:
# src/robot.coffee
",0,False,en
1115,"Second implementation for #1093 (first was #1104); this pull request adds a `changeName` method to Robot to change its name at runtime. It updates the name and the `respond` listeners.
It reconstructs listeners using `respondPattern`. The original regex are saved in the `RespondListener` objects.

Should `respond` also notify the `@adapter` of the name change? (I suppose the server, too, needs to change the bot's name.)
<br>

My use case for this has to do with IRC. Under certain conditions, Hubot can be assigned an alternate nickname when connecting to the server. I'd like to be able to reassign the primary name when it becomes possible, without restarting Hubot.
I imagine this could prove useful in other situations.
<br>

From the first pull request (#1104):

> If people change the name, do you think they'd want to change the alias too?

I can't think of a case where the alias would need to be changed regularly, but maybe that should be possible, at least to be consistent.

> I'd also wonder if there's any caveats to supporting this. Imagine I'm talking to hubot in one room, and someone changes the name somewhere else. I'd expect hubot to still be respond, but it'd start silently ignoring me until I found the new name.

Maybe Hubot could announce his new name?
<br>

Note: I haven't updated `scripting.md` yet.
",12,False,en
1110,"Once I got https://github.com/github/hubot/pull/1109 working in a single file, started to pick at some of the API that didn't feel great:
- `Robot` constructor has positional arguments, which means they don't make much sense when you are looking at `new Hubot.Robot(null, 'shell', false, 'Hubot', '/')`
- `adapter` is loaded at Robot construction time. the `loadAdapter` is just a wrapper around loading a builtin adapter vs a npm module
- `loadAdapter` expects an adapter's exports to define a `use` method, and in reality, that seems to only ever return a new instance of the adapter that takes a robot. Why not construct this directly?
- loading an npm script package looks weird. we require it only to call it with the robot. this is the problem of the script API exporting a function though

What this does so far:
- constructor can now be called without any args
- update builtin adapter to export the adapter class, and make those accessible from top-level `require 'hubot'`
- don't load adapter if one wasn't given (in the case of constructor without any arg)
- add `loadScriptPackage` helper, which reads a little better but doesn't do much

Some open-ended questions / problems:
- making sure to preserve backwards compatibility
- handling environment specific configuration. should you hard-code name, alias, etc? environment variable? assign from an environment variable? should there be like a `config/environments.coffee` like Rails has, and `config/environments/development.coffee` for dev, `config/environments/production.coffee` for production, etc?
- does this make it easier to test? harder?
- does `bin/hubot` need to exist? does it need to support a programatic launch, or do you only use progmatic launch OR bin/hubot?

cc https://github.com/github/hubot/issues/858
",7,False,en
1104,"First implementation for #1093, this pull request adds a `changeName` to Robot to change its name at runtime. It updates the name and the `respond` listeners.
It replaces the beginning of listeners' regular expressions, which contains the name of the robot, instead of reconstructing them.

I'm not a big fan of this piece of code because it shares a lot with `respondPattern` and, it depends heavily on the `respond` regex.
An alternate solution is to reconstruct regular expressions using `respondPattern`. This strategy would, however, require to save the original regex (the message part that follows the robot's name/alias) in the TextListener object.
",4,False,en
1091,"# Conflicts:
# src/robot.coffee
",0,False,en
1090,"Include [Mattermost](mattermost.org) Hubot adapter in the list
",0,True,en
1073,"This should fix issue #919 where hubot reloads scripts
each time the adapter emits `'connected'`

Because some adapters handle retries for lost connections, they
may emit such an event many times. However hubot should not load
scripts more than once.

No tests added, `bin/hubot` is hardly testable and the modification
does not break any existing test
",3,False,en
1066,"#1064
",4,True,en
1065,"Fixes #1064 
",4,True,en
1056,"Hello,

I modified the express middleware that is used in custom HTTP listeners (routers) so that a hubot user can access the actual body of the request as a string object. 

The need for this is described in #923 . It's probably impossible to access the unprocessed body without monkey-patching hubot itself.

I need this for validating github webhooks that use HMAC.
I added an example in the documentation how to do this.

Accessing the body in express 3.x and testing middlewares is hard. After trying different approaches I decided to implement this solution: http://stackoverflow.com/a/26634372/807339 .

Mocha has a hard time detecting assert errors inside routers in the test cases. Therefore I had to rethrow them in the test context/namespace.
",18,True,en
1054,"It's currently pointing to https://hubot.github.com/docs/deploying/index/ (which is a 404)
",3,True,en
1050,"Added node v4 and node v0.12, removed  node v0.11
",7,True,en
1048,"This PR adds `robot.listenerOptions metadataItem: true`. All listeners defined in a file after this call will extend this metadata rather than start from scratch. You can now do something like this:

``` coffeescript
module.exports = (robot) ->
  robot.listenerOptions annoying: true
  robot.respond /annoy me/, (msg) ->
    # code to annoy someone. This listener will have annoying: true as its
    # metadata.

  robot.respond /unannoy me/, annoying: false, (msg) ->
    # Code to stop annoying someone. This lisenter will have annoying: false
    # as its metadata
```

@technicalpickles and I are running through a large existing codebase and found a few users for this. Some files have a lot of functions, and adding something like `deployment: true` to tag all commands related to deployment is pretty tedious and not very helpful. We're also enabling commands 1-by-1 for a new chat service after an audit, and adding `fooEnabled:` to every single command we have is getting ridiculous, and will result in a lot of diff churn when it's time to pull them out.

cc @michaelansel 
",2,True,en
1043,,0,False,en
1031,"Solves the last need required for a couple issues:
https://github.com/github/hubot/issues/823#issuecomment-73999270
https://github.com/github/hubot/pull/686#issuecomment-74805659

Allows retrieving the named Listener object for unit testing or advanced scripting.
",22,False,en
1029,"Introduced in 1e4ae576aa6fbcade3cd7204a6102e6ddbfca4c7 for no apparent reason. Given the amount of refactoring that has occurred to move each class into its own file, this should be completely unnecessary now.
",18,True,en
1025,"â€¦on instance property

The parseHelp method already stores scriptDocumentation in a hash but does absolutely nothing with it. This mod pushes the stored documentation to an accessible @scriptDocumentation property so that other modules/scripts can make use of it (see https://www.npmjs.com/package/hubot-advanced-help, for example, which is a module I wrote that assumes this property exists). In the absence of this property, I'm going to have to resort to opening sibling scripts and parsing in the documentation even though the robot.coffee script already does that (it just does nothing with the data).

cc @imperialwicket @nealfax
",0,True,en
1000,,0,False,en
996,"This PR is only to start a discussion, with the new Telegram bot API (https://github.com/lukefx/hubot-telegram) I've done an adapter to interact with the Telegram IM app, It's mainly used on mobile devices and it's possible to send and receive images.

At the moment it's not possible to do so with Hubot, you could send back and URL and usually the chat service will expand it to show the image.

Could we add the ability to do it natively? I've attached a proposal that works from my fork, but I would like to see what you think about it.

Example of scripts that reply with an image:

```
robot.respond /image me (.*)/i, (msg) ->
   msg.sendImage get_random_image(), caption
```
",0,True,en
994,,0,False,en
958,"The documentation link at the end of the file is broken. Points to development as a directory instead of development.md file. Pull corrects this.
",0,True,en
949,"Hubot is a plugin/adaptor framework that hosts them as node modules.
Those modules have their own dependencies versions. By depending on
types rather than interfaces, you run into the exact issue caused by
peerDependency explained [here](https://github.com/npm/npm/issues/5080)
",4,False,en
943,,0,False,en
937,,0,False,en
936,"With this modification the external scripts commands are parsed and added to the hubot-help output.
",0,True,en
933,,0,False,en
930,,0,False,en
924,"Hooks

This is a work-in-progress. I'm opening it early, because there's several parts I'd like feedback on.

This is inspired heavily by @michaelansel's work over in https://github.com/github/hubot/pull/803. We have been abusing `robot.respond /.*/` quite a bit in order to accomplish similar goals, and that pull was eye-opening. This pull does not include an equivalent of the listener metadata from that pull, because that pull does it so elegantly it does not seem worthwhile to revisit. We should get that into master no matter what.

The middleware itself, however, was a little uncomfortable for a few of our use cases. I played around with it and implemented a few things and came up with these issues:
- They only apply to one phase of a message, ""when a listener has matched."" I found distinct use cases for at least 3 places (read on).
- The name 'middleware' has a lot of context from its use in e.g. express, but these do a different thing. They don't have access to responses, for example, and an incoming message can create several responses. It's a hook, not a middleware.
- It makes listeners async. This complicates testing and would be breaking the API enough that I think it would require calling it 3.0.
- It added a dependency, and I always want to examine that closely.

This pull adds support for 3 hooks: `prereceive`, `prelisten`, and `prereply`. They run before any listeners have executed, before an individual listener executes, and before any message is sent, respectively.

An example of a `prereceive` hook that blacklists a room but for certain users:

``` coffeescript
  robot.prereceive (hook) ->
    if blacklistedRoom(hook.message) && !whitelistedUser(hook.message)
      if hook.message.text.match(/^(\/|hubot)/) # if the message starts with / or 'hubot'
        hook.response.reply ""I'm sorry, but I'm configured to ignore commands from this room.""
      # But ignore everything, even hear commands.
      hook.finish()
```

An example of a `prelisten` hook, taken from #803. It assumes the listener middleware, which is not in this pull:

``` coffeescript
 # node-statsd like interface
  stats =
    increment: (key) ->
      console.log ""#{key}:1|c""
      # noop
robot.prelisten (hook) ->
    listenerId = hook.listener.options?.id
    if listenerId?
      stats.increment ""hubot.listeners.total.#{listenerId}""
      if hook.response.message.user?.name?
        stats.increment ""hubot.listeners.by_user.#{hook.response.message.user.name}.#{listenerId}""
      if hook.response.message.user?.room?
        stats.increment ""hubot.listeners.by_room.#{hook.response.message.user.room}.#{listenerId}""
```

An example of a `prereply` hook. This prevents sending a message that matches `/passwords/`:

``` coffeescript
robot.prereply (hook) ->
  if hook.reply.text.match(/passwords/)
    hook.finish()
```

And this changes the outgoing message:

``` coffeescript
robot.prereply (hook) ->
  if hook.reply.text.match(/passwords/)
    hook.reply.text = ""Sorry meatbag, no passwords.""
```

I am pretty happy with the hook API as used, but I still need to do some more testing. I'm very interested in feedback, though.

I'm less happy with what happened in the guts. There are a few cases where things could be cleaned up internally if we refactored a few things. For example, `Response`s don't know about their `Listener`s, so a `prereceive` hook constructor needs a response, likewise a `prelistener` and its `Listener`. So the Hook API needs to handle both, but if responses had an when a smarter API might let it handle them a little more elegantly. If we like this direction, this pull would get a bit bigger as I did some reworking internally.

cc @technicalpickles 
",11,True,en
922,"Matches search query against all properties of users.

Very useful as universal search via email/mobile/ext/etc.. when your Hubot
knows more about the users than just name and id.
",0,True,en
921,"I have added `robot.once` function.

[events.once](https://nodejs.org/api/events.html#events_emitter_once_event_listener) is useful for handling one time event.
It is available at [node v0.3.0](https://nodejs.org/docs/v0.3.0/api.html)
",6,True,en
920,"Figured I should fix it after the third time I clicked on it.
",0,True,en
917,"This changes @commands from [] â†’ {} which keeps track of each script
as they are loaded. Then `helpCommands` returns an array after calling
sort() on the commands of each script, rather than all scripts at once.

Note that this means that the command `hubot help <TERM>` will show
commands sorted by script still, since the filtering is done in the help
script. A simple solution would be to have the help scripts call sort()
after filtering, but this, of course, wouldn't be applied to existing
installations.
",0,False,en
911,"The deploying docs for Heroku, Unix and Windows were pointing to a folder instead of the markdown files. This pull request fixes them.
",0,True,en
910,"Clicking these links on master are broken, but the docs they meant to refer to are in /docs/deploying but only the extensions (.md) were missing. They are fixed now, and the links would work routing to the appropriate doc sheet.
",0,True,en
909,"Clicking these links on master are broken, but the docs they meant to refer to are in /docs/deploying but only the extensions (.md) were missing. They are fixed now, and the links would work routing to the appropriate doc sheet.
",0,True,en
900,"Previously, if an adapter failed to load due to a syntax error, the location of the syntax error in the file was not specified. (This made for difficult debugging when writing a new adapter)
Now, the message is a descriptive:
`ERROR Unable to load adapter hubot-github-adapter(17,82) : Error: unexpected ,`
Line numbers are similarly made available when loading scripts (if available).
",4,False,en
897,"https://github.com/github/hubot/issues/894
",3,True,en
893,"fixed links
",0,True,en
890,"Fixing broken link in docs
",0,True,nl
871,"Lots of new tests and refactoring to eventually add Robot#eavesdrop and fix #866.

Each commit should be able to stand alone (all tests passing), refactor commits don't touch code and tests at the same time, and new tests were added first to cover all areas being modified.

`TextListener` was removed in favor of a common pattern of putting all matcher logic in Robot instead of some in Robot and some in a subclass of Listener.

This also introduces Robot#listen as a new public method.
",3,True,en
868,"Closes #683

Adds a new listener type that responds to messages that were addressed to the robot and didn't match any other (non-catch-all) listeners. More details in the docs.
",3,True,en
863,"CoffeeScript 1.9.0 came out Jan 29, 2015.  We are using 1.6.3 which is from Jun 2, 2013 and is quite old.

Some new features that I would like to use while building scripts are the 

[Splat Expansions:](https://github.com/jashkenas/coffeescript/blob/1.9.0/test/arrays.coffee#L62-L71)

``` coffeescript
    [.., rel] = link.match /rel=""(\w+)""/
```

I can't currently do this with coffee-script 1.6.3.

This is my first fix for hubot, so I'm not 100% sure on the procedure.  I saw a test folder, but not sure how to interact with the tests.  The only test that I did run was my script and it worked.  I also ran `script/smoke-test` and nothing blew up.
",30,True,en
861,"Hi _guys_, :smile:

I renamed the **Licence file** to a `.md` file. :name_badge:
Now it looks better and similar like the `README.md` file.

Yours,
[**SuriyaaKudo**](https://github.com/SuriyaaKudoIsc) :octocat:
",0,True,en
860,"Update year License and add License link in README.md
",0,True,en
841,"I just made a couple tweaks on top of what @technicalpickles did in the [`testing`](https://github.com/github/hubot/tree/testing) branch... not full coverage by any means, but it's a start.
",0,True,en
821,"I love hubot, but I don't really feel like I have a relationship with him. I'm sure, with all the things he's seen on the internet he has stories to tell. I'm sure he wishes he could get to know meâ€¦Â to ask _me_ questions for a changeâ€¦Â to judge my life choices rather than just me judging his.

![demo](https://cloud.githubusercontent.com/assets/72919/5151440/ec53edb0-7192-11e4-86af-d55e696a3cfb.gif)

I took this project on mainly just because I wanted to see if I could do it. I'm fairly sure there's a better way to do this, but _it works_. If this is on the right track and can be made to work with some tweaking, I'd love to see it merged. I'm also happy to rewrite based on advice for a different approach if that's plausible. And if this piques someone's interest to it a better way themselves, I'm happy just seeing the feature make it whether it's me that creates it or not.

One change that probably needs to be made is to fix it so it _only_ works when you address hubot directly. Currently he just listens to anything you say while a conversation is active with him, which could lead to some issues if trying to talk to coworkers and hubot simultaneously. Think: accidentally deploying your lunch plans to production. I'm not sure the best way to do that, which is what leads me to believe there's a better way to do all of this.

Any pointers would be appreciated. Once I know whether this is likely to be merged or not, I'll happily write docs and tests where necessary.

If you'd like to test this out, here's a gist with some scripts I wrote to test things: https://gist.github.com/cameronmcefee/643c8824a1888c40542f
",46,True,en
807,,0,False,en
792,"This includes https://github.com/github/hubot/pull/791 and https://github.com/github/hubot/pull/660, so I can release as a beta.
",6,True,en
790,"When I do ""git push heroku master"", Heroku reads the Procfile and activates a web 1X dyno automatically. Therefore, this line is not required.

Output of ""heroku ps"" right after ""git push heroku master"":
=== web (1X): `bin/hubot -a campfire -n Hubot`
web.1: restarting 2014/10/15 22:52:28 (~ 0s ago)

I previously (2 days ago) received this error when running ""heroku ps:scale app=1"":
Scaling dynos... failed
! No such process type app defined in Procfile.

Today, I downloaded a clone of this repo, deployed this template to Heroku by following the instructions, but disregarding ""heroku ps:scale app=1"", and it ran fine, so it is verified that the line I'm proposing to be removed should be removed.

This is in response to:
https://github.com/github/hubot/pull/789

So, feel free to disregard my other pull request if you find this one to be better :)
",24,True,en
789,"Got this error while running: $ heroku ps:scale app=1
Scaling dynos... failed
 !    No such process type app defined in Procfile.

So, I fixed the command to work with your Procfile :) But in actuality, I didn't need to run the dyno command since the web dyno was 1 after ""git push heroku master"" completes for me. But it never hurts to be explicit when sending Heroku commands.
",2,False,en
782,,0,False,en
777,"Currently, Hubot doesnâ€™t output any hints if we type a subtle mis-spelling. 
This PR enables to suggest commands close to input through a levenshtein distance algorithm.

The function looks like this:

``` sh
Hubot> hubot youtobe me penguin
Hubot> Could not find command 'hubot youtobe me penguin'.
Maybe you meant 'Hubot youtube me' or 'Hubot time' or 'Hubot the rules'.
Run `Hubot help` for more commands.
```

I hope this function could be useful.
",0,False,en
775,"The title says it all.

@technicalpickles is there more we should say/do to deprecate this in the current minor version?
",0,True,en
773,"Hubot does not really support any kind of metadata for messages, and even the room support is hacky, since the value is stored in the author (which is actually an instance of user that is stored in the brain). Flowdock adapter also needs to be able to pass other data along with the message, like threading information. Adding all this to the author feels like it's just the wrong place.

I'd like to add a `metadata` field to `TextMessage` so that modifying author could be deprecated and room/thread etc info could be passed in that object. I could do that for just flowdock-adapter, but I'd like the pattern to be officially supported so that other script authors could use that. I created an issue for hubot-flowdock too https://github.com/flowdock/hubot-flowdock/issues/52 and this is a requirement for that to be solved properly.

Any thoughts?
",2,True,en
772,"Removing express from hubot in preparation for [hubot-express](http://github.com/hubot-scripts/hubot-express) package.
",0,True,en
770,"I want to use latest coffee-script npm.
I've tested all `scripts/*.coffee` in hubot template.
",0,False,en
761,"Add 'delayedecho' to ping.coffee. Useful for testing integrations.
",0,True,en
755,,0,False,en
752,"Following the discussion in #619, here's a fix. I've tested it with the `hubot-plusplus` module, which was my use case. It works in that case.

If there are any questions about it, please let me know :-)
### Possible BC breaks

If devs rely on there being a timing issue in the Hubot core, some scripts might break as they might do something like:

``` coffee
if robot.brain.data
    doStuff(robot.brain.data)
robot.brain.on 'loaded', (data) ->
    doStuff(data)
```

In the case described above, with this fix, the `on loaded` event listener would effectively be called twice, whereas before, it would have been called only once.

/cc @technicalpickles 
",3,True,en
744,"Hi guys,

I am feeling it is quite useful to make logs be persisted to disk files rather that only print to stdout. Especially when I also want to use robot.logger to log some script layer information, I would like to have it be kept on file and with hubot internal logging information.

So the easiest way of achieving this is simply use a global variable HUBOT_LOG_FILE, if it is specified, then we will construct a Log instance with a file stream.

Hope this make sense to you, Thanks a lot!
",0,True,en
730,"Also changes the type of the user.id property, this should be an integer to match campfire.
",0,True,en
726,"Currently, you have to be in a proper working directory to launch Hubot. At the same time, we have defined HUBOT_PATH we are almost not using at all.

After that patch, you would be able to execute Hubot from any directory by providing proper HUBOT_PATH:

``` sh
BASEDIR=path/to/bot

npm install --prefix $BASEDIR

env HUBOT_PATH=""$BASEDIR"" $BASEDIR/node_modules/.bin/hubot
```
",0,True,en
724,"Enable Listener hooks that allow for complex match rules.

Example: only execute commands for users who have performed 2FA with hubot.

``` coffeescript
Listener.hooks.push (robot, listener, options, message, cb) ->
  if options.auth?.require_2fa
    if robot.auth.getUserAuthState(message.message.user)
      cb(null, true)
    else
      message.reply ""This command requires two factor authentication. Please run `#{robot.name} auth me` to level up.""
      cb(null, false)
  else
    cb(null, true)
```
",2,True,en
723,,0,False,en
722,"Nitpick change but made me think about why options would be undefined.
",0,True,en
717,"This allows for scripts installed via npm to make use of their own static paths (.e.g `.../hubot/node_modules/hubot-somescript/src/public`)

Specify the `EXPRESS_STATIC` env var like `EXPRESS_STATIC=../node_modules/hubot-module/src/public` when serving static files from a hubot script.
",0,True,en
715,"This change adds a require.cache invalidate to robot.coffee's loadfile function. With this addition, reloading scripts becomes possible (through reload.coffee or script.coffee) without restarting the hubot process. 
",0,True,en
714,"This is useful for testing standalone scripts. It has a simple array to capture responses availables as `#history`.

It looks like this in your tests.

``` coffeescript
Path  = require(""path"")
Robot = require(""hubot"").Robot

pkg = require Path.join __dirname, "".."", 'package.json'
testAdapter = Path.join(__dirname, ""adapters"")

Version = pkg.version

describe ""The Hubot Script"", () ->
  robot = null
  beforeEach () ->
    robot = new Robot testAdapter, ""test"", false, ""hubot""
    robot.loadFile  Path.join(__dirname, "".."", ""src""), ""script.coffee""
    robot.run()

  afterEach () ->
    robot.shutdown()

  it ""displays the version"", () ->
    robot.adapter.receiveText(""hubot deploy:version"")
    expected = ""hubot-deploy v#{Version}/hubot v2.7.5/node v0.10.21""
    assert.equal expected, robot.adapter.history
```
",8,True,en
710,"Re-shrinkwrapped my hubot this morning and found this crash error on heroku:

```
2014-06-05T18:17:00.920746+00:00 heroku[web.1]: State changed from crashed to starting
2014-06-05T18:17:06.781727+00:00 app[web.1]: SyntaxError: Error parsing /app/node_modules/hubot/node_modules/express/node_modules/debug/node_modules/ms/package.json: Unexpected end of input
2014-06-05T18:17:06.781752+00:00 app[web.1]:   at Function.Module._resolveFilename (module.js:336:25)
2014-06-05T18:17:06.781751+00:00 app[web.1]:   at Function.Module._findPath (module.js:190:18)
2014-06-05T18:17:06.781745+00:00 app[web.1]:   at Object.parse (native)
2014-06-05T18:17:06.781748+00:00 app[web.1]:   at readPackage (module.js:113:52)
2014-06-05T18:17:06.781749+00:00 app[web.1]:   at tryPackage (module.js:123:13)
// ...
```

``` diff
[33md5879bc[m -[31m[m Add grunt-release branch to bump shrinkwrap version. 

// ...

diff --git a/npm-shrinkwrap.json b/npm-shrinkwrap.json
index 884a7ff..c4b701b 100644
--- a/npm-shrinkwrap.json
+++ b/npm-shrinkwrap.json
@@ -145,20 +148,29 @@
               ""resolved"": ""https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.1.tgz""
             },
             ""debug"": {
-              ""version"": ""0.8.1"",
-              ""from"": ""debug@*""
+              ""version"": ""1.0.0"",
+              ""from"": ""debug@*"",
+              ""resolved"": ""https://registry.npmjs.org/debug/-/debug-1.0.0.tgz"",
+              ""dependencies"": {
+                ""ms"": {
+                  ""version"": ""0.6.2"",
+                  ""from"": ""ms@0.6.2"",
+                  ""resolved"": ""https://registry.npmjs.org/ms/-/ms-0.6.2.tgz""
+                }
+              }
             }
           }
         }
       }
     },
     ""hubot-auth"": {

// ...

```

Seems that the express version that hubot is using (v3.3.4), has a wildcard for `debug`:
https://github.com/visionmedia/express/blob/3.3.4/package.json#L35

This allowed a sneaky version bump from v0.8.1 to v1.0.0, which has the suspect `ms` package seen in the error.

The next minor version that constrains the `debug`package is v3.4.8:
https://github.com/visionmedia/express/blob/3.4.8/package.json#L36

I'll test it out and submit a PR, if that sounds alright.

Here's the CHANGELOG diff, but it should be anything breaking:
https://github.com/visionmedia/express/compare/3.3.4...3.4.8#diff-e1bbd4f15e3b63427b4261e05b948ea8R16
",298,True,en
709,"I've been writing my own test adapters in separate hubot-scripts. The only way to bang on an adapter is to make it a separate npm package or drop it in hubot. This allows for full paths to adapters to be loaded.
",0,True,en
700,"We've had the ability to `emit 'errors'` for awhile, but the Campfire adapter wasn't updated to use this. This should mean that if you have an error handling script, you'll be able to catch the floods of rate-limiting errors when you connect with lots of rooms.

cc https://github.com/github/hubot/pull/699
",3,True,en
698,"This function returns recent message from current room.
Params:
  limit: number of messages returned
  callback: result
Example:
  robot.adapter.bot.Room(msg.message.room).recentMessages 2, (error, data) ->
    msg.send data

Campfire API (recent messages): https://github.com/basecamp/campfire-api/blob/master/sections/messages.md#get-recent-messages
",1,False,en
693,"The ""who has admin role"" query will now respond with
""Looks like you're the only admin!"" if the person issuing
the query is the only admin.

Previously, the response would be ""no admins"".
",0,False,en
690,,0,False,en
688,"- If you change the name of the bot with --name, the ping path changes
  as well.
",0,False,en
686,"I'd like my bot to be able to stop listening and hearing things.

Thus, I'd like an 'ignore' method, or an ability to get something back from `hear` and `listen` that I can then call `stop` on, to stop hearing and responding.
",0,True,en
687,"The functions that `listen` to messages now return an object with `stop` and `restart` methods. When called, these will stop and restart the listening.

The order in which Listeners are added is maintained (as before), so `done` will still work as expected.
",0,True,en
685,"... for escaping regex.

Use yaml style library declaration.
",0,True,en
684,,0,False,en
676,"#### Summary

Looks like instantiating a new Robot will attach an 'uncaughtException' handler to the main process object using an anonymous function.  This listener is never cleaned up, even when shutdown is explicitly called.  I've added a function emitError that can be referenced when removing the event listener.
#### Issue

The issue is that when a robot is created and shut down multiple times (my use case is unit tests, but there may be others) the event listener for 'uncaughtException' is never removed.  I'll specifically receive a warning in this when running my unit tests, you can see that in the travis-ci link below.  Feel free to use my plugin to reproduce.
#### Links

Unit Tests with warning - https://travis-ci.org/aaronstaves/hubot-substitute/jobs/21996378.
Hubot script - https://github.com/aaronstaves/hubot-substitute
NPM - https://www.npmjs.org/package/hubot-substitute
",8,True,en
674,"Add adapter for [Lingr](http://lingr.com) to the docs.
",0,True,en
672,"If you provide a path to script in `external-scripts.json`, script gets loaded, but it's documentation does not get parsed. This fixes the issue.
",0,True,en
670,"We were seeing strange failures with our hubot. I was able to trace it down to the `brain.userForId` function, which I then updated to solve the issue. I'm going to outline the failure and the changes made to fix it below. If I'm missing anything as far as why this function was originally coded like it was then I can look at fixing the issue in other ways, but in the context I can see this fix is fairly straightforward. 
### The Issue

Ever since we started using the brain to store info on users we noticed a strange failure where new users weren't having @mention_names assigned. 

What appears to be the problem is initially when users are created (in hipchat) they don't have @mention_names. Hubot adds them to the brain as soon as they exist. Then when @mention_name is set the `userForId` function is called again it doesn't update the brain because of the conditions on [line 109](https://github.com/templaedhel/hubot/compare/github:master...templaedhel:userforid-reconciliation?expand=1#diff-3f212f83b49bd9f3b418259c1f06c0cfL109). 
### The Fix

I removed all the logic around if and when to update users in the brain. Now `userForId` will always return the user for the given ID, as well as updating it with any additional attributes passed in. 

This fixes our issue. 
### Several Questions Remain
- Is there a reason behind the complicated logic around only updating if `options.room` isn't set on the existing user? Tracing back through git didn't dig up anything interesting. I also have trouble seeing how these changes will break any logical uses of this function
",27,False,en
665,,0,False,en
656,"EDIT: Original issue title = Clarify where auth.coffee lives

This script seems to live in two places with very different histories:
https://github.com/github/hubot/commits/master/src/scripts/auth.coffee
https://github.com/github/hubot-scripts/commits/master/src/scripts/auth.coffee

Can we get these in sync or kill the one in the hubot repo proper? Really seems like something that should live in community scripts (and extracted into it's own repo later). I get that it's nice to bundle things like this with hubot, but it strikes me as an evolving script that should live where it can easily evolve (ie. not copy-pasted during hubot creation) :)
",0,True,en
655,"I made a post on my blog, it seems like something that should be in the
docs.
",0,False,en
650,"I am looking to detect emotes separately from regular messages in my own hubot. I saw on hubot-irc that the author would be willing to support emote detection if an EmoteMessage class was provided in the hubot core, so I decided to take a stab at implementing it. Thanks!
",0,True,en
649,"I was thinking about this PR in slack adapter repository tinyspeck/hubot-slack#24 and realised that currently we have no ability to send something more complex to the chatroom rather then plain text. 

My PR implements Adapter#custom raw method and Response#custom method. 
Adapter#custom should be extended by adapters that require some additional message types to be sent. 

According to usecase of slack described in related PR it might look something like this:

``` coffee-script
robot.respond /foo$/i, (msg) ->
  data = 
    type: 'slack-attachment'
    content:
      text: ""Optional text that should appear within the attachment""
      color: ""#36a64f""
  msg.custom data
```

in this case adapter should handle itself how to parse objects received and send them back to a chat in appropriate way.

This change should not break anything, but should give extra abilities for adapter developers. 
",6,True,en
646,"...are admins only they can say die
",0,True,en
639,"- Checking if the original message is private is not sufficient to
  guarantee that the response will be sent privately; if the room is
  unlocked before the message can be sent, the message may not be sent
  privately. The first fix is to always attempt to lock the room when
  sending a private reply.
- Count the number of pending lock/unlock operations and only unlock
  after the final one has completed. This prevents asynchronous
  interleaving unlocking operations from causing messages not to be sent
  privately.
",0,False,en
606,"This one's a shot in the dark. I'm not operating this way myself right now, but thought I'd toss it out there for discussion :)

This would be instead of using `hubot --create` command. Might help combat the inception-like confusion that people have had historically, by creating a cleaner separation of ""hubot the bot"" and ""hubot the tool to generate the bot""
## TODO
- [x] Update [""Getting Starting"" docs](https://github.com/github/hubot/tree/master/docs#getting-started-with-hubot)
- [x] Remove [baked-in creator code](https://github.com/github/hubot/blob/master/src/creator.coffee)
- [ ] Transfer [generator-hubot-bot project](https://github.com/patcon/generator-hubot-bot) ownership to github org
- [x] Sensible helper text
- [x] Update [`CONTRIBUTING.md`](https://github.com/github/hubot/blob/master/CONTRIBUTING.md)

cc: @desmondmorris
",0,True,en
626,"If an incoming HTTP request has the `x-hub-signature` header set and the `HUB_SECRET` environment variable is set, verify that the signature is valid.

An invalid signature will not be processed as an error will be thrown from the middleware.

If either the `HUB_SECRET` environment variable isn't set or the `x-hub-signature` header wasn't present in the request, then verification will be bypassed. However, `req.hubVerified` will be undefined.

Any script that wants to ensure only verified requests will be processed can do so like this:

``` coffeescript
module.exports = (robot) ->
  robot.router.post ""/some/url"",
                    robot.requireHubSignature,
                    fn
```

The version of express must also be updated so that it includes the latest connect middleware that provides the verification capability.
",0,True,en
615,"Currently if any of the scripts have an exception, hubot actually ends up leaving the chat and then has to be restarted.

Failing silently isn't great either, but at least hubot sticks around.
",0,True,en
614,"Since iGoogle has been shutdown, the iGoogle Calculator no longer works. Instead I pulled in the mathjs library to evaluate arbitrary math expressions locally.

Conversions aren't working as expected, removed it from the expressions to listen to. Should be doable though. At this point Hubot doesn't crash when you calculate.

This isn't fully complete but I did want to see what the thoughts would be around including another library to do math, or if the preference would be towards an API. One web API that comes to mind is Wolfram Alpha, but you'd need an account.
",0,True,en
612,"This adds the options argument that is part of the [create call/constructor](https://github.com/technoweenie/node-scoped-http-client/blob/4d0807defe6e65a022cca0a6302e1cc895a1f86c/src/index.coffee#L171-L172) from the [scoped http client](https://github.com/technoweenie/node-scoped-http-client).
",29,True,en
604,"This fixed issue #603.  Re-enable help parsing for external scripts.  Help parsing for external
scripts was added in 9435251 and for some reason removed in 2279967.
",17,False,en
577,"English is not my native language, but it seems to be a typo.
",0,True,en
574,"Here is quick fix, but this thing should be probably redesigned. 
Not sure that there is an easy way to do that and not to break any of current community scripts rely on `robot.router`
",0,False,en
565,"Adding some docs about how script load works that I was talking about in my [comment](https://github.com/github/hubot/issues/556#issuecomment-22444355)  on #556 issue
",14,True,en
561,"Previously, showing the help would result in something as:
`<Alias>ping - Reply with pong`
without any whitespace between the alias and the command.
",0,False,en
549,"Ex.

`hubot --alias ""/"" --alias "":"" --alias ""+""`
",0,True,es
544,"This will allow us to branch off ideas from the main `vthree-rethink` branch and still have them built by ye-ole-travis.
",0,True,en
541,"This fixes the test suite and lets us run them on travis.
",0,True,en
529,"I'd rather say he's awesome. Isn't him?
",0,True,en
521,"Creating a deployable hubot (via `hubot -c`) doesn't Just Workâ„¢ when deploying to AWS Elastic Beanstalk out of the box - it was unable to find a start script to get it running.

I copied the same command used by foreman in `Procfile` (primarily for Heroku) and placed it in package.json as a start script. EB is now able to successfully start hubot (`npm start` will now work as well).
- Notes
  - AWS Container Type: 64bit Amazon Linux running Node.js
  - This change does create some minor duplication between `Procfile` and `package.json`
",2,True,en
506,,0,False,en
504,"I cloned down Hubot today and notice many of the tests were failing so I fixed up the tests and go rid of the deprecation warnings.

I then added the required config files to get him running on TravisCI. The only thing required from your end would be setting up the service hook, detailed in step two at this URL:

http://about.travis-ci.org/docs/user/getting-started/
",0,True,en
492,"Please see this discussion that @technicalpickles started.
        https://github.com/github/hubot/commit/0fbcf74#commitcomment-3077952

Looks like I introduced a very serious bug for folks running hubot on heroku in commit https://github.com/github/hubot/commit/0fbcf74.

httpd.coffee was updated in an earlier commit. The corresponding change to robot.coffee was missed. We now ping `#{robot.name}/ping` instead of `hubot/ping`

Instead, I think it would be a fair call to simply `git revert 0fbcf74` and go back to how it was. httpd.coffee consists purely of admin stuff.
",16,False,en
471,"Added method to allow user lookup by mention_name. Tag mention_name complete is useful in chats.
",0,True,en
469,"WIP.

**Notes**

Update these functions and add deprecation warnings to the backwards compatibility functions.
- `msg.http` to `robot.http`
- `msg.send` and `msg.reply` to `robot.send` and `robot.reply` (this relies on some how passing the room info to the send/reply method
- `msg.random` to `robot.random`
",0,True,en
467,"Fixed the rights on path creation to 0755.
",4,True,en
465,,0,False,en
456,"Fixing the command to run hubot locally, so users don't have to add node_modules to their path.
",0,True,en
448,,0,False,en
438,"Set the node version to 0.8.x to retain compatibility with Heroku deployments, 

Fixes https://github.com/github/hubot/issues/437
",5,True,en
434,"Experimental WIP.
",0,True,it
423,"Just adding the missing require statement to load the `util` tools.
",0,True,en
412,"This option used to find where hubot is for adding adapter and scripts.
",0,True,en
411,"I feel that corgis should be added alongside pugs to hubot's repertoire.

I am also responsible for [corginator](http://corginator.herokuapp.com/) ([source](https://github.com/goodgrapes/corginator)) which is what powers the corgime functionality.
",0,True,en
404,"It was moved by commit ae9e939
",4,True,en
386,"Updates `bin/hubot` to use `commander.js`.

After actually rebasing this out of the major update, I'm actually on the fence about this.
",0,True,en
384,"Been a while since I've contributed to hubot. He seems a bit neglected, so let's spruce him up with a major version bump.

This branch is WIP, and looking for a discussion of changes people would love to see in V3.
",1,True,en
378,,0,False,en
377,,0,False,en
375,"Fixes #371. I hope that helps.
",3,True,en
364,"For a long time I was storing hubot's env vars in my local repo and managing them by simply sourcing the files like so:

```
$ source ./shell-config  # file eg.  export HUTOT_ENV_VAR=""...""
$ source ./heroku-config  # file eg.  heroku config:add HUBOT_ENV_VAR=""...""
```

When reusing the same configuration variables in development and production environments I've found it easier just to specify hubot's env vars in a single json file that gets called at runtime. 

Maybe others will find it useful as well...

---

Adds `-i, --config PATH` option to `bin/hubot`.

Usage:

```
$ bin/hubot --config config.json
```

or

```
$ bin/hubot -i config.json
```

Example `config.json`:

```
{
  ""HUBOT_CAMPFIRE_ACCOUNT: ""..."",
  ""HUBOT_CAMPFIRE_ROOMS: ""..."",
  ""HUBOT_CAMPFIRE_TOKEN: ""...""
}
```

Which in turn adds the configuration vars to `process.env` to be used by hubot scripts.

---

hubot is vip on all my teams, major thx github :octocat: :metal: 
",0,True,en
359,"This was causing ""unexpected identifier"" errors when starting up, at least with the shell adapter.
",0,True,en
349,"I needed the ability for hubot to react to topic changes in Campfire as well as the ability to query the Campfire room for information (like the current topic).

I made changes that allow hubot to ""see"" a message.  The function will allow a String, Regex, or actual object name to be specified as what to watch for:

```
module.exports = (robot) ->
  robot.see ""TopicChangeMessage"", (msg) ->
    # do something fun
  robot.see /TopicChangeMessage/, (msg) ->
    # works for funness as well
  robot.see TopicChangeMessage, (msg) ->
    # just remember to require TopicChangeMessage...
```

The <tt>enter</tt> and <tt>leave</tt> events have been updated to use this common way of reacting to message types.

I also added an <tt>info</tt> utility function to the Campfire adaptor.  It is possible I missed something more obvious for using it, but here is what I am currently using:

```
robot.respond /topic/, (msg) ->
  user = msg.message.user
  room = user.room

  robot.adapter.bot.Room(room).info (err, data) ->
    topic = data.room.topic
```

I'm working on an example script for this stuff to commit to [hubot-scripts](https://github.com/github/hubot-scripts)
",0,True,en
345,"Hey there,

to ensure that the help messages are only escaped when necessary I added a new environment variable ""HUBOT_ESCAPE_HELP"" which should be a string 'true' or 'false' due to the lack of boolean environment variables.

Default is not escaped, b/c most of the available adapters are not html-aware.

Love,
",0,True,en
339,"This builds on a prior __dirname patch from @keithduncan

https://github.com/github/hubot/pull/334
That pull should be made first

When Hubot is installed from NPM, the relative path of
../hubot-scripts.json is no longer valid

An npm install looks like

myhubot
Â  node_modules
Â  Â  hubot
Â  Â  Â  bin
Â  Â  Â  Â  hubot
Â  Â  hubot-scripts
Â  Â  Â  src
Â  Â  Â  Â  scripts
Â  hubot-scripts.json

Thefore the original paths specified here are not correct. Â We don't
run on Heroku, so the original path resolutions are left intact, with
fallbacks to the NPM style install if things don't exist.

Opted for sync Fs API here since this is an initial load and won't
hurt perf.
",3,True,en
338,"Our hubot install uses the following bash script during boot-up
to auto-update our install.

However, hubot itself will not find scripts like help.coffee unless
the script finding code here is updated.
# !/bin/sh

export HUBOT_DIR='/opt/hubot/'
export ADAPTER='hipchat'
export HUBOT_USER='lighthouse'
export PORT='5555'

export PATH=""${HUBOT_DIR}node_modules/.bin:${HUBOT_DIR}node_modules/hubot/node_modules/.bin:$PATH""

cd ${HUBOT_DIR}
hg pull -u https://somerepo.com
npm update
exec node_modules/hubot/bin/hubot --name ${HUBOT_USER} --adapter ${ADAPTER} --alias '/'
",4,False,en
325,"fix of the deprecated method
",0,True,en
301,"```
 $ bin/hubot
Error: In /home/steven/github/hubot/src/creator.coffee, Parse error on line 20: Unexpected 'IDENTIFIER'
```
",2,False,en
297,"To bring a lot more testability to hubot I'm working on reworking the included test framework and making it more user friendly. Hopefully this can flow over to the `hubot-scripts` repo as well.

If you have any ideas/suggestions/tips for the direction of the testability, mention it in a comment and let's get this rolling.

**Edit**: another goal is to get the test suite running on Travis-CI. :)
",0,True,en
271,"Main issue was a typo. But also, hubot fails to compile with coffee-script 1.3.x at this point. And rather than try to fix that as part of a keep-alive fix, it seemed more reasonable to not update coffee-script.
",2,True,en
265,"Coming soon(:tm:)...
",0,True,en
264,"I want to update the `bin/hubot` binary to be a little more user friendly especially for those not that familiar with node/git/heroku/etc.
- [DONE] Create a hubot
- [DONE] Start hubot
- [TODO] Update hubot (includes the git add/git commit)
- [TODO] Deploy hubot (unsure about the behaviour of this at the minute)

Maybes
- [TODO] Add/Remove scripts from hubot-scripts.json (includes the git add/git commit)

Any comments/suggestions welcome :)
",0,False,en
254,,0,False,en
221,"Adding `finish()` calls to the core scripts anywhere I thought it made sense to do so.
",0,True,en
209,"The roles script tends to fire frequently on unrelated commands (for ex., ""hubot, the rent is too damn high""). With an error message for users who aren't found, Hubot ends up babbling a lot, in ways that make me doubt his intelligence. I'm just removing the error reporting here - hopefully that's good enough since there's always a reply on success.
",0,True,en
202,"This fixes a problem which I encountered in hubot-irc (related issue
nandub/hubot-irc#2). I guess the problem is that the Robot.TextMessage object
is created in a different module and therefore the `instanceof` call fails
although it is technically a proper instance. However checking the instance
via the `constructor.name` property works.

I'm pretty new to coffee-script, so there is maybe a better way to solve this directly in the adapter module. After all, the other adapters don't seem to have this problem. But I couldn't figure out what they do differently.
",1,False,en
196,"It can fail for a number of reasons and is always important to know why, even to those who aren't directly developing hubot or its adapter to know if is the users fault or an error to report to developers.
",0,True,en
194,"Each time the hipchat adpater receives a new message, a new user is instanciated so when other scripts modify its properties they aren't properly saved.
",0,True,en
193,"Hipchat wasn't using the saved user so scripts like github-credentials did not save the data back to the brain.
",0,True,en
172,"I would like to have at least the first commit (cb01469a) to be merged. That fixes a possible concurrency problem when hubot is connected to multiple flows.

For the latter commit, I don't know what exactly are your plans for hubot adapters, but 8f5607ad fixes a current working directory problem when running a ""deployable hubot"" locally and in heroku.
",10,True,en
147,"We plan use Hubot for storing messages from chatroom (log).
",0,True,en
135,"Ok, correct branch this time. I extracted `Robot.Adapter` so adapters can extend this class instead of `Robot` itself. The `Robot` instance will call the `run()` function for each adapter when its own `run()` is called in `bin/hubot`.

The command line parses `-a adapter1,adapter2,...` and passes that as an array to the `Robot` constructor which will loop through each and attempt to require the adapter and add it to the `@adapters` array.

It is during this load you could effectively load external adapters by trying to `require ""adapter""` which would have been installed via `npm`, and if that fails try loading a local adapter.

The multiple adapter support feels still a bit ""hacked"" together, so extra eyes looking at the code could help suggest alternative ways for parts.
",2,True,en
133,"Started work on being able to have multiple adapters running in the same instance of Hubot.

Began with abstracting the adapters out of `Robot` and making them `Robot.Adapter` and converted the `Shell` adapter. It's got an issue with it responding twice, which I'll debug this evening. Thought I'd through up the pull request to get some input from people and possible directions.
",0,True,en
123,"- clean up strange multiple assignment
- useless event
- remove multiple rooms support

Talker support streaming of multiple channel on a single socket but only let you answer on one at the time. Might fix that later by using multiple socket or add support for multi-channel on a single socket into talker.
",0,False,en
121,,0,False,en
120,"we could probably make the XMPP adapter work here, but this uses the web
api in a polling mode (they don't have streaming)

I'll look into XMPP next just to see how that works. Jaconda has good GTalk support.

I'd appreciate feedback - be brutal, this is my first ""real"" code in coffee script, and my first node work, as well. I'm sure there are things I could do better.
",0,False,en
118,"More often than not, animate me was returning static images.  I found that changing the google images query to include 'gif' returned primarily gifs.
",0,True,en
106,"Hi,
  These three fixes tripped me up while creating a hubot. At least one fix would clarify setup for another user (#102). Thanks for the awesome project!
",3,False,en
101,"Needed a few tweaks to allow it to login as a gtalk user and chat.
",0,True,en
93,"It does _NOT_ handle new files nor file deletion. It think it's not that hard to add such features
",0,True,en
87,"See #82 for history.  /cc @mislav
",2,True,en
86,"This allows remind.coffee from the hubot-scripts repository to play nicely with IRC bots.
",0,True,en
85,"It will show user.name as undefined now because it's not persisted into the options
",0,True,en
82,"I wanted to make my own hubot on command-line, but the current Robot base class was missing several essential features.
1. Hubot scripts are loaded asynchronously, but there's no callback for when that's done. I can't know when listeners are ready.
2. I can't detect when no listener has matched a message. I need the cmdline tool to error out in this case.
3. Hubot outputs all listener regexes to stdout on start, probably for debugging.

Features I've added should be non-invasive. Tell me what you think.

I now have my very own hubot command-line tool:

```
$ open $(hubot mustache me vin diesel)
```

Is this something you might want in as a separate adapter? It's different than shell adapter since it only takes a single command and then exits.
",3,False,en
76,"Adds msg.waitResponse so that hubot can have a conversation with a user. 

See the example in jump.coffee.
",0,True,en
69,"Hi! These changes cause the IrcRobot to use Users that are persisted in the robot brain, as the other adapters do.

Seems like over time in a public channel many barely used Users will accumulate, but for the private workgroup uses hubot seems suited for that oughtn't be a big problem. Let me know if this seems broken somehow. Thanks!
",0,True,en
67,,0,False,en
61,"I have to connect to freenode via port 8001.
",4,True,en
59,"Added support for a non-standard port using HUBOT_IRC_PORT
",0,True,en
58,"/cc @technoweenie. @atmos

Updated the `bin/hubot` with a `-r`/`--redis` flag which uses the `Robot.RedisBrain` instead of the plain `Robot.Brain`. The default can be switched around if people would prefer the Redis brain.

I think the robot brain is probably a candidate for abstraction so people can implement other ways of persisting the data (e.g. `Robot.JsonBrain`)
",0,True,en
52,"Hi all,

There were a few extra things I had to install to get the XMPP bot running. Also added apt packages which can be installed by doing

```
cat apt.txt | xargs sudo apt-get install
```

Thanks.
",0,True,en
43,"Hipchat autocompletes `@name` with a comma (i.e. `@hubot`, <message>) so we should
listen for that too.
",0,False,en
38,"Using NPM to load Hubot on Heroku fails to load the core scripts (that is to say, using the basic heroku template by itself, without hubot as part of the repository)

The following is in the logs: `Loading hubot core scripts for relative scripts at /app/src/hubot/scripts` when in reality the core scripts live in `/app/node_modules/hubot/src/hubot/scripts`

I believe this change _should_ fix things, though itâ€™s a little tricky to test without the changes actually being in the npm version.
",0,True,en
33,"I am working on this. It is pretty basic now. More inputs will be welcomed. Just to make sure that there is no duplicated efforts. That's why I pushed it out first.

It is workable. But, there are still some issues. And, it can be made better. Do help.
",0,True,en
31,"So, @smoak already committed a fix in his fork, but this one add the user name to the options object and updates the test helper user (though, I've been unable to get the tests running on my box to verify this).
",0,True,en
22,"... had to do this to get it to run on heroku. Everything else worked.
",0,True,en
